import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test07501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07501");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Ljava.beans.PropertyDescriptor[name=(III)I; displayName=()L<init>()V;];");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07502");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        generator5.setUseCache(true);
        boolean boolean19 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator5.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test07503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07503");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(true);
        boolean boolean15 = generator5.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin16 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07504");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.String str50 = methodInfo48.toString();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        java.lang.String str62 = classInfo61.toString();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getSuperType();
        org.mockito.asm.Type type65 = classInfo61.getType();
        boolean boolean66 = methodInfo48.equals((java.lang.Object) type65);
        java.lang.String str67 = type65.toString();
        java.lang.String str68 = type65.getInternalName();
        int int70 = type65.getOpcode(1041);
        int int71 = type65.getDimensions();
        java.lang.String str72 = type65.getDescriptor();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.Type[]" + "'", str62, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str67, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str68, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1045 + "'", int70 == 1045);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str72, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07505");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        java.lang.String str34 = propertyDescriptor15.getDisplayName();
        java.lang.reflect.Method method35 = null;
        propertyDescriptor15.setReadMethod(method35);
        java.lang.String str37 = propertyDescriptor15.getDisplayName();
        java.lang.String str38 = propertyDescriptor15.getName();
        java.lang.String str39 = propertyDescriptor15.getShortDescription();
        boolean boolean40 = propertyDescriptor15.isConstrained();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07506");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        java.lang.Object[] objArray14 = new java.lang.Object[] { generator9, 7, 6 };
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        boolean boolean17 = signature2.equals((java.lang.Object) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classArray18);
    }

    @Test
    public void test07507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07507");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str25, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(type26);
    }

    @Test
    public void test07508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07508");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, false, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
    }

    @Test
    public void test07509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07509");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        boolean boolean14 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07510");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj9 = propertyDescriptor3.getValue("org/mockito/asm/Type");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test07511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07511");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str48 = methodInfo47.toString();
        org.mockito.asm.Type[] typeArray49 = methodInfo47.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>()V" + "'", str48, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray49);
    }

    @Test
    public void test07512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07512");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        boolean boolean17 = generator5.getAttemptLoad();
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        generator25.setUseCache(true);
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) typeArray38);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator25.setClasses(classArray42);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator49.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy52);
        generator25.setUseCache(true);
        boolean boolean56 = generator25.getUseCache();
        boolean boolean57 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator25.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy58);
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator5.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
    }

    @Test
    public void test07513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07513");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        boolean boolean10 = propertyDescriptor3.isExpert();
        boolean boolean11 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07514");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        boolean boolean19 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj22 = propertyDescriptor3.getValue("");
        java.lang.Object obj24 = propertyDescriptor3.getValue("int");
        java.lang.reflect.Method method25 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method26 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertNull(method26);
    }

    @Test
    public void test07515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07515");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method63 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
    }

    @Test
    public void test07516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07516");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type9, type10, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray13);
        generator5.setClasses(classArray15);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, true, true);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray30);
        generator5.setDelegates((java.lang.Object[]) strArray17);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray47);
        java.lang.Class<?> wildcardClass49 = methodArray47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list52 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass49, list51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)I" + "'", str25, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
    }

    @Test
    public void test07517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07517");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator35.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator26.getNamingPolicy();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator55.getNamingPolicy();
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator55.setClassLoader(classLoader60);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("int", method63, method64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor65.setValue("", (java.lang.Object) generator67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        generator67.setStrategy(generatorStrategy77);
        generator55.setStrategy(generatorStrategy77);
        generator26.setStrategy(generatorStrategy77);
        java.beans.PropertyEditor propertyEditor81 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator26);
        propertyDescriptor3.setHidden(true);
        java.lang.Object obj85 = propertyDescriptor3.getValue("(III)V");
        java.util.Enumeration<java.lang.String> strEnumeration86 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method87 = null;
        propertyDescriptor3.setWriteMethod(method87);
        java.lang.String str89 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNull(propertyEditor81);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(strEnumeration86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "int" + "'", str89, "int");
    }

    @Test
    public void test07518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07518");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.Object[] objArray38 = new java.lang.Object[] { generator33, 7, 6 };
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator24.setClasses(classArray39);
        java.lang.Class<?> wildcardClass42 = generator24.getClass();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        boolean boolean50 = generator48.getUseCache();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray57);
        generator48.setDelegates((java.lang.Object[]) classArray59);
        java.lang.reflect.Constructor constructor61 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass42, classArray59);
        org.mockito.asm.Type[] typeArray62 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor61);
        org.mockito.asm.Type[] typeArray63 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor61);
        org.mockito.asm.Type[] typeArray64 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor61);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61, 6);
        org.mockito.cglib.core.MethodInfo methodInfo68 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61, 11);
        org.mockito.cglib.core.MethodInfo methodInfo69 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61);
        org.mockito.cglib.core.Signature signature70 = methodInfo69.getSignature();
        propertyDescriptor3.setValue(")L(III)[Lorg/mockito/asm/Type", (java.lang.Object) signature70);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(constructor61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(methodInfo68);
        org.junit.Assert.assertNotNull(methodInfo69);
        org.junit.Assert.assertNotNull(signature70);
    }

    @Test
    public void test07519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07519");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator14.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator37, 7, 6 };
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        boolean boolean45 = signature30.equals((java.lang.Object) classArray43);
        java.lang.String str46 = signature30.getDescriptor();
        org.mockito.asm.Type[] typeArray47 = signature30.getArgumentTypes();
        generator5.setDelegates((java.lang.Object[]) typeArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass50 = generator5.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method51 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test07520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07520");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("int(III)I");
        propertyDescriptor3.setDisplayName("()L<init>()V;");
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        boolean boolean18 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07521");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator5.getStrategy();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        generator26.setStyle((int) (byte) 1);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator35, 7, 6 };
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator26.setClasses(classArray41);
        java.lang.Class<?> wildcardClass44 = generator26.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        boolean boolean52 = generator50.getUseCache();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray59);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        java.lang.reflect.Constructor constructor63 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass44, classArray61);
        java.lang.String str64 = org.mockito.asm.Type.getConstructorDescriptor(constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63, 3);
        org.mockito.cglib.core.Signature signature67 = methodInfo66.getSignature();
        org.mockito.asm.Type[] typeArray68 = methodInfo66.getExceptionTypes();
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("int", method70, method71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor72.setValue("", (java.lang.Object) generator74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator74.getNamingPolicy();
        generator74.setUseCache(true);
        boolean boolean79 = methodInfo66.equals((java.lang.Object) generator74);
        int int80 = methodInfo66.getModifiers();
        org.mockito.asm.Type[] typeArray81 = methodInfo66.getExceptionTypes();
        org.mockito.asm.Type[] typeArray82 = methodInfo66.getExceptionTypes();
        generator5.setDelegates((java.lang.Object[]) typeArray82);
        boolean boolean84 = generator5.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)I" + "'", str60, "(III)I");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(constructor63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()V" + "'", str64, "()V");
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(signature67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test07522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07522");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        propertyDescriptor3.setShortDescription("V");
        propertyDescriptor3.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;");
        java.lang.String str24 = propertyDescriptor3.getName();
        java.lang.reflect.Method method25 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;" + "'", str24, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;");
        org.junit.Assert.assertNull(method25);
    }

    @Test
    public void test07523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07523");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator17, 7, 6 };
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray23);
        generator5.setClasses(classArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader29 = generator5.getClassLoader();
        generator5.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test07524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07524");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        boolean boolean12 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method15 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setConstrained(false);
        boolean boolean18 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07525");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=; expert; values={hi!=F}](III)[Lorg/mockito/asm/Type;", "java.beans.PropertyDescriptor[name=int; displayName=; shortDescription=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=; expert; values={hi!=F}](III)[Lorg/mockito/asm/Type;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07526");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = methodInfo46.toString();
        org.mockito.cglib.core.Signature signature48 = methodInfo46.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo46.getClassInfo();
        int int50 = methodInfo46.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test07527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07527");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator5.getStrategy();
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator5.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy23);
    }

    @Test
    public void test07528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07528");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        generator19.setUseCache(true);
        boolean boolean25 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        generator41.setStyle((int) (byte) 1);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator50, 7, 6 };
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator41.setClasses(classArray56);
        generator33.setClasses(classArray56);
        java.lang.ClassLoader classLoader60 = null;
        generator33.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = generator33.getClassLoader();
        generator5.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = generator5.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator5.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test07529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07529");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.String str9 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(strEnumeration12);
    }

    @Test
    public void test07530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07530");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 1 };
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        generator9.setUseCache(false);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator19, 7, 6 };
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        generator9.setClasses(classArray25);
        java.lang.ClassLoader classLoader29 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader30 = generator9.getClassLoader();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        propertyDescriptor34.setExpert(true);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        java.lang.String str41 = propertyDescriptor34.getName();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor34.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass43);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) propertyDescriptorArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class49 = org.mockito.cglib.core.ReflectUtils.defineClass("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/proxy/Mixin$Generator;", byteArray3, classLoader30);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str46, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(mixin48);
    }

    @Test
    public void test07531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07531");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        int int34 = type10.getSort();
        java.lang.String str35 = type10.getClassName();
        org.mockito.asm.Type type36 = type10.getElementType();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        generator42.setStyle((int) (byte) 1);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator51, 7, 6 };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        java.lang.Class<?> wildcardClass60 = generator42.getClass();
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        boolean boolean68 = generator66.getUseCache();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type71, type72, type74 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray75);
        generator66.setDelegates((java.lang.Object[]) classArray77);
        java.lang.reflect.Constructor constructor79 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass60, classArray77);
        org.mockito.asm.Type[] typeArray80 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor79);
        org.mockito.cglib.core.MethodInfo methodInfo82 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor79, (int) (short) 1);
        org.mockito.cglib.core.Signature signature83 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor79);
        org.mockito.cglib.core.Signature signature84 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor79);
        java.lang.String str85 = signature84.getName();
        org.mockito.asm.Type[] typeArray86 = signature84.getArgumentTypes();
        boolean boolean87 = type36.equals((java.lang.Object) typeArray86);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.mockito.asm.Type[]" + "'", str35, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "int" + "'", str70, "int");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "int" + "'", str73, "int");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(III)I" + "'", str76, "(III)I");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(constructor79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(methodInfo82);
        org.junit.Assert.assertNotNull(signature83);
        org.junit.Assert.assertNotNull(signature84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "<init>" + "'", str85, "<init>");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test07532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07532");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type9, type10, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray13);
        generator5.setClasses(classArray15);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, true, true);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray30);
        generator5.setDelegates((java.lang.Object[]) strArray17);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray47);
        java.lang.Class<?> wildcardClass49 = methodArray47.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass49);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass49);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass49);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, false, true);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)I" + "'", str25, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray58);
    }

    @Test
    public void test07533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07533");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator5, 7, 6 };
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator29, 7, 6 };
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator20.setClasses(classArray35);
        java.lang.Class<?> wildcardClass38 = generator20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass38);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str41, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str42, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
    }

    @Test
    public void test07534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07534");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type[] typeArray16 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor18 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass8, classArray17);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Lorg.mockito.asm.Type;.<init>(org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(classArray17);
    }

    @Test
    public void test07535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07535");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor17.setReadMethod(method18);
        java.lang.reflect.Method method20 = propertyDescriptor17.getWriteMethod();
        java.lang.reflect.Method method21 = null;
        propertyDescriptor17.setReadMethod(method21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        java.lang.reflect.Method method27 = null;
        propertyDescriptor26.setReadMethod(method27);
        java.lang.reflect.Method method29 = propertyDescriptor26.getWriteMethod();
        java.lang.reflect.Method method30 = propertyDescriptor26.getWriteMethod();
        propertyDescriptor26.setName("(III)I");
        java.beans.PropertyEditor propertyEditor33 = propertyDescriptor17.createPropertyEditor((java.lang.Object) propertyDescriptor26);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor17.getPropertyEditorClass();
        boolean boolean35 = propertyDescriptor17.isPreferred();
        propertyDescriptor17.setName("java/lang/Object");
        java.lang.String str38 = propertyDescriptor17.getName();
        java.lang.reflect.Method method39 = null;
        propertyDescriptor17.setReadMethod(method39);
        boolean boolean41 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor17);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertNull(propertyEditor33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java/lang/Object" + "'", str38, "java/lang/Object");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test07536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07536");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        generator5.setUseCache(true);
        generator5.setUseCache(true);
        boolean boolean36 = generator5.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test07537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07537");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        java.lang.ClassLoader classLoader32 = null;
        generator5.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = generator5.getClassLoader();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        generator56.setStyle((int) (byte) 1);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("int", method61, method62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor63.setValue("", (java.lang.Object) generator65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator65.getStrategy();
        java.lang.Object[] objArray70 = new java.lang.Object[] { generator65, 7, 6 };
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        generator56.setClasses(classArray71);
        generator48.setClasses(classArray71);
        java.lang.ClassLoader classLoader75 = null;
        generator48.setClassLoader(classLoader75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator48.getStrategy();
        generator40.setStrategy(generatorStrategy77);
        java.lang.reflect.Method method80 = null;
        java.lang.reflect.Method method81 = null;
        java.beans.PropertyDescriptor propertyDescriptor82 = new java.beans.PropertyDescriptor("int", method80, method81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor82.setValue("", (java.lang.Object) generator84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator84.getNamingPolicy();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str88 = type87.getClassName();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type90 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str91 = type90.getClassName();
        org.mockito.asm.Type type92 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray93 = new org.mockito.asm.Type[] { type89, type90, type92 };
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type87, typeArray93);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray93);
        generator84.setClasses(classArray95);
        generator40.setClasses(classArray95);
        java.lang.Class[] classArray98 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray95);
        generator5.setClasses(classArray95);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "int" + "'", str88, "int");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "int" + "'", str91, "int");
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(III)I" + "'", str94, "(III)I");
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray98);
    }

    @Test
    public void test07538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07538");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 10);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
    }

    @Test
    public void test07539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07539");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo10.getInterfaces();
        org.mockito.asm.Type type30 = classInfo10.getType();
        java.lang.String str31 = type30.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str31, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07540");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        int int13 = type12.getDimensions();
        boolean boolean15 = type12.equals((java.lang.Object) (-1L));
        int int17 = type12.getOpcode(52);
        int int18 = type12.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 56 + "'", int17 == 56);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test07541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07541");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        propertyDescriptor3.setExpert(false);
        java.lang.String str15 = propertyDescriptor3.getName();
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test07542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07542");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 2);
        org.mockito.cglib.core.ClassInfo classInfo52 = methodInfo51.getClassInfo();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator58.getNamingPolicy();
        java.lang.Class<?> wildcardClass61 = generator58.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.lang.String str63 = type62.getClassName();
        int int64 = type62.getDimensions();
        org.mockito.asm.Type type65 = type62.getElementType();
        boolean boolean66 = methodInfo51.equals((java.lang.Object) type62);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str63, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07543");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray15);
        generator6.setClasses(classArray17);
        generator6.setAttemptLoad(false);
        generator6.setUseCache(true);
        generator6.setUseCache(true);
        boolean boolean25 = generator6.getAttemptLoad();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator31.getNamingPolicy();
        boolean boolean34 = generator31.getUseCache();
        generator31.setAttemptLoad(false);
        generator31.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator31.getNamingPolicy();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        generator45.setStyle((int) (byte) 1);
        generator45.setUseCache(true);
        boolean boolean51 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator45.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy52);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("int", method63, method64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor65.setValue("", (java.lang.Object) generator67);
        generator67.setStyle((int) (byte) 1);
        java.lang.reflect.Method method72 = null;
        java.lang.reflect.Method method73 = null;
        java.beans.PropertyDescriptor propertyDescriptor74 = new java.beans.PropertyDescriptor("int", method72, method73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor74.setValue("", (java.lang.Object) generator76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator76, 7, 6 };
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        generator67.setClasses(classArray82);
        generator59.setClasses(classArray82);
        java.lang.ClassLoader classLoader86 = null;
        generator59.setClassLoader(classLoader86);
        java.lang.ClassLoader classLoader88 = generator59.getClassLoader();
        generator31.setClassLoader(classLoader88);
        java.lang.ClassLoader classLoader90 = generator31.getClassLoader();
        generator6.setClassLoader(classLoader90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor92 = org.mockito.cglib.core.ReflectUtils.findConstructor("java/util/Hashtable$Enumerator", classLoader90);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test07544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07544");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type33, type34, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray37);
        generator5.setDelegates((java.lang.Object[]) typeArray37);
        boolean boolean44 = generator5.getAttemptLoad();
        generator5.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader47 = generator5.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)I" + "'", str38, "(III)I");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str40, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str41, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test07545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07545");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.Signature signature61 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60, 1053);
        java.lang.String str64 = methodInfo63.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(signature61);
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<init>()V" + "'", str64, "<init>()V");
    }

    @Test
    public void test07546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07546");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo10.getInterfaces();
        org.mockito.asm.Type[] typeArray30 = classInfo10.getInterfaces();
        org.mockito.asm.Type type31 = classInfo10.getType();
        int int32 = type31.getSize();
        org.mockito.asm.Type type33 = type31.getElementType();
        int int34 = type31.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test07547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07547");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.Signature signature64 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor60);
        org.mockito.asm.Type[] typeArray65 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor60);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(typeArray65);
    }

    @Test
    public void test07548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07548");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 0);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.Object[] objArray48 = null;
        java.lang.Object obj49 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray48);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(obj49);
    }

    @Test
    public void test07549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07549");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(III)I]", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=(III)I]" + "'", str4, "java.beans.PropertyDescriptor[name=(III)I]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07550");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        java.lang.ClassLoader classLoader32 = null;
        generator5.setClassLoader(classLoader32);
        generator5.setUseCache(true);
        generator5.setAttemptLoad(false);
        java.lang.ClassLoader classLoader38 = generator5.getClassLoader();
        boolean boolean39 = generator5.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07551");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        boolean boolean8 = generator5.getUseCache();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        boolean boolean16 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator32.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator24.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy36);
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean42 = generator14.getAttemptLoad();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator48.getNamingPolicy();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        generator56.setStyle((int) (byte) 1);
        generator56.setUseCache(true);
        boolean boolean62 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator56.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy63);
        generator14.setNamingPolicy(namingPolicy63);
        generator5.setNamingPolicy(namingPolicy63);
        generator5.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test07552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07552");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(1);
        java.lang.String str12 = type9.getInternalName();
        java.lang.String str13 = type9.getClassName();
        int int14 = type9.getDimensions();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode((-1));
        boolean boolean18 = type9.equals((java.lang.Object) type15);
        int int19 = type9.getSize();
        int int20 = type9.getDimensions();
        java.lang.String str21 = type9.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type[]" + "'", str13, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str21, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07553");
        java.lang.String[] strArray1 = new java.lang.String[] { "[Ljava/lang/reflect/Method;" };
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type9 };
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray21);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray21);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray21);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray21);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray41);
        generator33.setClasses(classArray43);
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass54);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray58);
        generator33.setDelegates((java.lang.Object[]) strArray45);
        java.lang.String[] strArray61 = new java.lang.String[] {};
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArray68.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass70);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, true, true);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray74);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray76);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray76);
        java.lang.reflect.Method[] methodArray79 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray76);
        java.lang.Class<?> wildcardClass80 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(III)I" + "'", str11, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str24, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str25, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)I" + "'", str69, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(methodArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test07554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07554");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = classInfo9.getType();
        int int11 = classInfo9.getModifiers();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test07555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07555");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lava.beans.PropertyDescriptor[name=int;java.beans.PropertyDescriptor[name=(III)I; preferred]", "<init>()V");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'Lava.beans.PropertyDescriptor[name=int;java.beans.PropertyDescriptor[name=(III)I; preferred]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07556");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.asm.Type; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07557");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.String str50 = methodInfo48.toString();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        java.lang.String str62 = classInfo61.toString();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getSuperType();
        org.mockito.asm.Type type65 = classInfo61.getType();
        boolean boolean66 = methodInfo48.equals((java.lang.Object) type65);
        java.lang.Class<?> wildcardClass67 = methodInfo48.getClass();
        java.lang.String str68 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type72, type73, type75 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray76);
        java.lang.String[] strArray80 = org.mockito.cglib.core.ReflectUtils.getNames(classArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        int int83 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method84 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass67, "", classArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.Type[]" + "'", str62, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org/mockito/cglib/core/ReflectUtils$3" + "'", str68, "org/mockito/cglib/core/ReflectUtils$3");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "int" + "'", str71, "int");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(III)I" + "'", str77, "(III)I");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test07558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07558");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/ReflectUtils$4;", "java.beans.PropertyDescriptor[name=; values={hi!=F}]");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type8, type9, type11 };
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray12.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type19, type20, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray23);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray23);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray23);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray23);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(III)I" + "'", str13, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)I" + "'", str24, "(III)I");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str26, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str27, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)Lava.beans.PropertyDescriptor[name=;" + "'", str28, "(III)Lava.beans.PropertyDescriptor[name=;");
    }

    @Test
    public void test07559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07559");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=int; propertyEditorClass=class [Lorg.mockito.asm.Type;]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07560");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        propertyDescriptor15.setBound(true);
        java.lang.reflect.Method method36 = propertyDescriptor15.getWriteMethod();
        java.lang.Class[] classArray37 = null;
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        generator43.setStyle((int) (byte) 1);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator52, 7, 6 };
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator43.setClasses(classArray58);
        java.lang.Class<?> wildcardClass61 = generator43.getClass();
        java.lang.String str62 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray64);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray65);
        boolean boolean68 = propertyDescriptor15.equals((java.lang.Object) mixin67);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(method36);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str62, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07561");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V(III)Lint;", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setReadMethod(method5);
        propertyDescriptor3.setPreferred(false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type12, type13, type15 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        propertyDescriptor3.setValue("org/mockito/cglib/core/DefaultNamingPolicy", (java.lang.Object) propertyDescriptorArray19);
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "V(III)Lint;" + "'", str4, "V(III)Lint;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(III)I" + "'", str17, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
    }

    @Test
    public void test07562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07562");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getType();
        org.mockito.asm.Type[] typeArray15 = classInfo10.getInterfaces();
        org.mockito.asm.Type type16 = classInfo10.getSuperType();
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test07563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07563");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("V(III)Lint;", "long");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'V(III)Lint;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07564");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("int");
        boolean boolean22 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor3.attributeNames();
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=int; shortDescription=]");
        boolean boolean29 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strEnumeration23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07565");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setReadMethod(method17);
        java.lang.String str19 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test07566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07566");
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 0, (byte) 10, (byte) -1, (byte) 10, (byte) -1 };
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator21.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy23);
        generator13.setUseCache(true);
        generator13.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader29 = null;
        generator13.setClassLoader(classLoader29);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        generator36.setStyle((int) (byte) 1);
        generator36.setUseCache(true);
        boolean boolean42 = generator36.getUseCache();
        generator36.setUseCache(false);
        boolean boolean45 = generator36.getUseCache();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type50, type51, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray54);
        java.lang.Class<?> wildcardClass56 = typeArray54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type61, type62, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray65);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray65);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray65);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        generator36.setClasses(classArray70);
        java.lang.ClassLoader classLoader73 = generator36.getClassLoader();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type76, type77, type79 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray80);
        java.lang.Class<?> wildcardClass82 = typeArray80.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass82);
        org.mockito.cglib.core.ClassInfo classInfo84 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass82);
        org.mockito.cglib.core.ClassInfo classInfo85 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass82);
        org.mockito.cglib.core.ClassInfo classInfo86 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type87 = classInfo86.getSuperType();
        org.mockito.asm.Type type88 = classInfo86.getType();
        org.mockito.asm.Type[] typeArray89 = classInfo86.getInterfaces();
        org.mockito.asm.Type[] typeArray90 = classInfo86.getInterfaces();
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) typeArray90);
        generator13.setClassLoader(classLoader73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class93 = org.mockito.cglib.core.ReflectUtils.defineClass("Lava.beans.PropertyDescriptor[name=;", byteArray7, classLoader73);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)I" + "'", str55, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(III)I" + "'", str66, "(III)I");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str68, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str69, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "int" + "'", str75, "int");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "int" + "'", str78, "int");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(III)I" + "'", str81, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(classInfo84);
        org.junit.Assert.assertNotNull(classInfo85);
        org.junit.Assert.assertNotNull(classInfo86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test07567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07567");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lva/lang/Object;", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type9 };
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass12);
        boolean boolean19 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(III)I" + "'", str11, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07568");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.String str50 = methodInfo48.toString();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        java.lang.String str62 = classInfo61.toString();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getSuperType();
        org.mockito.asm.Type type65 = classInfo61.getType();
        boolean boolean66 = methodInfo48.equals((java.lang.Object) type65);
        java.lang.String str67 = methodInfo48.toString();
        org.mockito.cglib.core.ClassInfo classInfo68 = methodInfo48.getClassInfo();
        java.lang.String str69 = methodInfo48.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.Type[]" + "'", str62, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<init>()V" + "'", str67, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "<init>()V" + "'", str69, "<init>()V");
    }

    @Test
    public void test07569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07569");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; bound]");
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setStyle((int) (byte) 1);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator21.setClasses(classArray36);
        java.lang.Class<?> wildcardClass39 = generator21.getClass();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        boolean boolean47 = generator45.getUseCache();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type50, type51, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray54);
        generator45.setDelegates((java.lang.Object[]) classArray56);
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass39, classArray56);
        java.lang.String str59 = org.mockito.asm.Type.getConstructorDescriptor(constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, 3);
        org.mockito.cglib.core.Signature signature62 = methodInfo61.getSignature();
        org.mockito.asm.Type[] typeArray63 = methodInfo61.getExceptionTypes();
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("int", method65, method66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor67.setValue("", (java.lang.Object) generator69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator69.getNamingPolicy();
        generator69.setUseCache(true);
        boolean boolean74 = methodInfo61.equals((java.lang.Object) generator69);
        int int75 = methodInfo61.getModifiers();
        org.mockito.asm.Type[] typeArray76 = methodInfo61.getExceptionTypes();
        org.mockito.asm.Type[] typeArray77 = methodInfo61.getExceptionTypes();
        org.mockito.cglib.core.Signature signature78 = methodInfo61.getSignature();
        java.lang.String str79 = methodInfo61.toString();
        org.mockito.cglib.core.ClassInfo classInfo80 = methodInfo61.getClassInfo();
        org.mockito.asm.Type[] typeArray81 = methodInfo61.getExceptionTypes();
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("int", method83, method84);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor85.setValue("", (java.lang.Object) generator87);
        java.lang.reflect.Method method89 = null;
        propertyDescriptor85.setReadMethod(method89);
        java.lang.String str91 = propertyDescriptor85.getName();
        propertyDescriptor85.setShortDescription("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        boolean boolean94 = methodInfo61.equals((java.lang.Object) propertyDescriptor85);
        org.mockito.cglib.core.ClassInfo classInfo95 = methodInfo61.getClassInfo();
        org.mockito.cglib.core.Signature signature96 = methodInfo61.getSignature();
        java.lang.String str97 = signature96.getName();
        propertyDescriptor3.setValue("Lorg/mockito/cglib/core/ReflectUtils$3;", (java.lang.Object) signature96);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)I" + "'", str55, "(III)I");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "()V" + "'", str59, "()V");
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(signature62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(signature78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "<init>()V" + "'", str79, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "int" + "'", str91, "int");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(classInfo95);
        org.junit.Assert.assertNotNull(signature96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "<init>" + "'", str97, "<init>");
    }

    @Test
    public void test07570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07570");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        boolean boolean55 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        boolean boolean58 = signature47.equals((java.lang.Object) generator53);
        boolean boolean59 = generator53.getUseCache();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator53.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator53.getNamingPolicy();
        generator53.setUseCache(false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test07571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07571");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor6.setValue("", (java.lang.Object) generator8);
        generator8.setStyle((int) (byte) 1);
        generator8.setUseCache(true);
        boolean boolean14 = generator8.getUseCache();
        generator8.setUseCache(false);
        boolean boolean17 = generator8.getUseCache();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        generator31.setStyle((int) (byte) 1);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        java.lang.Object[] objArray45 = new java.lang.Object[] { generator40, 7, 6 };
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator31.setClasses(classArray46);
        generator23.setClasses(classArray46);
        java.lang.ClassLoader classLoader50 = null;
        generator23.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = generator23.getClassLoader();
        generator8.setClassLoader(classLoader52);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator8.getStrategy();
        java.lang.ClassLoader classLoader57 = generator8.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator8.getNamingPolicy();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("int", method60, method61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor62.setValue("", (java.lang.Object) generator64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        org.mockito.asm.Type[] typeArray68 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray68);
        generator64.setDelegates((java.lang.Object[]) classArray69);
        generator8.setClasses(classArray69);
        java.lang.ClassLoader classLoader72 = generator8.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class73 = org.mockito.cglib.core.ReflectUtils.defineClass("g/mockito/cglib/proxy/Mixin$Generator", byteArray2, classLoader72);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test07572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07572");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator30.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator22.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy36);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator43.setClassLoader(classLoader48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class<?> wildcardClass58 = typeArray56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = classInfo60.getSuperType();
        int int62 = classInfo60.getModifiers();
        org.mockito.asm.Type type63 = classInfo60.getType();
        org.mockito.asm.Type type64 = classInfo60.getSuperType();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        boolean boolean72 = generator70.getUseCache();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type75, type76, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray79);
        generator70.setDelegates((java.lang.Object[]) classArray81);
        boolean boolean83 = classInfo60.equals((java.lang.Object) classArray81);
        java.lang.String[] strArray84 = org.mockito.cglib.core.ReflectUtils.getNames(classArray81);
        generator43.setClasses(classArray81);
        generator5.setClasses(classArray81);
        int int87 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray81);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1041 + "'", int62 == 1041);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(III)I" + "'", str80, "(III)I");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test07573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07573");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        org.mockito.asm.Type type29 = classInfo25.getType();
        org.mockito.asm.Type[] typeArray30 = classInfo25.getInterfaces();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("V(III)Lint;", method32, method33);
        boolean boolean35 = propertyDescriptor34.isExpert();
        java.lang.Object obj37 = propertyDescriptor34.getValue("java.beans.PropertyDescriptor[name=int; bound]");
        boolean boolean38 = propertyDescriptor34.isPreferred();
        boolean boolean39 = classInfo25.equals((java.lang.Object) propertyDescriptor34);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07574");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Object obj7 = propertyDescriptor3.getValue("org.mockito.asm.Type[]");
        propertyDescriptor3.setName("");
        propertyDescriptor3.setConstrained(true);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setPreferred(false);
        java.lang.String str15 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test07575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07575");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("(III)I");
        propertyDescriptor3.setShortDescription("Lint;");
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean14 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setUseCache(false);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        generator21.setStrategy(generatorStrategy32);
        generator21.setUseCache(false);
        generator21.setAttemptLoad(false);
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator21);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass41 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNull(propertyEditor38);
        org.junit.Assert.assertNull(wildcardClass41);
    }

    @Test
    public void test07576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07576");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) typeArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray18);
        generator5.setClasses(classArray22);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator29.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy32);
        generator5.setUseCache(true);
        boolean boolean36 = generator5.getUseCache();
        boolean boolean37 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator5.getNamingPolicy();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor42.setValue("", (java.lang.Object) generator44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator44.getNamingPolicy();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray53);
        generator44.setClasses(classArray55);
        generator44.setAttemptLoad(false);
        generator44.setUseCache(true);
        generator44.setUseCache(true);
        generator44.setUseCache(false);
        generator44.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator44.getStrategy();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("int", method69, method70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor71.setValue("", (java.lang.Object) generator73);
        generator73.setStyle((int) (byte) 1);
        java.lang.reflect.Method method78 = null;
        java.lang.reflect.Method method79 = null;
        java.beans.PropertyDescriptor propertyDescriptor80 = new java.beans.PropertyDescriptor("int", method78, method79);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor80.setValue("", (java.lang.Object) generator82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator82.getStrategy();
        java.lang.Object[] objArray87 = new java.lang.Object[] { generator82, 7, 6 };
        java.lang.Class[] classArray88 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator73.setClasses(classArray88);
        int int91 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray88);
        int int92 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray88);
        java.lang.String[] strArray93 = org.mockito.cglib.core.ReflectUtils.getNames(classArray88);
        generator44.setClasses(classArray88);
        generator5.setClasses(classArray88);
        generator5.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(III)I" + "'", str19, "(III)I");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test07577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07577");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 100, (byte) 10, (byte) 100, (byte) 10, (byte) 1 };
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        boolean boolean15 = generator13.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        generator13.setUseCache(false);
        generator13.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        generator30.setStyle((int) (byte) 1);
        generator30.setUseCache(true);
        boolean boolean36 = generator30.getUseCache();
        generator30.setUseCache(false);
        boolean boolean39 = generator30.getUseCache();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type44, type45, type47 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray59);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray59);
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        generator30.setClasses(classArray64);
        java.lang.ClassLoader classLoader67 = generator30.getClassLoader();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type70, type71, type73 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray74);
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("int", method77, method78);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor79.setValue("", (java.lang.Object) generator81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        java.lang.Object[] objArray86 = new java.lang.Object[] { generator81, 7, 6 };
        java.lang.Class[] classArray87 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray86);
        boolean boolean88 = type68.equals((java.lang.Object) objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray86);
        generator13.setClassLoader(classLoader67);
        java.lang.ClassLoader classLoader92 = generator13.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class93 = org.mockito.cglib.core.ReflectUtils.defineClass("(III)Lava.beans.PropertyDescriptor[name=int;", byteArray7, classLoader92);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 10, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(III)I" + "'", str49, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)I" + "'", str60, "(III)I");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str62, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str63, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(III)I" + "'", str75, "(III)I");
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classLoader92);
    }

    @Test
    public void test07578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07578");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 100);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray49 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()V" + "'", str50, "()V");
    }

    @Test
    public void test07579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07579");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        generator16.setStyle((int) (byte) 1);
        generator16.setUseCache(true);
        boolean boolean22 = generator16.getUseCache();
        generator16.setUseCache(false);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator31, 7, 6 };
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator16.getStrategy();
        generator5.setStrategy(generatorStrategy41);
        boolean boolean43 = generator5.getUseCache();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator49.getNamingPolicy();
        generator49.setUseCache(true);
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type58, type59, type61 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) typeArray62);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray62);
        generator49.setClasses(classArray66);
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("int", method69, method70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor71.setValue("", (java.lang.Object) generator73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator73.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator73.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy76);
        generator5.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator5.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(III)I" + "'", str63, "(III)I");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test07580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07580");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("ava.beans.PropertyDescriptor[name=Lint");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07581");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getType();
        int int16 = type14.getOpcode((-1));
        org.mockito.asm.Type type17 = type14.getElementType();
        org.mockito.asm.Type type18 = type17.getElementType();
        java.lang.Class<?> wildcardClass19 = type18.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        int int33 = classInfo31.getModifiers();
        org.mockito.asm.Type type34 = classInfo31.getType();
        org.mockito.asm.Type type35 = classInfo31.getSuperType();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        boolean boolean43 = generator41.getUseCache();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type46, type47, type49 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray50);
        generator41.setDelegates((java.lang.Object[]) classArray52);
        boolean boolean54 = classInfo31.equals((java.lang.Object) classArray52);
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method57 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass19, "java.beans.PropertyDescriptor[name=V(III)Lint;]", classArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=V(III)Lint;]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1041 + "'", int33 == 1041);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "int" + "'", str45, "int");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(III)I" + "'", str51, "(III)I");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(classArray56);
    }

    @Test
    public void test07582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07582");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setShortDescription("(III)Lorg.mockito.asm.Type[];");
        boolean boolean15 = propertyDescriptor3.isPreferred();
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07583");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.util.List list30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list31 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass23, list30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str25, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str29, "org/mockito/cglib/proxy/Mixin$Generator");
    }

    @Test
    public void test07584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07584");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getAttemptLoad();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy24);
        generator14.setUseCache(true);
        generator14.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator14.getStrategy();
        generator5.setStrategy(generatorStrategy30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader32 = generator5.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy30);
    }

    @Test
    public void test07585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07585");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("intint(III)Lorg.mockito.asm.Type[];", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("(III)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test07586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07586");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator5.getNamingPolicy();
        generator5.setUseCache(false);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator35.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator26.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass52 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
    }

    @Test
    public void test07587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07587");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/proxy/Mixin$Generator;", "java.beans.PropertyDescriptor[name=int]");
    }

    @Test
    public void test07588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07588");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str3, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test07589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07589");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type50, type51, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray54);
        java.lang.Class<?> wildcardClass56 = typeArray54.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo58 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type61 = classInfo60.getSuperType();
        org.mockito.asm.Type type62 = classInfo60.getType();
        org.mockito.asm.Type type63 = classInfo60.getType();
        boolean boolean64 = signature47.equals((java.lang.Object) classInfo60);
        java.lang.String str65 = classInfo60.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)I" + "'", str55, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(classInfo58);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.mockito.asm.Type[]" + "'", str65, "org.mockito.asm.Type[]");
    }

    @Test
    public void test07590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07590");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        java.lang.String str19 = propertyDescriptor15.getShortDescription();
        propertyDescriptor15.setShortDescription("(III)I");
        propertyDescriptor15.setShortDescription("Lint;");
        java.beans.PropertyEditor propertyEditor24 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "Lint;");
        boolean boolean25 = propertyDescriptor3.isHidden();
        boolean boolean26 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(III)I" + "'", str11, "(III)I");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNull(propertyEditor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07591");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator23.getNamingPolicy();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type28, type29, type31 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray32);
        generator23.setClasses(classArray34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type40, type41, type43 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray44.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray55);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray55);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray55);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray55);
        generator23.setDelegates((java.lang.Object[]) typeArray55);
        boolean boolean62 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator23.getStrategy();
        java.beans.PropertyEditor propertyEditor64 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator23);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=int; displayName=org.mockito.asm.Type]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "int" + "'", str30, "int");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(III)I" + "'", str33, "(III)I");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "int" + "'", str42, "int");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(III)I" + "'", str45, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str58, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str59, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNull(propertyEditor64);
    }

    @Test
    public void test07592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07592");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "int(III)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator19, 7, 6 };
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator10.setClasses(classArray25);
        java.lang.Class<?> wildcardClass28 = generator10.getClass();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        boolean boolean36 = generator34.getUseCache();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray43);
        generator34.setDelegates((java.lang.Object[]) classArray45);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass28, classArray45);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray52 = methodInfo50.getExceptionTypes();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator58.getNamingPolicy();
        generator58.setUseCache(true);
        boolean boolean63 = methodInfo50.equals((java.lang.Object) generator58);
        java.lang.Class<?> wildcardClass64 = generator58.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        boolean boolean66 = signature2.equals((java.lang.Object) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo67 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method69 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "int(III)I" + "'", str3, "int(III)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classInfo67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str68, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test07593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07593");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setUseCache(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        generator19.setStrategy(generatorStrategy30);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        generator37.setStrategy(generatorStrategy47);
        generator19.setStrategy(generatorStrategy47);
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test07594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07594");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(1);
        java.lang.String str12 = type9.getClassName();
        int int13 = type9.getSort();
        java.lang.String str14 = type9.toString();
        java.lang.String str15 = type9.toString();
        java.lang.String str16 = type9.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.Type[]" + "'", str12, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str14, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str15, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type[]" + "'", str16, "org.mockito.asm.Type[]");
    }

    @Test
    public void test07595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07595");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07596");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type27, type28, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray31);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray41.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = classInfo45.getSuperType();
        org.mockito.asm.Type[] typeArray47 = classInfo45.getInterfaces();
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray47);
        generator5.setDelegates((java.lang.Object[]) typeArray47);
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator5.getStrategy();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        boolean boolean60 = generator58.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator58.setClassLoader(classLoader61);
        generator58.setUseCache(false);
        generator58.setAttemptLoad(false);
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("int", method68, method69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor70.setValue("", (java.lang.Object) generator72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator72.getStrategy();
        java.lang.reflect.Method method76 = null;
        java.lang.reflect.Method method77 = null;
        java.beans.PropertyDescriptor propertyDescriptor78 = new java.beans.PropertyDescriptor("int", method76, method77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor78.setValue("", (java.lang.Object) generator80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator80.getStrategy();
        generator72.setStrategy(generatorStrategy82);
        generator58.setStrategy(generatorStrategy82);
        generator5.setStrategy(generatorStrategy82);
        generator5.setStyle(2);
        boolean boolean88 = generator5.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(1041);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 1041");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(III)I" + "'", str32, "(III)I");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str34, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str48, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test07597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07597");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        generator29.setStyle((int) (byte) 1);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator38, 7, 6 };
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator29.setClasses(classArray44);
        generator21.setClasses(classArray44);
        java.lang.ClassLoader classLoader48 = null;
        generator21.setClassLoader(classLoader48);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]", (java.lang.Object) generator21);
        java.lang.String str51 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(III)I" + "'", str51, "(III)I");
    }

    @Test
    public void test07598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07598");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=V; shortDescription=()L<init>()V;; hidden; values={hi!=F}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07599");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("<init>()V", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor13.setReadMethod(method14);
        propertyDescriptor13.setExpert(false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor13.setValue("hi!", (java.lang.Object) type19);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor13.setWriteMethod(method21);
        java.lang.String str23 = propertyDescriptor13.getName();
        propertyDescriptor13.setConstrained(true);
        propertyDescriptor13.setExpert(true);
        propertyDescriptor13.setDisplayName("(III)F");
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator45.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type62 = signature61.getReturnType();
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("int", method64, method65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor66.setValue("", (java.lang.Object) generator68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator68, 7, 6 };
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        boolean boolean76 = signature61.equals((java.lang.Object) classArray74);
        java.lang.String str77 = signature61.getDescriptor();
        org.mockito.asm.Type[] typeArray78 = signature61.getArgumentTypes();
        generator36.setDelegates((java.lang.Object[]) typeArray78);
        propertyDescriptor13.setValue("(III)Ljava/lang/Object;", (java.lang.Object) generator36);
        propertyDescriptor13.setDisplayName("java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]");
        java.lang.String str83 = propertyDescriptor13.getShortDescription();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]", (java.lang.Object) propertyDescriptor13);
        java.lang.Object obj86 = propertyDescriptor3.getValue("()V");
        java.lang.reflect.Method method87 = null;
        propertyDescriptor3.setReadMethod(method87);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<init>()V" + "'", str6, "<init>()V");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(III)I" + "'", str77, "(III)I");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]" + "'", str83, "java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]");
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test07600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07600");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = methodInfo46.getSignature();
        java.lang.String str48 = methodInfo46.toString();
        int int49 = methodInfo46.getModifiers();
        java.lang.String str50 = methodInfo46.toString();
        int int51 = methodInfo46.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>()V" + "'", str48, "<init>()V");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test07601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07601");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.getName();
        org.mockito.asm.Type[] typeArray6 = signature2.getArgumentTypes();
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int(III)I" + "'", str4, "int(III)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test07602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07602");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        generator6.setAttemptLoad(false);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type27, type28, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray31);
        generator22.setClasses(classArray33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray43.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type50, type51, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray54);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray54);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray54);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray54);
        generator22.setDelegates((java.lang.Object[]) typeArray54);
        boolean boolean61 = generator22.getAttemptLoad();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("int", method63, method64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor65.setValue("", (java.lang.Object) generator67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        generator75.setStyle((int) (byte) 1);
        java.lang.reflect.Method method80 = null;
        java.lang.reflect.Method method81 = null;
        java.beans.PropertyDescriptor propertyDescriptor82 = new java.beans.PropertyDescriptor("int", method80, method81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor82.setValue("", (java.lang.Object) generator84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator84.getStrategy();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator84, 7, 6 };
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        generator75.setClasses(classArray90);
        generator67.setClasses(classArray90);
        java.lang.ClassLoader classLoader94 = null;
        generator67.setClassLoader(classLoader94);
        java.lang.ClassLoader classLoader96 = generator67.getClassLoader();
        generator22.setClassLoader(classLoader96);
        generator6.setClassLoader(classLoader96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method99 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(III)I; preferred]", classLoader96);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(III)I" + "'", str32, "(III)I");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)I" + "'", str55, "(III)I");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str57, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str58, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test07603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07603");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 52);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature50 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray51 = signature50.getArgumentTypes();
        java.lang.String str52 = signature50.getDescriptor();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "()V" + "'", str52, "()V");
    }

    @Test
    public void test07604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07604");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=int; hidden; expert; bound]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07605");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.String str16 = signature15.toString();
        boolean boolean17 = classInfo10.equals((java.lang.Object) signature15);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        boolean boolean25 = generator23.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        boolean boolean28 = signature15.equals((java.lang.Object) classLoader26);
        java.lang.String str29 = signature15.getName();
        java.lang.String str30 = signature15.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray31 = signature15.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "intint" + "'", str16, "intint");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "int" + "'", str30, "int");
    }

    @Test
    public void test07606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07606");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        boolean boolean9 = generator6.getUseCache();
        generator6.setAttemptLoad(false);
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator6.getNamingPolicy();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        generator20.setUseCache(true);
        boolean boolean26 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy27);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        generator42.setStyle((int) (byte) 1);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator51, 7, 6 };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        generator34.setClasses(classArray57);
        java.lang.ClassLoader classLoader61 = null;
        generator34.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = generator34.getClassLoader();
        generator6.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = generator6.getClassLoader();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type70, type71, type73 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray74);
        java.lang.Class<?> wildcardClass76 = typeArray74.getClass();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray85 = new org.mockito.asm.Type[] { type81, type82, type84 };
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray85);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray85);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray85);
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray85);
        java.lang.String[] strArray91 = org.mockito.cglib.core.ReflectUtils.getNames(classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) strArray91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method93 = org.mockito.cglib.core.ReflectUtils.findMethod("<init>", classLoader65);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(III)I" + "'", str75, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "int" + "'", str83, "int");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(III)I" + "'", str86, "(III)I");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str88, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str89, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test07607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07607");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "int");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = classInfo13.getSuperType();
        int int15 = classInfo13.getModifiers();
        org.mockito.asm.Type type16 = classInfo13.getType();
        org.mockito.asm.Type type17 = classInfo13.getType();
        org.mockito.asm.Type[] typeArray18 = classInfo13.getInterfaces();
        int int19 = classInfo13.getModifiers();
        int int20 = classInfo13.getModifiers();
        boolean boolean21 = signature2.equals((java.lang.Object) classInfo13);
        java.lang.String str22 = signature2.toString();
        java.lang.String str23 = signature2.getName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(III)I" + "'", str10, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1041 + "'", int19 == 1041);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1041 + "'", int20 == 1041);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "intint" + "'", str22, "intint");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
    }

    @Test
    public void test07608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07608");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lint;");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getInternalName();
        int int4 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "int" + "'", str3, "int");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test07609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07609");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1, (byte) 10 };
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor10.setValue("", (java.lang.Object) generator12);
        generator12.setStyle((int) (byte) 1);
        generator12.setUseCache(true);
        boolean boolean18 = generator12.getUseCache();
        generator12.setUseCache(false);
        boolean boolean21 = generator12.getUseCache();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        generator35.setStyle((int) (byte) 1);
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor42.setValue("", (java.lang.Object) generator44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator44, 7, 6 };
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator35.setClasses(classArray50);
        generator27.setClasses(classArray50);
        java.lang.ClassLoader classLoader54 = null;
        generator27.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = generator27.getClassLoader();
        generator12.setClassLoader(classLoader56);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator12.getStrategy();
        java.lang.ClassLoader classLoader61 = generator12.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class62 = org.mockito.cglib.core.ReflectUtils.defineClass("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;", byteArray6, classLoader61);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test07610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07610");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.String str19 = classInfo18.toString();
        org.mockito.asm.Type type20 = classInfo18.getSuperType();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.String str24 = signature23.toString();
        boolean boolean25 = classInfo18.equals((java.lang.Object) signature23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean25);
        java.lang.reflect.Method method27 = null;
        propertyDescriptor3.setReadMethod(method27);
        boolean boolean29 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("(III)Lorg/mockito/asm/Type;");
        boolean boolean32 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type[]" + "'", str19, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "intint" + "'", str24, "intint");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07611");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        generator19.setUseCache(true);
        boolean boolean25 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        generator41.setStyle((int) (byte) 1);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator50, 7, 6 };
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator41.setClasses(classArray56);
        generator33.setClasses(classArray56);
        java.lang.ClassLoader classLoader60 = null;
        generator33.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = generator33.getClassLoader();
        generator5.setClassLoader(classLoader62);
        boolean boolean64 = generator5.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test07612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07612");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator18, 7, 6 };
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray24);
        generator6.setClasses(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator6.getStrategy();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray38.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray49);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray49);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray49);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray49);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        generator6.setClasses(classArray54);
        java.lang.ClassLoader classLoader57 = generator6.getClassLoader();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type60, type61, type63 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray64);
        java.lang.Class<?> wildcardClass66 = typeArray64.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.lang.String str69 = type68.toString();
        java.lang.String str70 = type68.getClassName();
        int int71 = type68.getDimensions();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type74, type75, type77 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray78);
        java.lang.Class<?> wildcardClass80 = typeArray78.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass80);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass80);
        org.mockito.cglib.core.ClassInfo classInfo85 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass80);
        boolean boolean87 = classInfo85.equals((java.lang.Object) (short) 1);
        org.mockito.asm.Type[] typeArray88 = classInfo85.getInterfaces();
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) typeArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor91 = org.mockito.cglib.core.ReflectUtils.findConstructor("org.mockito.cglib.core.ReflectUtils$3", classLoader57);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(III)I" + "'", str50, "(III)I");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str52, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str53, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "int" + "'", str59, "int");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(III)I" + "'", str65, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str69, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.Type[]" + "'", str70, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "int" + "'", str73, "int");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "int" + "'", str76, "int");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(III)I" + "'", str79, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(classInfo85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str89, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test07613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07613");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]");
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setConstrained(true);
        boolean boolean21 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07614");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        int int59 = methodInfo45.getModifiers();
        org.mockito.asm.Type[] typeArray60 = methodInfo45.getExceptionTypes();
        org.mockito.asm.Type[] typeArray61 = methodInfo45.getExceptionTypes();
        org.mockito.cglib.core.Signature signature62 = methodInfo45.getSignature();
        java.lang.String str63 = methodInfo45.toString();
        org.mockito.cglib.core.ClassInfo classInfo64 = methodInfo45.getClassInfo();
        org.mockito.asm.Type[] typeArray65 = methodInfo45.getExceptionTypes();
        int int66 = methodInfo45.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(signature62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<init>()V" + "'", str63, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
    }

    @Test
    public void test07615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07615");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "int(III)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator19, 7, 6 };
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator10.setClasses(classArray25);
        java.lang.Class<?> wildcardClass28 = generator10.getClass();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        boolean boolean36 = generator34.getUseCache();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray43);
        generator34.setDelegates((java.lang.Object[]) classArray45);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass28, classArray45);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray52 = methodInfo50.getExceptionTypes();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator58.getNamingPolicy();
        generator58.setUseCache(true);
        boolean boolean63 = methodInfo50.equals((java.lang.Object) generator58);
        java.lang.Class<?> wildcardClass64 = generator58.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        boolean boolean66 = signature2.equals((java.lang.Object) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo67 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method69 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "int(III)I" + "'", str3, "int(III)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classInfo67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
    }

    @Test
    public void test07616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07616");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(true);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("()C");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
    }

    @Test
    public void test07617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07617");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        generator16.setStyle((int) (byte) 1);
        generator16.setUseCache(true);
        boolean boolean22 = generator16.getUseCache();
        generator16.setUseCache(false);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator31, 7, 6 };
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator16.getStrategy();
        generator5.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator5.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test07618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07618");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj11 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; hidden; values={hi!=F; I=org.mockito.asm.Type[]}]");
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("[Lorg/mockito/asm/Type;", "()V");
        java.lang.String str16 = signature15.getDescriptor();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type19, type20, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        int int28 = type27.getSort();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        java.lang.reflect.Method method33 = null;
        propertyDescriptor32.setReadMethod(method33);
        java.lang.String str35 = propertyDescriptor32.getName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray43.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass45);
        propertyDescriptor32.setValue("I", (java.lang.Object) propertyDescriptorArray46);
        propertyDescriptor32.setHidden(false);
        boolean boolean50 = type27.equals((java.lang.Object) propertyDescriptor32);
        int int51 = type27.getDimensions();
        org.mockito.asm.Type type52 = type27.getElementType();
        boolean boolean53 = signature15.equals((java.lang.Object) type52);
        java.lang.String str54 = type52.getClassName();
        java.lang.String str55 = type52.getInternalName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type58, type59, type61 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray62.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str67 = type66.toString();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type70, type71, type73 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray74);
        java.lang.Class<?> wildcardClass76 = typeArray74.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass76);
        org.mockito.cglib.core.ClassInfo classInfo78 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass76);
        java.lang.String str79 = classInfo78.toString();
        org.mockito.asm.Type type80 = classInfo78.getSuperType();
        org.mockito.asm.Type[] typeArray81 = classInfo78.getInterfaces();
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray81);
        org.mockito.cglib.core.Signature signature83 = new org.mockito.cglib.core.Signature("Lint;", type52, typeArray81);
        boolean boolean84 = propertyDescriptor3.equals((java.lang.Object) signature83);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "()V" + "'", str16, "()V");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)I" + "'", str24, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.mockito.asm.Type" + "'", str54, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/Type" + "'", str55, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(III)I" + "'", str63, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str67, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(III)I" + "'", str75, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(classInfo78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.asm.Type[]" + "'", str79, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str82, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test07619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07619");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=int; bound]");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        boolean boolean4 = type1.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, false, false);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(methodArray9);
    }

    @Test
    public void test07620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07620");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        generator5.setUseCache(true);
        generator5.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader21 = null;
        generator5.setClassLoader(classLoader21);
        boolean boolean23 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin24 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07621");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        java.lang.Object obj29 = null;
        boolean boolean30 = classInfo10.equals(obj29);
        org.mockito.asm.Type type31 = classInfo10.getSuperType();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray38.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray49);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray49);
        java.lang.String str53 = type42.getInternalName();
        java.lang.String str54 = type42.getInternalName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean56 = type42.equals((java.lang.Object) type55);
        boolean boolean57 = classInfo10.equals((java.lang.Object) type42);
        int int58 = classInfo10.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(III)I" + "'", str50, "(III)I");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str52, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str53, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str54, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1041 + "'", int58 == 1041);
    }

    @Test
    public void test07622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07622");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator28.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy30);
        generator5.setNamingPolicy(namingPolicy30);
        org.mockito.asm.ClassVisitor classVisitor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test07623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07623");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("Ljava.beans.PropertyDescriptor[name=int; shortDescription=(III)I; hidden; values={hi!=F; I=org.mockito.asm.Type[]}];");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test07624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07624");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("LLjava/lang/Cloneable;", "LLint;;");
        java.lang.String str3 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLint;;" + "'", str3, "LLint;;");
    }

    @Test
    public void test07625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07625");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type9, type10, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray13);
        generator5.setClasses(classArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator5.getStrategy();
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(generatorStrategy17);
    }

    @Test
    public void test07626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07626");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        generator10.setUseCache(true);
        boolean boolean16 = generator10.getUseCache();
        generator10.setUseCache(false);
        boolean boolean19 = generator10.getUseCache();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        generator33.setStyle((int) (byte) 1);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator42, 7, 6 };
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator33.setClasses(classArray48);
        generator25.setClasses(classArray48);
        java.lang.ClassLoader classLoader52 = null;
        generator25.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = generator25.getClassLoader();
        generator10.setClassLoader(classLoader54);
        generator0.setClassLoader(classLoader54);
        boolean boolean57 = generator0.getUseCache();
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
        boolean boolean60 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test07627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07627");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test07628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07628");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setShortDescription("(III)Lorg.mockito.asm.Type[];");
        java.lang.Object obj16 = propertyDescriptor3.getValue("I");
        propertyDescriptor3.setShortDescription("");
        java.lang.Object obj20 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class org.mockito.cglib.proxy.Mixin$Generator]]");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test07629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07629");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=int; shortDescription=]", "()V");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        org.junit.Assert.assertNotNull(typeArray3);
    }

    @Test
    public void test07630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07630");
        java.lang.Class[] classArray0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator15, 7, 6 };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator6.setClasses(classArray21);
        java.lang.Class<?> wildcardClass24 = generator6.getClass();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        boolean boolean32 = generator30.getUseCache();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type35, type36, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray39);
        generator30.setDelegates((java.lang.Object[]) classArray41);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass24, classArray41);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        java.lang.String str46 = org.mockito.asm.Type.getConstructorDescriptor(constructor43);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor43);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor43);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor43);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor43);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        java.lang.reflect.Method method55 = null;
        propertyDescriptor54.setReadMethod(method55);
        propertyDescriptor54.setExpert(false);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor54.setValue("hi!", (java.lang.Object) type60);
        java.lang.reflect.Method method62 = null;
        propertyDescriptor54.setWriteMethod(method62);
        java.lang.String str64 = propertyDescriptor54.getName();
        propertyDescriptor54.setConstrained(true);
        propertyDescriptor54.setExpert(true);
        propertyDescriptor54.setDisplayName("(III)F");
        java.lang.reflect.Method method71 = null;
        propertyDescriptor54.setReadMethod(method71);
        boolean boolean73 = methodInfo50.equals((java.lang.Object) method71);
        org.mockito.asm.Type[] typeArray74 = methodInfo50.getExceptionTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) typeArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)I" + "'", str40, "(III)I");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "()V" + "'", str46, "()V");
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "int" + "'", str64, "int");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(typeArray74);
    }

    @Test
    public void test07631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07631");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        generator53.setUseCache(false);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.reflect.Method method79 = null;
        java.lang.reflect.Method method80 = null;
        java.beans.PropertyDescriptor propertyDescriptor81 = new java.beans.PropertyDescriptor("int", method79, method80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor81.setValue("", (java.lang.Object) generator83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator83.getNamingPolicy();
        generator75.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator75.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy87);
        generator53.setNamingPolicy(namingPolicy87);
        boolean boolean90 = generator53.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator53.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test07632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07632");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(signature48);
    }

    @Test
    public void test07633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07633");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        java.beans.PropertyEditor propertyEditor36 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str35);
        propertyDescriptor3.setDisplayName("Lorg/mockito/asm/Type;");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)I" + "'", str26, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str34, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str35, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor36);
        org.junit.Assert.assertNull(wildcardClass39);
    }

    @Test
    public void test07634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07634");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str10, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test07635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07635");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator18.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray36);
        generator18.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator18.getStrategy();
        generator5.setStrategy(generatorStrategy41);
        boolean boolean43 = generator5.getAttemptLoad();
        boolean boolean44 = generator5.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin45 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test07636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07636");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        boolean boolean14 = generator5.getUseCache();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        generator28.setStyle((int) (byte) 1);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator37, 7, 6 };
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator28.setClasses(classArray43);
        generator20.setClasses(classArray43);
        java.lang.ClassLoader classLoader47 = null;
        generator20.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = generator20.getClassLoader();
        generator5.setClassLoader(classLoader49);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator5.getStrategy();
        java.lang.ClassLoader classLoader54 = generator5.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator5.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test07637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07637");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        boolean boolean20 = propertyDescriptor3.isPreferred();
        boolean boolean21 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test07638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07638");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        int int2 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test07639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07639");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("boolean()[Lorg/mockito/asm/Type;", "java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'boolean()[Lorg/mockito/asm/Type;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07640");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin20.newInstance((java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type47, type48, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray51);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray51);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray51);
        int int57 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray56);
        int int58 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray56);
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin20.newInstance((java.lang.Object[]) classArray56);
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        generator5.setDelegates((java.lang.Object[]) classArray56);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)I" + "'", str52, "(III)I");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str54, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str55, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test07641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07641");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray39);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type44, type45, type47 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass50);
        java.lang.String str53 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass50);
        java.lang.Object obj57 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23, classArray40, (java.lang.Object[]) propertyDescriptorArray56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(III)I" + "'", str49, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str53, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(classInfo60);
    }

    @Test
    public void test07642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07642");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setBound(false);
        boolean boolean22 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setConstrained(true);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray34.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        boolean boolean43 = classInfo41.equals((java.lang.Object) (short) 1);
        propertyDescriptor3.setValue("intint(III)Lorg.mockito.asm.Type[];", (java.lang.Object) boolean43);
        java.lang.reflect.Method method45 = null;
        propertyDescriptor3.setWriteMethod(method45);
        java.lang.Class<?> wildcardClass47 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardClass47);
    }

    @Test
    public void test07643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07643");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 5);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) 'a');
        org.mockito.cglib.core.Signature signature56 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(signature56);
    }

    @Test
    public void test07644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07644");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.toString();
        java.lang.String str6 = signature2.getName();
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int(III)I" + "'", str4, "int(III)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int(III)I" + "'", str5, "int(III)I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
    }

    @Test
    public void test07645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07645");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("[Ljava/lang/reflect/Method;");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str3, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test07646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07646");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        boolean boolean14 = generator5.getUseCache();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type19, type20, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray34);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray34);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        generator5.setClasses(classArray39);
        java.lang.ClassLoader classLoader42 = generator5.getClassLoader();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        generator48.setStyle((int) (byte) 1);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator57, 7, 6 };
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator48.setClasses(classArray63);
        java.lang.Class<?> wildcardClass66 = generator48.getClass();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("int", method68, method69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor70.setValue("", (java.lang.Object) generator72);
        boolean boolean74 = generator72.getUseCache();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type77, type78, type80 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray81);
        generator72.setDelegates((java.lang.Object[]) classArray83);
        java.lang.reflect.Constructor constructor85 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass66, classArray83);
        org.mockito.asm.Type[] typeArray86 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor85);
        org.mockito.asm.Type[] typeArray87 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor85);
        java.lang.String str88 = org.mockito.asm.Type.getConstructorDescriptor(constructor85);
        org.mockito.cglib.core.MethodInfo methodInfo89 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor85);
        java.lang.String str90 = methodInfo89.toString();
        org.mockito.asm.Type[] typeArray91 = methodInfo89.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo92 = methodInfo89.getClassInfo();
        org.mockito.asm.Type[] typeArray93 = classInfo92.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) typeArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)I" + "'", str24, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str37, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str38, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "int" + "'", str76, "int");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "int" + "'", str79, "int");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(III)I" + "'", str82, "(III)I");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(constructor85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "()V" + "'", str88, "()V");
        org.junit.Assert.assertNotNull(methodInfo89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "<init>()V" + "'", str90, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(classInfo92);
        org.junit.Assert.assertNotNull(typeArray93);
    }

    @Test
    public void test07647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07647");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("()I");
        java.lang.String str17 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "()I" + "'", str17, "()I");
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test07648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07648");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = classInfo11.getType();
        org.mockito.asm.Type type13 = classInfo11.getType();
        org.mockito.asm.Type type14 = classInfo11.getType();
        int int15 = classInfo11.getModifiers();
        int int16 = classInfo11.getModifiers();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        generator22.setStyle((int) (byte) 1);
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator31, 7, 6 };
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator22.setClasses(classArray37);
        java.lang.Class<?> wildcardClass40 = generator22.getClass();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        boolean boolean48 = generator46.getUseCache();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray55);
        generator46.setDelegates((java.lang.Object[]) classArray57);
        java.lang.reflect.Constructor constructor59 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass40, classArray57);
        org.mockito.asm.Type[] typeArray60 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor59);
        org.mockito.asm.Type[] typeArray61 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor59);
        java.lang.String str62 = org.mockito.asm.Type.getConstructorDescriptor(constructor59);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor59);
        java.lang.String str64 = org.mockito.asm.Type.getConstructorDescriptor(constructor59);
        org.mockito.cglib.core.MethodInfo methodInfo65 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor59);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor59);
        org.mockito.asm.Type[] typeArray67 = methodInfo66.getExceptionTypes();
        boolean boolean68 = classInfo11.equals((java.lang.Object) methodInfo66);
        org.mockito.cglib.core.ClassInfo classInfo69 = methodInfo66.getClassInfo();
        java.lang.String str70 = classInfo69.toString();
        org.mockito.asm.Type[] typeArray71 = classInfo69.getInterfaces();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1041 + "'", int16 == 1041);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(constructor59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "()V" + "'", str62, "()V");
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()V" + "'", str64, "()V");
        org.junit.Assert.assertNotNull(methodInfo65);
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classInfo69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str70, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNotNull(typeArray71);
    }

    @Test
    public void test07649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07649");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator35.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator26.getNamingPolicy();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator55.getNamingPolicy();
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator55.setClassLoader(classLoader60);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("int", method63, method64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor65.setValue("", (java.lang.Object) generator67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        generator67.setStrategy(generatorStrategy77);
        generator55.setStrategy(generatorStrategy77);
        generator26.setStrategy(generatorStrategy77);
        java.beans.PropertyEditor propertyEditor81 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator26);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setShortDescription("");
        boolean boolean86 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNull(propertyEditor81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07650");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = methodInfo46.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        int int49 = methodInfo46.getModifiers();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        generator55.setStyle((int) (byte) 1);
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("int", method60, method61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor62.setValue("", (java.lang.Object) generator64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator64, 7, 6 };
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator55.setClasses(classArray70);
        java.lang.Class<?> wildcardClass73 = generator55.getClass();
        java.lang.String str74 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        java.lang.Object obj75 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass73);
        boolean boolean78 = methodInfo46.equals((java.lang.Object) propertyDescriptorArray77);
        org.mockito.cglib.core.ClassInfo classInfo79 = methodInfo46.getClassInfo();
        org.mockito.asm.Type[] typeArray80 = methodInfo46.getExceptionTypes();
        org.mockito.cglib.core.Signature signature81 = methodInfo46.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str74, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classInfo79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(signature81);
    }

    @Test
    public void test07651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07651");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator18.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray36);
        generator18.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator18.getStrategy();
        generator5.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str46 = signature45.getDescriptor();
        java.lang.String str47 = signature45.getDescriptor();
        java.lang.String str48 = signature45.toString();
        java.lang.String str49 = signature45.getDescriptor();
        java.lang.String str50 = signature45.toString();
        org.mockito.asm.Type[] typeArray51 = signature45.getArgumentTypes();
        generator5.setDelegates((java.lang.Object[]) typeArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = generator5.create();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type56, type57, type59 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray60);
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.ClassLoader classLoader64 = null;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type67, type68, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) typeArray71);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str79 = type78.getClassName();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type77, type78, type80 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray81);
        java.lang.Class<?> wildcardClass83 = typeArray81.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass83);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin74.newInstance((java.lang.Object[]) propertyDescriptorArray84);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray84, true, false);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin53.newInstance((java.lang.Object[]) methodArray88);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(III)I" + "'", str47, "(III)I");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int(III)I" + "'", str48, "int(III)I");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(III)I" + "'", str49, "(III)I");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int(III)I" + "'", str50, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "int" + "'", str58, "int");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(III)I" + "'", str61, "(III)I");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(III)I" + "'", str72, "(III)I");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "int" + "'", str76, "int");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "int" + "'", str79, "int");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(III)I" + "'", str82, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test07652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07652");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str30, "org/mockito/cglib/proxy/Mixin$Generator");
    }

    @Test
    public void test07653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07653");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setName("(III)I");
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setReadMethod(method20);
        java.lang.String str22 = propertyDescriptor3.getDisplayName();
        boolean boolean23 = propertyDescriptor3.isExpert();
        boolean boolean24 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07654");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/cglib/proxy/Mixin$Generator", "(III)Lorg.mockito.asm.Type[];");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        generator10.setUseCache(true);
        boolean boolean16 = generator10.getUseCache();
        generator10.setUseCache(false);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator25, 7, 6 };
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray31);
        generator10.setClasses(classArray31);
        generator10.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator10.getNamingPolicy();
        generator10.setAttemptLoad(false);
        boolean boolean40 = signature2.equals((java.lang.Object) generator10);
        java.lang.String str41 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str3, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(III)Lorg.mockito.asm.Type[];" + "'", str4, "(III)Lorg.mockito.asm.Type[];");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str41, "org/mockito/cglib/proxy/Mixin$Generator");
    }

    @Test
    public void test07655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07655");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator15, 7, 6 };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator6.setClasses(classArray21);
        java.lang.Class<?> wildcardClass24 = generator6.getClass();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        boolean boolean32 = generator30.getUseCache();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type35, type36, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray39);
        generator30.setDelegates((java.lang.Object[]) classArray41);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass24, classArray41);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type[] typeArray45 = classInfo44.getInterfaces();
        org.mockito.asm.Type type46 = classInfo44.getSuperType();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        generator52.setStyle((int) (byte) 1);
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("int", method57, method58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor59.setValue("", (java.lang.Object) generator61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator61.getStrategy();
        java.lang.Object[] objArray66 = new java.lang.Object[] { generator61, 7, 6 };
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator52.setClasses(classArray67);
        java.lang.Class<?> wildcardClass70 = generator52.getClass();
        java.lang.reflect.Method method72 = null;
        java.lang.reflect.Method method73 = null;
        java.beans.PropertyDescriptor propertyDescriptor74 = new java.beans.PropertyDescriptor("int", method72, method73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor74.setValue("", (java.lang.Object) generator76);
        boolean boolean78 = generator76.getUseCache();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray85 = new org.mockito.asm.Type[] { type81, type82, type84 };
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray85);
        generator76.setDelegates((java.lang.Object[]) classArray87);
        java.lang.reflect.Constructor constructor89 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass70, classArray87);
        org.mockito.asm.Type[] typeArray90 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor89);
        java.lang.String str91 = org.mockito.asm.Type.getConstructorDescriptor(constructor89);
        org.mockito.cglib.core.MethodInfo methodInfo92 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor89);
        org.mockito.cglib.core.MethodInfo methodInfo94 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor89, 3);
        org.mockito.asm.Type[] typeArray95 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor89);
        org.mockito.cglib.core.Signature signature96 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=int; bound]]", type46, typeArray95);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)I" + "'", str40, "(III)I");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "int" + "'", str83, "int");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(III)I" + "'", str86, "(III)I");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(constructor89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "()V" + "'", str91, "()V");
        org.junit.Assert.assertNotNull(methodInfo92);
        org.junit.Assert.assertNotNull(methodInfo94);
        org.junit.Assert.assertNotNull(typeArray95);
    }

    @Test
    public void test07656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07656");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type type47 = signature46.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type48 = type47.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(type47);
    }

    @Test
    public void test07657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07657");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setDisplayName("org/mockito/asm/Type");
        java.lang.String str29 = propertyDescriptor3.getShortDescription();
        java.lang.String str30 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/Type" + "'", str29, "org/mockito/asm/Type");
    }

    @Test
    public void test07658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07658");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(III)I]");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.lang.String str38 = classInfo37.toString();
        org.mockito.asm.Type type39 = classInfo37.getSuperType();
        org.mockito.asm.Type type40 = classInfo37.getSuperType();
        org.mockito.asm.Type type41 = classInfo37.getType();
        org.mockito.asm.Type type42 = classInfo37.getType();
        org.mockito.asm.Type type43 = classInfo37.getSuperType();
        org.mockito.asm.Type type44 = classInfo37.getType();
        java.lang.String str45 = classInfo37.toString();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo37);
        org.mockito.asm.Type[] typeArray47 = classInfo37.getInterfaces();
        java.lang.String str48 = classInfo37.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.mockito.asm.Type[]" + "'", str38, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.mockito.asm.Type[]" + "'", str45, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.mockito.asm.Type[]" + "'", str48, "org.mockito.asm.Type[]");
    }

    @Test
    public void test07659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07659");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        propertyDescriptor3.setShortDescription("V");
        propertyDescriptor3.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;");
        java.lang.String str24 = propertyDescriptor3.getName();
        java.lang.reflect.Method method25 = null;
        propertyDescriptor3.setReadMethod(method25);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;" + "'", str24, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;");
    }

    @Test
    public void test07660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07660");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        int int12 = classInfo11.getModifiers();
        org.mockito.asm.Type type13 = classInfo11.getSuperType();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test07661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07661");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        java.lang.Class<?> wildcardClass32 = generator5.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator40.getNamingPolicy();
        boolean boolean43 = generator40.getUseCache();
        generator40.setAttemptLoad(false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass54);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray58);
        generator40.setClasses(classArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method61 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass32, "org.mockito.asm.Type()Lava.beans.PropertyDescriptor[name=int;", classArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: org.mockito.asm.Type()Lava.beans.PropertyDescriptor[name=int;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test07662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07662");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org/mockito/asm/Type", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("Ljava/lang/Object;");
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        propertyDescriptor11.setExpert(true);
        java.lang.String str17 = propertyDescriptor11.getDisplayName();
        java.lang.String str18 = propertyDescriptor11.getName();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator41.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator33.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type50 = signature49.getReturnType();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator56.getStrategy();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator56, 7, 6 };
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        boolean boolean64 = signature49.equals((java.lang.Object) classArray62);
        java.lang.String str65 = signature49.getDescriptor();
        org.mockito.asm.Type[] typeArray66 = signature49.getArgumentTypes();
        generator24.setDelegates((java.lang.Object[]) typeArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator24.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor69 = propertyDescriptor11.createPropertyEditor((java.lang.Object) generator24);
        java.beans.PropertyEditor propertyEditor70 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator24);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/lang/Object;" + "'", str7, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(III)I" + "'", str65, "(III)I");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNull(propertyEditor69);
        org.junit.Assert.assertNull(propertyEditor70);
    }

    @Test
    public void test07663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07663");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("int(III)I");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor6.setValue("", (java.lang.Object) generator8);
        generator8.setStyle((int) (byte) 1);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator17, 7, 6 };
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator8.setClasses(classArray23);
        java.lang.Class<?> wildcardClass26 = generator8.getClass();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        boolean boolean34 = generator32.getUseCache();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray41);
        generator32.setDelegates((java.lang.Object[]) classArray43);
        java.lang.reflect.Constructor constructor45 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass26, classArray43);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor45);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor45);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor45, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo49.getClassInfo();
        int int51 = classInfo50.getModifiers();
        org.mockito.asm.Type[] typeArray52 = classInfo50.getInterfaces();
        org.mockito.asm.Type[] typeArray53 = classInfo50.getInterfaces();
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("hi!", type2, typeArray53);
        int int56 = type2.getOpcode(26);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(constructor45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 26 + "'", int56 == 26);
    }

    @Test
    public void test07664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07664");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        int int27 = type25.getOpcode(1);
        java.lang.String str28 = type25.getInternalName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type33, type34, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) typeArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray37);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray37);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray37);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray37);
        org.mockito.asm.Type[] typeArray46 = org.mockito.asm.Type.getArgumentTypes("(III)V");
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass8, classArray44, (java.lang.Object[]) typeArray46);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Lorg.mockito.asm.Type;.<init>(org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str28, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)I" + "'", str38, "(III)I");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)F" + "'", str42, "(III)F");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str43, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test07665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07665");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray20);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray20);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray20);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray20);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) strArray26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=int; bound]");
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        boolean boolean32 = type29.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        java.lang.Class<?> wildcardClass33 = type29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, false, true);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type42, type43, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray46.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass48);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, false);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray50);
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, false, true);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray57);
        java.lang.Class<?> wildcardClass59 = methodArray58.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method60 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(III)I" + "'", str10, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str23, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str24, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(III)I" + "'", str47, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test07666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07666");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        boolean boolean14 = generator5.getUseCache();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type19, type20, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray34);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray34);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        generator5.setClasses(classArray39);
        java.lang.ClassLoader classLoader42 = generator5.getClassLoader();
        generator5.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)I" + "'", str24, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str37, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str38, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(classLoader42);
    }

    @Test
    public void test07667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07667");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        java.lang.String str52 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 39);
        java.lang.Class<?> wildcardClass55 = constructor42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "()V" + "'", str52, "()V");
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
    }

    @Test
    public void test07668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07668");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07669");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("org/mockito/cglib/proxy/Mixin$Generator");
        propertyDescriptor3.setName("[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test07670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07670");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray6);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        generator15.setStyle((int) (byte) 1);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator24, 7, 6 };
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator15.setClasses(classArray30);
        java.lang.Class<?> wildcardClass33 = generator15.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.Class<?> wildcardClass38 = type37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) propertyDescriptorArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str34, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
    }

    @Test
    public void test07671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07671");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("(III)I");
        propertyDescriptor3.setShortDescription("Lint;");
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean14 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setUseCache(false);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        generator21.setStrategy(generatorStrategy32);
        generator21.setUseCache(false);
        generator21.setAttemptLoad(false);
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader39 = generator21.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNull(propertyEditor38);
    }

    @Test
    public void test07672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07672");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method29 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str28, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test07673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07673");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 17);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str53 = methodInfo52.toString();
        org.mockito.asm.Type[] typeArray54 = methodInfo52.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<init>()V" + "'", str53, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray54);
    }

    @Test
    public void test07674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07674");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 5);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Class<?> wildcardClass52 = constructor42.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass52);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
    }

    @Test
    public void test07675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07675");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        boolean boolean55 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        boolean boolean58 = signature47.equals((java.lang.Object) generator53);
        java.lang.String str59 = signature47.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<init>()V" + "'", str59, "<init>()V");
    }

    @Test
    public void test07676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07676");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj14 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]");
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test07677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07677");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(III)I");
        boolean boolean3 = type0.equals((java.lang.Object) "(III)I");
        org.mockito.asm.Type[] typeArray5 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        java.lang.String str6 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray5);
        java.lang.String str7 = type0.getClassName();
        java.lang.String str8 = type0.getDescriptor();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        java.lang.String str16 = propertyDescriptor12.getDisplayName();
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        java.lang.Class<?> wildcardClass26 = generator24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type29 = classInfo28.getType();
        propertyDescriptor12.setValue("V(III)Lint;", (java.lang.Object) type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("<init>()V");
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        generator38.setStyle((int) (byte) 1);
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator47, 7, 6 };
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator38.setClasses(classArray53);
        java.lang.Class<?> wildcardClass56 = generator38.getClass();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("int", method58, method59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor60.setValue("", (java.lang.Object) generator62);
        boolean boolean64 = generator62.getUseCache();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type67, type68, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray71);
        generator62.setDelegates((java.lang.Object[]) classArray73);
        java.lang.reflect.Constructor constructor75 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass56, classArray73);
        java.lang.String str76 = org.mockito.asm.Type.getConstructorDescriptor(constructor75);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor75);
        org.mockito.asm.Type[] typeArray78 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor75);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray78);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray78);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(III)V" + "'", str6, "(III)V");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(III)I" + "'", str72, "(III)I");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(constructor75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()V" + "'", str76, "()V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "()L<init>()V;" + "'", str79, "()L<init>()V;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "()Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str80, "()Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "()V" + "'", str81, "()V");
    }

    @Test
    public void test07678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07678");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
    }

    @Test
    public void test07679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07679");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()Lorg/mockito/cglib/proxy/Mixin$Generator;", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test07680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07680");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getSuperType();
        java.lang.String str15 = classInfo10.toString();
        org.mockito.asm.Type type16 = classInfo10.getSuperType();
        org.mockito.asm.Type type17 = classInfo10.getSuperType();
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) typeArray25);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type31, type32, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin28.newInstance((java.lang.Object[]) propertyDescriptorArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type42, type43, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray46.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin39.newInstance((java.lang.Object[]) methodArray52);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        java.lang.reflect.Method method58 = null;
        propertyDescriptor57.setReadMethod(method58);
        java.lang.String str60 = propertyDescriptor57.getName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArray68.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass70);
        propertyDescriptor57.setValue("I", (java.lang.Object) propertyDescriptorArray71);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, false, true);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin39.newInstance((java.lang.Object[]) propertyDescriptorArray71);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type79, type80, type82 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray83);
        java.lang.Class<?> wildcardClass85 = typeArray83.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray86 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass85);
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass85);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin39.newInstance((java.lang.Object[]) propertyDescriptorArray87);
        java.lang.reflect.Method[] methodArray91 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray87, true, false);
        boolean boolean92 = classInfo10.equals((java.lang.Object) propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.asm.Type[]" + "'", str15, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)I" + "'", str26, "(III)I");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "int" + "'", str30, "int");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(III)I" + "'", str36, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(III)I" + "'", str47, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)I" + "'", str69, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "int" + "'", str78, "int");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "int" + "'", str81, "int");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(III)I" + "'", str84, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(propertyDescriptorArray86);
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(methodArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07681");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo45);
    }

    @Test
    public void test07682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07682");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        boolean boolean18 = propertyDescriptor3.isHidden();
        java.lang.String str19 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07683");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list12 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass8, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test07684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07684");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        boolean boolean12 = generator10.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        generator10.setUseCache(false);
        generator10.setAttemptLoad(false);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator33.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy35);
        generator10.setNamingPolicy(namingPolicy35);
        generator0.setNamingPolicy(namingPolicy35);
        boolean boolean39 = generator0.getAttemptLoad();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        generator45.setStyle((int) (byte) 1);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator54.getStrategy();
        java.lang.Object[] objArray59 = new java.lang.Object[] { generator54, 7, 6 };
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator45.setClasses(classArray60);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator45.getNamingPolicy();
        generator45.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator45.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        boolean boolean68 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07685");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("LIII)Lorg.mockito.asm.Type[];", "java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
    }

    @Test
    public void test07686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07686");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("Z");
        java.lang.String str3 = type2.getInternalName();
        org.mockito.asm.Type[] typeArray5 = org.mockito.asm.Type.getArgumentTypes("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("boolean", type2, typeArray5);
        java.lang.String str7 = type2.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Z" + "'", str3, "Z");
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
    }

    @Test
    public void test07687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07687");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.Object[] objArray2 = null;
        generator0.setDelegates(objArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
    }

    @Test
    public void test07688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07688");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray12 = classInfo10.getInterfaces();
        org.mockito.asm.Type type13 = classInfo10.getType();
        int int14 = type13.getDimensions();
        java.lang.String str15 = type13.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.asm.Type[]" + "'", str15, "org.mockito.asm.Type[]");
    }

    @Test
    public void test07689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07689");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setName("(III)I");
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setHidden(false);
        java.lang.String str20 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)I" + "'", str20, "(III)I");
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test07690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07690");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=int; displayName=[Lorg/mockito/asm/Type;()V; shortDescription=()L<init>()V;; bound]");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=int;" + "'", str2, "Lava.beans.PropertyDescriptor[name=int;");
    }

    @Test
    public void test07691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07691");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("[Lorg/mockito/asm/Type;", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method5 = propertyDescriptor3.getReadMethod();
        boolean boolean6 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        java.lang.reflect.Method method19 = null;
        propertyDescriptor18.setReadMethod(method19);
        java.lang.reflect.Method method21 = propertyDescriptor18.getWriteMethod();
        java.lang.reflect.Method method22 = propertyDescriptor18.getReadMethod();
        propertyDescriptor18.setShortDescription("");
        java.beans.PropertyEditor propertyEditor25 = propertyDescriptor11.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor11.setConstrained(true);
        boolean boolean28 = propertyDescriptor11.isExpert();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator51.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator43.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator34.getNamingPolicy();
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("int", method59, method60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor61.setValue("", (java.lang.Object) generator63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator63.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator63.setClassLoader(classLoader68);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.reflect.Method method79 = null;
        java.lang.reflect.Method method80 = null;
        java.beans.PropertyDescriptor propertyDescriptor81 = new java.beans.PropertyDescriptor("int", method79, method80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor81.setValue("", (java.lang.Object) generator83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator75.setStrategy(generatorStrategy85);
        generator63.setStrategy(generatorStrategy85);
        generator34.setStrategy(generatorStrategy85);
        java.beans.PropertyEditor propertyEditor89 = propertyDescriptor11.createPropertyEditor((java.lang.Object) generator34);
        propertyDescriptor11.setHidden(true);
        java.lang.Object obj93 = propertyDescriptor11.getValue("(III)V");
        java.util.Enumeration<java.lang.String> strEnumeration94 = propertyDescriptor11.attributeNames();
        boolean boolean95 = propertyDescriptor11.isExpert();
        propertyDescriptor3.setValue("", (java.lang.Object) propertyDescriptor11);
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str4, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(propertyEditor25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNull(propertyEditor89);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(strEnumeration94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test07692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07692");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 60);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
    }

    @Test
    public void test07693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07693");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("intint");
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setConstrained(false);
        java.lang.String str27 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
    }

    @Test
    public void test07694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07694");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setPreferred(true);
        boolean boolean14 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(false);
        java.lang.String str17 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test07695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07695");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.ClassInfo classInfo63 = methodInfo62.getClassInfo();
        org.mockito.asm.Type[] typeArray64 = methodInfo62.getExceptionTypes();
        int int65 = methodInfo62.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo66 = methodInfo62.getClassInfo();
        java.lang.String str67 = classInfo66.toString();
        org.mockito.asm.Type[] typeArray68 = classInfo66.getInterfaces();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str67, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNotNull(typeArray68);
    }

    @Test
    public void test07696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07696");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator14.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy16);
        generator5.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator5.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test07697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07697");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("int");
        boolean boolean22 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray25 = classInfo24.getInterfaces();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(typeArray25);
    }

    @Test
    public void test07698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07698");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class org.mockito.cglib.proxy.Mixin$Generator]]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(method12);
    }

    @Test
    public void test07699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07699");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setShortDescription("()V");
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("()V");
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "()V" + "'", str11, "()V");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07700");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("ZZ");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07701");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        java.lang.Class<?> wildcardClass47 = methodInfo45.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass47);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
    }

    @Test
    public void test07702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07702");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(1);
        java.lang.String str12 = type9.getInternalName();
        java.lang.String str13 = type9.getClassName();
        int int14 = type9.getDimensions();
        int int15 = type9.getSize();
        int int16 = type9.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type[]" + "'", str13, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test07703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07703");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        int int2 = type0.getSort();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = classInfo13.getSuperType();
        int int15 = classInfo13.getModifiers();
        org.mockito.asm.Type type16 = classInfo13.getType();
        java.lang.String str17 = type16.getInternalName();
        boolean boolean18 = type0.equals((java.lang.Object) type16);
        int int20 = type0.getOpcode(104);
        java.lang.String str21 = type0.getDescriptor();
        java.lang.String str22 = type0.toString();
        java.lang.String str23 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(III)I" + "'", str10, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str17, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 104 + "'", int20 == 104);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B" + "'", str21, "B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "B" + "'", str22, "B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
    }

    @Test
    public void test07704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07704");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray13);
        java.lang.Class<?> wildcardClass15 = methodArray14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method18 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
    }

    @Test
    public void test07705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07705");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lint;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07706");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list13 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass8, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07707");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.String str14 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
    }

    @Test
    public void test07708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07708");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Z");
        java.lang.String str2 = type1.getClassName();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str6 = signature5.getDescriptor();
        java.lang.String str7 = signature5.getDescriptor();
        java.lang.String str8 = signature5.toString();
        org.mockito.asm.Type[] typeArray9 = signature5.getArgumentTypes();
        boolean boolean10 = type1.equals((java.lang.Object) signature5);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type27 = classInfo26.getType();
        org.mockito.asm.Type[] typeArray28 = classInfo26.getInterfaces();
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray28);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "boolean" + "'", str2, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(III)I" + "'", str6, "(III)I");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int(III)I" + "'", str8, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str22, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Z" + "'", str29, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Z");
    }

    @Test
    public void test07709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07709");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.asm.Type[] typeArray50 = methodInfo49.getExceptionTypes();
        org.mockito.asm.Type[] typeArray51 = methodInfo49.getExceptionTypes();
        org.mockito.cglib.core.Signature signature52 = methodInfo49.getSignature();
        org.mockito.asm.Type[] typeArray53 = signature52.getArgumentTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test07710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07710");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isHidden();
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=V(III)Lint;]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07711");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator15.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator5.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test07712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07712");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 17);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 29);
        org.mockito.cglib.core.Signature signature55 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(signature55);
    }

    @Test
    public void test07713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07713");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = type1.getElementType();
        int int5 = type3.getOpcode(32);
        int int6 = type3.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36 + "'", int5 == 36);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test07714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07714");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        int int14 = type12.getOpcode((int) (byte) 0);
        int int16 = type12.getOpcode((int) (short) 100);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        boolean boolean24 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator32.getNamingPolicy();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray41);
        generator32.setClasses(classArray43);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        java.lang.reflect.Method method52 = null;
        propertyDescriptor48.setReadMethod(method52);
        boolean boolean54 = propertyDescriptor48.isHidden();
        propertyDescriptor48.setShortDescription("hi!");
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("int", method58, method59);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        java.lang.reflect.Method method68 = null;
        propertyDescriptor64.setReadMethod(method68);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        java.lang.reflect.Method method77 = null;
        propertyDescriptor73.setReadMethod(method77);
        boolean boolean79 = propertyDescriptor73.isHidden();
        propertyDescriptor73.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = new java.beans.PropertyDescriptor[] { propertyDescriptor48, propertyDescriptor60, propertyDescriptor64, propertyDescriptor73 };
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray82, false, false);
        generator32.setDelegates((java.lang.Object[]) methodArray85);
        generator22.setDelegates((java.lang.Object[]) methodArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator22.getNamingPolicy();
        boolean boolean89 = type12.equals((java.lang.Object) generator22);
        int int91 = type12.getOpcode(15);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 19 + "'", int91 == 19);
    }

    @Test
    public void test07715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07715");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.asm.Type[] typeArray48 = methodInfo47.getExceptionTypes();
        int int49 = methodInfo47.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo47.getClassInfo();
        int int51 = classInfo50.getModifiers();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type57 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray58.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        java.lang.Class<?> wildcardClass63 = propertyDescriptorArray62.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass63);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        boolean boolean67 = classInfo50.equals((java.lang.Object) classInfo66);
        org.mockito.asm.Type type68 = classInfo50.getType();
        org.mockito.asm.Type[] typeArray69 = classInfo50.getInterfaces();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)I" + "'", str59, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
    }

    @Test
    public void test07716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07716");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) -1);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(methodInfo48);
    }

    @Test
    public void test07717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07717");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.cglib.core.Signature signature47 = methodInfo45.getSignature();
        org.mockito.cglib.core.Signature signature48 = methodInfo45.getSignature();
        int int49 = methodInfo45.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
    }

    @Test
    public void test07718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07718");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setUseCache(false);
        boolean boolean10 = generator6.getAttemptLoad();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator16, 7, 6 };
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        generator6.setClasses(classArray22);
        java.lang.ClassLoader classLoader26 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method27 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=V(III)Lint;; displayName=; propertyEditorClass=class org.mockito.cglib.proxy.Mixin$Generator]", classLoader26);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test07719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07719");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        boolean boolean12 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        generator5.setUseCache(true);
        boolean boolean16 = generator5.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07720");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=int; bound]");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        boolean boolean4 = type1.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo8);
    }

    @Test
    public void test07721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07721");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        boolean boolean14 = classInfo10.equals((java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass15 = classInfo10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        generator22.setStyle((int) (byte) 1);
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator31, 7, 6 };
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator22.setClasses(classArray37);
        java.lang.Class<?> wildcardClass40 = generator22.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        java.lang.Object obj42 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor46 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass15, classArray45);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$4.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str41, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classArray45);
    }

    @Test
    public void test07722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07722");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("C", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setReadMethod(method5);
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
    }

    @Test
    public void test07723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07723");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        propertyDescriptor3.setValue("I", (java.lang.Object) propertyDescriptorArray17);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj22 = propertyDescriptor3.getValue("");
        java.lang.reflect.Method method23 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setWriteMethod(method24);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(method23);
    }

    @Test
    public void test07724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07724");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        java.lang.String str55 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "()V" + "'", str55, "()V");
    }

    @Test
    public void test07725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07725");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(III)LIII)Lorg.mockito.asm.Type;");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("int", method3, method4);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor5.setValue("", (java.lang.Object) generator7);
        generator7.setStyle((int) (byte) 1);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator16, 7, 6 };
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator7.setClasses(classArray22);
        java.lang.Class<?> wildcardClass25 = generator7.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        boolean boolean33 = generator31.getUseCache();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray40);
        generator31.setDelegates((java.lang.Object[]) classArray42);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass25, classArray42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44, (int) (short) 1);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor44);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor44);
        org.mockito.cglib.core.Signature signature50 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor44);
        java.lang.String str51 = org.mockito.asm.Type.getConstructorDescriptor(constructor44);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor44);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        org.mockito.asm.Type[] typeArray55 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray55);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "()V" + "'", str51, "()V");
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "()V" + "'", str53, "()V");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "()LIII)LIII)Lorg.mockito.asm.Type;" + "'", str56, "()LIII)LIII)Lorg.mockito.asm.Type;");
    }

    @Test
    public void test07726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07726");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
    }

    @Test
    public void test07727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07727");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor19.setReadMethod(method23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor28.setReadMethod(method32);
        boolean boolean34 = propertyDescriptor28.isHidden();
        propertyDescriptor28.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] { propertyDescriptor3, propertyDescriptor15, propertyDescriptor19, propertyDescriptor28 };
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type47, type48, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray51.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, false, false);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type63, type64, type66 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray67);
        java.lang.Class<?> wildcardClass69 = typeArray67.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass69);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, true, false);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray44);
        java.lang.String[] strArray77 = org.mockito.cglib.core.ReflectUtils.getNames(classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.String[] strArray79 = org.mockito.cglib.core.ReflectUtils.getNames(classArray78);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)I" + "'", str52, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "int" + "'", str65, "int");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(III)I" + "'", str68, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(strArray79);
    }

    @Test
    public void test07728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07728");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        generator23.setStyle((int) (byte) 1);
        generator23.setUseCache(true);
        boolean boolean29 = generator23.getUseCache();
        generator23.setUseCache(false);
        boolean boolean32 = generator23.getUseCache();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        generator46.setStyle((int) (byte) 1);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator55, 7, 6 };
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator46.setClasses(classArray61);
        generator38.setClasses(classArray61);
        java.lang.ClassLoader classLoader65 = null;
        generator38.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = generator38.getClassLoader();
        generator23.setClassLoader(classLoader67);
        generator5.setClassLoader(classLoader67);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        generator75.setStyle((int) (byte) 1);
        java.lang.reflect.Method method80 = null;
        java.lang.reflect.Method method81 = null;
        java.beans.PropertyDescriptor propertyDescriptor82 = new java.beans.PropertyDescriptor("int", method80, method81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor82.setValue("", (java.lang.Object) generator84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator84.getStrategy();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator84, 7, 6 };
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        generator75.setClasses(classArray90);
        java.lang.Class<?> wildcardClass93 = generator75.getClass();
        java.lang.Object obj94 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass93);
        java.lang.String str95 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass93);
        java.beans.PropertyDescriptor[] propertyDescriptorArray96 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass93);
        org.mockito.asm.Type type97 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass93);
        java.beans.PropertyDescriptor[] propertyDescriptorArray98 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass93);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) propertyDescriptorArray98);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str95, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray96);
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertNotNull(propertyDescriptorArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test07729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07729");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.String str19 = classInfo18.toString();
        org.mockito.asm.Type type20 = classInfo18.getSuperType();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.String str24 = signature23.toString();
        boolean boolean25 = classInfo18.equals((java.lang.Object) signature23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean25);
        boolean boolean27 = propertyDescriptor3.isPreferred();
        boolean boolean28 = propertyDescriptor3.isHidden();
        boolean boolean29 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("org.mockito.cglib.proxy.Mixin$Generator");
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        generator38.setStyle((int) (byte) 1);
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator47, 7, 6 };
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator38.setClasses(classArray53);
        java.lang.Class<?> wildcardClass56 = generator38.getClass();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("int", method58, method59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor60.setValue("", (java.lang.Object) generator62);
        boolean boolean64 = generator62.getUseCache();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type67, type68, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray71);
        generator62.setDelegates((java.lang.Object[]) classArray73);
        java.lang.reflect.Constructor constructor75 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass56, classArray73);
        org.mockito.asm.Type[] typeArray76 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor75);
        java.lang.String str77 = org.mockito.asm.Type.getConstructorDescriptor(constructor75);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor75);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor75, 3);
        org.mockito.asm.Type[] typeArray81 = methodInfo80.getExceptionTypes();
        int int82 = methodInfo80.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo83 = methodInfo80.getClassInfo();
        int int84 = classInfo83.getModifiers();
        java.lang.String str85 = classInfo83.toString();
        propertyDescriptor3.setValue("L)Ljava/lang/Object;", (java.lang.Object) classInfo83);
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type[]" + "'", str19, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "intint" + "'", str24, "intint");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(III)I" + "'", str72, "(III)I");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(constructor75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "()V" + "'", str77, "()V");
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(methodInfo80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(classInfo83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str85, "org.mockito.cglib.proxy.Mixin$Generator");
    }

    @Test
    public void test07730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07730");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        int int22 = type21.getSort();
        int int23 = type21.getDimensions();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type26, type27, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray41);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray41);
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray41);
        propertyDescriptor3.setShortDescription("(III)Lorg.mockito.asm.Type[];");
        java.lang.reflect.Method method49 = null;
        propertyDescriptor3.setReadMethod(method49);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method55 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setName("()Ljava/lang/Object;");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(III)I" + "'", str31, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str44, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str45, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNull(method55);
    }

    @Test
    public void test07731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07731");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/lang/Cloneable", method1, method2);
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setExpert(true);
    }

    @Test
    public void test07732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07732");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type8, type9, type11 };
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.String str17 = classInfo16.toString();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo16.getInterfaces();
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo16);
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("(III)Ljava/lang/Object;");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        boolean boolean26 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(III)I" + "'", str13, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type[]" + "'", str17, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07733");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) methodArray13);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
    }

    @Test
    public void test07734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07734");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.String str19 = classInfo18.toString();
        org.mockito.asm.Type type20 = classInfo18.getSuperType();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.String str24 = signature23.toString();
        boolean boolean25 = classInfo18.equals((java.lang.Object) signature23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean25);
        boolean boolean27 = propertyDescriptor3.isPreferred();
        boolean boolean28 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method29 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        java.lang.reflect.Method method42 = null;
        propertyDescriptor41.setReadMethod(method42);
        java.lang.reflect.Method method44 = propertyDescriptor41.getWriteMethod();
        java.lang.reflect.Method method45 = propertyDescriptor41.getReadMethod();
        propertyDescriptor41.setShortDescription("");
        java.beans.PropertyEditor propertyEditor48 = propertyDescriptor34.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor34.setConstrained(true);
        boolean boolean51 = propertyDescriptor34.isHidden();
        java.lang.Object obj53 = propertyDescriptor34.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method54 = null;
        propertyDescriptor34.setWriteMethod(method54);
        java.lang.Class<?> wildcardClass56 = propertyDescriptor34.getPropertyEditorClass();
        java.lang.reflect.Method method57 = propertyDescriptor34.getWriteMethod();
        java.lang.Class<?> wildcardClass58 = propertyDescriptor34.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass59 = propertyDescriptor34.getClass();
        propertyDescriptor3.setValue("Lorg.mockito.asm.Type;", (java.lang.Object) propertyDescriptor34);
        java.lang.Class<?> wildcardClass61 = propertyDescriptor34.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method62 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type[]" + "'", str19, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "intint" + "'", str24, "intint");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertNull(method44);
        org.junit.Assert.assertNull(method45);
        org.junit.Assert.assertNull(propertyEditor48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNull(method57);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test07735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07735");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType("Lava.beans.PropertyDescriptor[name=int;");
        boolean boolean65 = methodInfo62.equals((java.lang.Object) "Lava.beans.PropertyDescriptor[name=int;");
        int int66 = methodInfo62.getModifiers();
        int int67 = methodInfo62.getModifiers();
        java.lang.Class<?> wildcardClass68 = methodInfo62.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test07736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07736");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray51 = methodInfo50.getExceptionTypes();
        java.lang.String str52 = methodInfo50.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>()V" + "'", str52, "<init>()V");
    }

    @Test
    public void test07737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07737");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = type1.getElementType();
        int int5 = type1.getOpcode(112);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str2, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 116 + "'", int5 == 116);
    }

    @Test
    public void test07738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07738");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type type47 = signature46.getReturnType();
        boolean boolean49 = signature46.equals((java.lang.Object) "int(III)I");
        org.mockito.asm.Type type50 = signature46.getReturnType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
    }

    @Test
    public void test07739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07739");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        generator11.setStyle((int) (byte) 1);
        generator11.setUseCache(true);
        boolean boolean17 = generator11.getUseCache();
        generator11.setUseCache(false);
        boolean boolean20 = generator11.getUseCache();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        generator26.setClasses(classArray49);
        java.lang.ClassLoader classLoader53 = null;
        generator26.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = generator26.getClassLoader();
        generator11.setClassLoader(classLoader55);
        generator1.setClassLoader(classLoader55);
        generator1.setAttemptLoad(false);
        java.lang.ClassLoader classLoader60 = generator1.getClassLoader();
        generator1.setUseCache(false);
        boolean boolean63 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = generator1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor65 = org.mockito.cglib.core.ReflectUtils.findConstructor("LLint;;", classLoader64);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader64);
    }

    @Test
    public void test07740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07740");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int13 = type11.getOpcode(1041);
        org.mockito.asm.Type type14 = type11.getElementType();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator29, 7, 6 };
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator20.setClasses(classArray35);
        java.lang.Class<?> wildcardClass38 = generator20.getClass();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor42.setValue("", (java.lang.Object) generator44);
        boolean boolean46 = generator44.getUseCache();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray53);
        generator44.setDelegates((java.lang.Object[]) classArray55);
        java.lang.reflect.Constructor constructor57 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass38, classArray55);
        org.mockito.asm.Type[] typeArray58 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        org.mockito.asm.Type[] typeArray59 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        java.lang.String str60 = org.mockito.asm.Type.getConstructorDescriptor(constructor57);
        org.mockito.cglib.core.Signature signature61 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        java.lang.String str62 = org.mockito.asm.Type.getConstructorDescriptor(constructor57);
        org.mockito.asm.Type[] typeArray63 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        java.lang.String str64 = org.mockito.asm.Type.getConstructorDescriptor(constructor57);
        org.mockito.cglib.core.Signature signature65 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.mockito.asm.Type[] typeArray66 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray66);
        org.mockito.asm.Type type68 = type14.getElementType();
        int int70 = type14.getOpcode(1049);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1045 + "'", int13 == 1045);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(constructor57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "()V" + "'", str60, "()V");
        org.junit.Assert.assertNotNull(signature61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "()V" + "'", str62, "()V");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()V" + "'", str64, "()V");
        org.junit.Assert.assertNotNull(signature65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "()Lva/lang/Object;" + "'", str67, "()Lva/lang/Object;");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1053 + "'", int70 == 1053);
    }

    @Test
    public void test07741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07741");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("boolean()[Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->boolean.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07742");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator18, 7, 6 };
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray24);
        generator6.setClasses(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader30 = generator6.getClassLoader();
        java.lang.ClassLoader classLoader31 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor32 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]", classLoader31);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test07743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07743");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo61.getClassInfo();
        org.mockito.asm.Type[] typeArray63 = methodInfo61.getExceptionTypes();
        java.lang.String str64 = methodInfo61.toString();
        org.mockito.asm.Type[] typeArray65 = methodInfo61.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo66 = methodInfo61.getClassInfo();
        java.lang.String str67 = classInfo66.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<init>()V" + "'", str64, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str67, "org.mockito.cglib.proxy.Mixin$Generator");
    }

    @Test
    public void test07744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07744");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("[Lorg/mockito/asm/Type;", "()V");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.getDescriptor();
        org.mockito.asm.Type[] typeArray6 = signature2.getArgumentTypes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str3, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Lorg/mockito/asm/Type;()V" + "'", str4, "[Lorg/mockito/asm/Type;()V");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "()V" + "'", str5, "()V");
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test07745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07745");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class<?> wildcardClass58 = typeArray56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = classInfo60.getSuperType();
        int int62 = classInfo60.getModifiers();
        org.mockito.asm.Type type63 = classInfo60.getType();
        org.mockito.asm.Type type64 = classInfo60.getType();
        org.mockito.asm.Type type65 = classInfo60.getType();
        org.mockito.asm.Type type66 = classInfo60.getSuperType();
        boolean boolean67 = methodInfo49.equals((java.lang.Object) type66);
        java.lang.String str68 = methodInfo49.toString();
        org.mockito.cglib.core.Signature signature69 = methodInfo49.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1041 + "'", int62 == 1041);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "<init>()V" + "'", str68, "<init>()V");
        org.junit.Assert.assertNotNull(signature69);
    }

    @Test
    public void test07746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07746");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.ClassLoader classLoader48 = null;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) typeArray55);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray55);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method61 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass23, "java.beans.PropertyDescriptor[name=int; displayName=org.mockito.asm.Type]", classArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=int; displayName=org.mockito.asm.Type]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str45, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
    }

    @Test
    public void test07747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07747");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()V", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "()V" + "'", str6, "()V");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "()V" + "'", str7, "()V");
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test07748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07748");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray44 = classInfo43.getInterfaces();
        org.mockito.asm.Type type45 = classInfo43.getType();
        org.mockito.asm.Type type46 = classInfo43.getType();
        org.mockito.asm.Type type47 = classInfo43.getType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
    }

    @Test
    public void test07749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07749");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Z");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07750");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(III)I" + "'", str13, "(III)I");
    }

    @Test
    public void test07751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07751");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(III)V", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("org.mockito.asm.Type[]java.beans.PropertyDescriptor[name=(III)I]");
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test07752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07752");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator20, 7, 6 };
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray26);
        generator5.setClasses(classArray26);
        generator5.setUseCache(true);
        generator5.setUseCache(true);
        boolean boolean34 = generator5.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test07753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07753");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 9);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 8);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
    }

    @Test
    public void test07754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07754");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 100, (byte) 0 };
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        generator10.setUseCache(true);
        boolean boolean16 = generator10.getUseCache();
        generator10.setUseCache(false);
        boolean boolean19 = generator10.getUseCache();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        generator33.setStyle((int) (byte) 1);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator42, 7, 6 };
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator33.setClasses(classArray48);
        generator25.setClasses(classArray48);
        java.lang.ClassLoader classLoader52 = null;
        generator25.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = generator25.getClassLoader();
        generator10.setClassLoader(classLoader54);
        generator10.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator10.getStrategy();
        java.lang.ClassLoader classLoader59 = generator10.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class60 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(III)I; displayName=(III)LIII)Lorg/mockito/asm/Type;; preferred]", byteArray4, classLoader59);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test07755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07755");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.Object obj29 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
    }

    @Test
    public void test07756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07756");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(III)I");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07757");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        generator51.setStyle((int) (byte) 1);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator60.getStrategy();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator60, 7, 6 };
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator51.setClasses(classArray66);
        generator51.setStyle(2);
        java.lang.Class<?> wildcardClass71 = generator51.getClass();
        boolean boolean72 = signature45.equals((java.lang.Object) wildcardClass71);
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        int int75 = type74.getDimensions();
        java.lang.String str76 = type74.toString();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type79, type80, type82 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray83);
        java.lang.Class<?> wildcardClass85 = typeArray83.getClass();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        java.lang.String str88 = type87.toString();
        org.mockito.asm.Type type89 = type87.getElementType();
        int int90 = type89.getSize();
        int int91 = type89.getSize();
        boolean boolean92 = type74.equals((java.lang.Object) type89);
        java.lang.String str93 = type89.toString();
        java.lang.String str94 = type89.getInternalName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str73, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str76, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "int" + "'", str78, "int");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "int" + "'", str81, "int");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(III)I" + "'", str84, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str88, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str93, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org/mockito/asm/Type" + "'", str94, "org/mockito/asm/Type");
    }

    @Test
    public void test07758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07758");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        propertyDescriptor3.setPreferred(true);
        java.lang.String str31 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V" + "'", str31, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
    }

    @Test
    public void test07759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07759");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator18.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray36);
        generator18.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator18.getStrategy();
        generator5.setStrategy(generatorStrategy41);
        generator5.setUseCache(false);
        boolean boolean45 = generator5.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07760");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        java.lang.String str14 = type13.getInternalName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        boolean boolean26 = type13.equals((java.lang.Object) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        int int38 = type37.getSort();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        java.lang.reflect.Method method43 = null;
        propertyDescriptor42.setReadMethod(method43);
        java.lang.String str45 = propertyDescriptor42.getName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class<?> wildcardClass55 = typeArray53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        propertyDescriptor42.setValue("I", (java.lang.Object) propertyDescriptorArray56);
        propertyDescriptor42.setHidden(false);
        boolean boolean60 = type37.equals((java.lang.Object) propertyDescriptor42);
        int int61 = type37.getSort();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArray68.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass70);
        org.mockito.cglib.core.ClassInfo classInfo72 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass70);
        java.lang.String str73 = classInfo72.toString();
        org.mockito.asm.Type type74 = classInfo72.getSuperType();
        org.mockito.asm.Type[] typeArray75 = classInfo72.getInterfaces();
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray75);
        int int77 = type37.getSize();
        org.mockito.asm.Type type78 = type37.getElementType();
        org.mockito.asm.Type type79 = type78.getElementType();
        boolean boolean80 = type13.equals((java.lang.Object) type79);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str14, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "int" + "'", str45, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)I" + "'", str69, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(classInfo72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.mockito.asm.Type[]" + "'", str73, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str76, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test07761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07761");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        java.lang.String str5 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "V" + "'", str5, "V");
    }

    @Test
    public void test07762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07762");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(III)L()V;");
        int int2 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test07763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07763");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setShortDescription("()V");
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07764");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = methodInfo46.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        java.lang.String str49 = classInfo48.toString();
        org.mockito.asm.Type type50 = classInfo48.getSuperType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str49, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNotNull(type50);
    }

    @Test
    public void test07765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07765");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        int int34 = type10.getSort();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray41.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.lang.String str46 = classInfo45.toString();
        org.mockito.asm.Type type47 = classInfo45.getSuperType();
        org.mockito.asm.Type[] typeArray48 = classInfo45.getInterfaces();
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray48);
        org.mockito.asm.Type type50 = type10.getElementType();
        int int51 = type10.getSize();
        java.lang.String str52 = type10.getDescriptor();
        int int54 = type10.getOpcode((int) (byte) 1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.mockito.asm.Type[]" + "'", str46, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str49, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str52, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
    }

    @Test
    public void test07766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07766");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        boolean boolean14 = generator5.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin18.newInstance((java.lang.Object[]) propertyDescriptorArray28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray38.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray49);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray49);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray49);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray49);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        int int56 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin18.newInstance((java.lang.Object[]) classArray54);
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        generator5.setClasses(classArray54);
        boolean boolean61 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(1061);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 1061");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)I" + "'", str26, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(III)I" + "'", str50, "(III)I");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str52, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str53, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07767");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getReadMethod();
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setWriteMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07768");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("()Lava.beans.PropertyDescriptor[name=;", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07769");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; hidden; values={hi!=F; I=org.mockito.asm.Type[]}]; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07770");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type33, type34, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray37);
        generator5.setDelegates((java.lang.Object[]) typeArray37);
        boolean boolean44 = generator5.getUseCache();
        boolean boolean45 = generator5.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)I" + "'", str38, "(III)I");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str40, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str41, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test07771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07771");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator14.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator37, 7, 6 };
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        boolean boolean45 = signature30.equals((java.lang.Object) classArray43);
        java.lang.String str46 = signature30.getDescriptor();
        org.mockito.asm.Type[] typeArray47 = signature30.getArgumentTypes();
        generator5.setDelegates((java.lang.Object[]) typeArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator5.getNamingPolicy();
        boolean boolean51 = generator5.getUseCache();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator57.getNamingPolicy();
        boolean boolean60 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator57.getStrategy();
        generator5.setStrategy(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
    }

    @Test
    public void test07772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07772");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        boolean boolean20 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07773");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("(III)I");
        propertyDescriptor3.setShortDescription("Lint;");
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        generator18.setStyle((int) (byte) 1);
        generator18.setUseCache(true);
        boolean boolean24 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator18.getNamingPolicy();
        generator18.setAttemptLoad(true);
        boolean boolean28 = generator18.getAttemptLoad();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator18);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(propertyEditor29);
    }

    @Test
    public void test07774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07774");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor8.setReadMethod(method12);
        boolean boolean14 = propertyDescriptor8.isHidden();
        propertyDescriptor8.setShortDescription("hi!");
        java.lang.String str17 = propertyDescriptor8.getShortDescription();
        propertyDescriptor8.setConstrained(true);
        propertyDescriptor8.setValue("boolean", (java.lang.Object) 10.0d);
        boolean boolean23 = propertyDescriptor8.isPreferred();
        propertyDescriptor8.setConstrained(true);
        boolean boolean26 = propertyDescriptor8.isPreferred();
        java.lang.String str27 = propertyDescriptor8.getName();
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str27);
        java.lang.String str29 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]" + "'", str4, "java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]" + "'", str29, "java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]");
    }

    @Test
    public void test07775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07775");
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray20);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type26, type27, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = classInfo34.getSuperType();
        org.mockito.asm.Type[] typeArray36 = classInfo34.getInterfaces();
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray36);
        java.lang.ClassLoader classLoader38 = null;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type41, type42, type44 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) typeArray45);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass57);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin48.newInstance((java.lang.Object[]) propertyDescriptorArray58);
        boolean boolean60 = type13.equals((java.lang.Object) mixin59);
        java.lang.String str61 = type13.toString();
        org.mockito.asm.Type type62 = type13.getElementType();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type67, type68, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray71);
        java.lang.Class<?> wildcardClass73 = typeArray71.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type78, type79, type81 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray82);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray82);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray82);
        org.mockito.cglib.core.Signature signature87 = new org.mockito.cglib.core.Signature("[Lorg/mockito/asm/Type;", type13, typeArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature88 = new org.mockito.cglib.core.Signature("()LIII)Lorg/mockito/asm/Type;", type1, typeArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(III)I" + "'", str10, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str23, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(III)I" + "'", str31, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str37, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str61, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(III)I" + "'", str72, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)I" + "'", str83, "(III)I");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str85, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str86, "(III)[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07776");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.Object obj10 = propertyDescriptor3.getValue("(III)I");
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        java.lang.String str20 = propertyDescriptor16.getShortDescription();
        java.lang.String str21 = propertyDescriptor16.getName();
        propertyDescriptor16.setBound(false);
        propertyDescriptor16.setShortDescription("int(III)I");
        propertyDescriptor16.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration28 = propertyDescriptor16.attributeNames();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) strEnumeration28);
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(strEnumeration28);
        org.junit.Assert.assertNull(propertyEditor29);
    }

    @Test
    public void test07777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07777");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int(III)I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java/beans/PropertyDescriptor" + "'", str6, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test07778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07778");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator15.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator5.getAttemptLoad();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.ClassLoader classLoader32 = null;
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator38, 7, 6 };
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class<?> wildcardClass55 = typeArray53.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str58 = type57.toString();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type61, type62, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray65);
        java.lang.Class<?> wildcardClass67 = typeArray65.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass67);
        org.mockito.cglib.core.ClassInfo classInfo69 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass67);
        java.lang.String str70 = classInfo69.toString();
        org.mockito.asm.Type type71 = classInfo69.getSuperType();
        org.mockito.asm.Type[] typeArray72 = classInfo69.getInterfaces();
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin46.newInstance((java.lang.Object[]) typeArray72);
        org.mockito.cglib.core.Signature signature75 = new org.mockito.cglib.core.Signature("[Ljava/beans/PropertyDescriptor;", type31, typeArray72);
        generator5.setDelegates((java.lang.Object[]) typeArray72);
        java.lang.Class<?> wildcardClass77 = generator5.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method78 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str58, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(III)I" + "'", str66, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(classInfo69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.Type[]" + "'", str70, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str73, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test07779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07779");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor", ")L(III)[Lorg/mockito/asm/Type");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.String str4 = signature2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type5 = signature2.getReturnType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ")L(III)[Lorg/mockito/asm/Type" + "'", str3, ")L(III)[Lorg/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor)L(III)[Lorg/mockito/asm/Type" + "'", str4, "java.beans.PropertyDescriptor)L(III)[Lorg/mockito/asm/Type");
    }

    @Test
    public void test07780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07780");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator5.setStrategy(generatorStrategy12);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator19.getNamingPolicy();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type24, type25, type27 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray28);
        generator19.setClasses(classArray30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type47, type48, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray51);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray51);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray51);
        generator19.setDelegates((java.lang.Object[]) typeArray51);
        boolean boolean58 = generator19.getAttemptLoad();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("int", method60, method61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor62.setValue("", (java.lang.Object) generator64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("int", method68, method69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor70.setValue("", (java.lang.Object) generator72);
        generator72.setStyle((int) (byte) 1);
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("int", method77, method78);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor79.setValue("", (java.lang.Object) generator81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        java.lang.Object[] objArray86 = new java.lang.Object[] { generator81, 7, 6 };
        java.lang.Class[] classArray87 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator72.setClasses(classArray87);
        generator64.setClasses(classArray87);
        java.lang.ClassLoader classLoader91 = null;
        generator64.setClassLoader(classLoader91);
        java.lang.ClassLoader classLoader93 = generator64.getClassLoader();
        generator19.setClassLoader(classLoader93);
        generator5.setClassLoader(classLoader93);
        boolean boolean96 = generator5.getAttemptLoad();
        generator5.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(III)I" + "'", str29, "(III)I");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)I" + "'", str52, "(III)I");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str54, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str55, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07781");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj12 = propertyDescriptor3.getValue("(III)[Lorg/mockito/asm/Type;");
        propertyDescriptor3.setDisplayName("()L<init>()V;");
        boolean boolean15 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07782");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        generator5.setStyle(2);
        generator5.setUseCache(true);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        java.lang.Class<?> wildcardClass52 = generator34.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray56);
        generator5.setClasses(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str53, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test07783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07783");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor12.setReadMethod(method20);
        propertyDescriptor12.setHidden(false);
        propertyDescriptor12.setName("Ljava/util/Collections$EmptyEnumeration;");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
    }

    @Test
    public void test07784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07784");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=int; shortDescription=; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07785");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setDisplayName("(III)F");
        java.lang.String str20 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor[name=int; displayName=(III)F; expert; values={hi!=F}; constrained]" + "'", str20, "java.beans.PropertyDescriptor[name=int; displayName=(III)F; expert; values={hi!=F}; constrained]");
    }

    @Test
    public void test07786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07786");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, false, true);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray30);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(classArray31);
    }

    @Test
    public void test07787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07787");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        propertyDescriptor13.setExpert(true);
        java.lang.String str19 = propertyDescriptor13.getDisplayName();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor13.getClass();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.lang.Class[] classArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor25 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray24);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(classInfo23);
    }

    @Test
    public void test07788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07788");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test07789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07789");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setUseCache(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator5.getNamingPolicy();
        generator5.setUseCache(false);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator30.getNamingPolicy();
        boolean boolean33 = generator30.getUseCache();
        generator30.setAttemptLoad(false);
        generator30.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator30.getNamingPolicy();
        generator30.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator30.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test07790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07790");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("int(III)I");
        propertyDescriptor3.setDisplayName("org/mockito/cglib/proxy/Mixin$Generator");
        java.lang.String str15 = propertyDescriptor3.getShortDescription();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray22);
        int int24 = type16.getSize();
        java.beans.PropertyEditor propertyEditor25 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type16);
        java.lang.String str26 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        java.lang.reflect.Method method31 = null;
        propertyDescriptor3.setWriteMethod(method31);
        java.lang.String str33 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int(III)I" + "'", str15, "int(III)I");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(propertyEditor25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str33, "org/mockito/cglib/proxy/Mixin$Generator");
    }

    @Test
    public void test07791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07791");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor6.setValue("", (java.lang.Object) generator8);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor13.setReadMethod(method14);
        java.lang.reflect.Method method16 = propertyDescriptor13.getWriteMethod();
        java.lang.reflect.Method method17 = propertyDescriptor13.getReadMethod();
        propertyDescriptor13.setShortDescription("");
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor6.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor6.setConstrained(true);
        boolean boolean23 = propertyDescriptor6.isHidden();
        java.lang.Object obj25 = propertyDescriptor6.getValue("org.mockito.asm.Type");
        boolean boolean26 = signature2.equals(obj25);
        java.lang.String str27 = signature2.getName();
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
    }

    @Test
    public void test07792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07792");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        boolean boolean16 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test07793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07793");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type type45 = signature44.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type46 = type45.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(type45);
    }

    @Test
    public void test07794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07794");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java/util/Collections$EmptyEnumeration", method1, method2);
        java.beans.PropertyEditor propertyEditor5 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]");
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        java.lang.Class<?> wildcardClass13 = generator11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        int int17 = type15.getOpcode(47);
        boolean boolean18 = propertyDescriptor3.equals((java.lang.Object) type15);
        org.junit.Assert.assertNull(propertyEditor5);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07795");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = methodInfo46.getExceptionTypes();
        java.lang.String str48 = methodInfo46.toString();
        org.mockito.asm.Type[] typeArray49 = methodInfo46.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>()V" + "'", str48, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray49);
    }

    @Test
    public void test07796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07796");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo47 = methodInfo46.getClassInfo();
        int int48 = classInfo47.getModifiers();
        org.mockito.asm.Type type49 = classInfo47.getSuperType();
        int int50 = classInfo47.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
    }

    @Test
    public void test07797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07797");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature50 = methodInfo49.getSignature();
        org.mockito.asm.Type[] typeArray51 = signature50.getArgumentTypes();
        org.mockito.asm.Type type52 = signature50.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = type52.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(type52);
    }

    @Test
    public void test07798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07798");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setDisplayName("[Lorg/mockito/asm/Type;");
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07799");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("int(III)I");
        propertyDescriptor3.setDisplayName("org/mockito/cglib/proxy/Mixin$Generator");
        propertyDescriptor3.setName("org/mockito/asm/Type");
        boolean boolean17 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test07800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07800");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        java.lang.Class<?> wildcardClass59 = generator53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type62 = classInfo61.getSuperType();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type[] typeArray64 = classInfo61.getInterfaces();
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray64);
        java.lang.String[] strArray66 = org.mockito.cglib.core.ReflectUtils.getNames(classArray65);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(strArray66);
    }

    @Test
    public void test07801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07801");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/beans/PropertyDescriptor;", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test07802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07802");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        boolean boolean9 = generator6.getUseCache();
        generator6.setAttemptLoad(false);
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator6.getNamingPolicy();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        generator20.setUseCache(true);
        boolean boolean26 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy27);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        generator42.setStyle((int) (byte) 1);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator51, 7, 6 };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        generator34.setClasses(classArray57);
        java.lang.ClassLoader classLoader61 = null;
        generator34.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = generator34.getClassLoader();
        generator6.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = generator6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator6.getStrategy();
        java.lang.ClassLoader classLoader67 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor68 = org.mockito.cglib.core.ReflectUtils.findConstructor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Z", classLoader67);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader67);
    }

    @Test
    public void test07803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07803");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        generator14.setStyle((int) (byte) 1);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.Object[] objArray28 = new java.lang.Object[] { generator23, 7, 6 };
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator14.setClasses(classArray29);
        generator6.setClasses(classArray29);
        java.lang.ClassLoader classLoader33 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method34 = org.mockito.cglib.core.ReflectUtils.findMethod("", classLoader33);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader33);
    }

    @Test
    public void test07804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07804");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=java.lang.Object; displayName=java.lang.Object; shortDescription=]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07805");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 6);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 11);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 6);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
    }

    @Test
    public void test07806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07806");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("<init>()V", method1, method2);
        propertyDescriptor3.setPreferred(false);
        boolean boolean6 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07807");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(III)Lorg.mockito.asm.Type[];");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("(III)I");
        boolean boolean6 = type3.equals((java.lang.Object) "(III)I");
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray8);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("intint", type2, typeArray8);
        int int11 = type2.getSort();
        org.mockito.asm.Type type12 = type2.getElementType();
        java.lang.String str13 = type2.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(III)V" + "'", str9, "(III)V");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg.mockito.asm.Type[];" + "'", str13, "Lorg.mockito.asm.Type[];");
    }

    @Test
    public void test07808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07808");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        java.lang.Object[] objArray46 = null;
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray46);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
    }

    @Test
    public void test07809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07809");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.reflect.Method method18 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setName("(III)I");
        java.lang.reflect.Method method21 = propertyDescriptor15.getReadMethod();
        java.util.Enumeration<java.lang.String> strEnumeration22 = propertyDescriptor15.attributeNames();
        boolean boolean23 = classInfo10.equals((java.lang.Object) strEnumeration22);
        java.lang.String str24 = classInfo10.toString();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor28.setReadMethod(method32);
        boolean boolean34 = propertyDescriptor28.isHidden();
        propertyDescriptor28.setExpert(false);
        java.lang.String str37 = propertyDescriptor28.getName();
        boolean boolean38 = propertyDescriptor28.isHidden();
        boolean boolean39 = classInfo10.equals((java.lang.Object) propertyDescriptor28);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(strEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.Type[]" + "'", str24, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07810");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        generator51.setStyle((int) (byte) 1);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator60.getStrategy();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator60, 7, 6 };
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator51.setClasses(classArray66);
        generator51.setStyle(2);
        java.lang.Class<?> wildcardClass71 = generator51.getClass();
        boolean boolean72 = signature45.equals((java.lang.Object) wildcardClass71);
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        java.lang.String[] strArray75 = new java.lang.String[] {};
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type78, type79, type81 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray82);
        java.lang.Class<?> wildcardClass84 = typeArray82.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass84);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray85, true, true);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray75, methodArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method91 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass71, "java.beans.PropertyDescriptor[name=V(III)Lint;; values={<init>()V=Lorg/mockito/cglib/proxy/Mixin$Generator;}]", classArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=V(III)Lint;; values={<init>()V=Lorg/mockito/cglib/proxy/Mixin$Generator;}]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str73, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)I" + "'", str83, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(classArray90);
    }

    @Test
    public void test07811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07811");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.cglib.core.Signature signature45 = methodInfo44.getSignature();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator51.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator51.getNamingPolicy();
        generator51.setUseCache(true);
        java.lang.ClassLoader classLoader57 = null;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type60, type61, type63 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) typeArray64);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray64);
        generator51.setClasses(classArray68);
        boolean boolean70 = signature45.equals((java.lang.Object) classArray68);
        org.mockito.asm.Type type71 = signature45.getReturnType();
        java.lang.String str72 = signature45.getDescriptor();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type75, type76, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray79);
        java.lang.Class<?> wildcardClass81 = typeArray79.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.ClassInfo classInfo83 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.ClassInfo classInfo84 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass81);
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        boolean boolean90 = signature45.equals((java.lang.Object) wildcardClass81);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "int" + "'", str59, "int");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(III)I" + "'", str65, "(III)I");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "()V" + "'", str72, "()V");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(III)I" + "'", str80, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
        org.junit.Assert.assertNotNull(classInfo83);
        org.junit.Assert.assertNotNull(classInfo84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str86, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str89, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test07812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07812");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("int");
        boolean boolean22 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
    }

    @Test
    public void test07813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07813");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor", ")L(III)[Lorg/mockito/asm/Type");
        java.lang.String str3 = signature2.getName();
        java.lang.Object obj4 = null;
        boolean boolean5 = signature2.equals(obj4);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor" + "'", str3, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07814");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.asm.Type; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test07815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07815");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 1, (byte) 1, (byte) 10, (byte) -1 };
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        boolean boolean16 = generator13.getAttemptLoad();
        generator13.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        generator26.setClasses(classArray49);
        java.lang.ClassLoader classLoader53 = null;
        generator26.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = generator26.getClassLoader();
        generator13.setClassLoader(classLoader55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class57 = org.mockito.cglib.core.ReflectUtils.defineClass("", byteArray7, classLoader55);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 1, 1, 1, 10, -1]");
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classLoader55);
    }

    @Test
    public void test07816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07816");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        generator29.setStyle((int) (byte) 1);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator38, 7, 6 };
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator29.setClasses(classArray44);
        generator21.setClasses(classArray44);
        java.lang.ClassLoader classLoader48 = null;
        generator21.setClassLoader(classLoader48);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]", (java.lang.Object) generator21);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin51 = generator21.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
    }

    @Test
    public void test07817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07817");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = methodInfo46.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        org.mockito.asm.Type[] typeArray49 = classInfo48.getInterfaces();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(typeArray49);
    }

    @Test
    public void test07818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07818");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lint;", method1, method2);
        propertyDescriptor3.setConstrained(false);
        boolean boolean6 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07819");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(III)V");
        java.lang.String str12 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(III)V" + "'", str12, "(III)V");
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test07820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07820");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("(III)L(III)Lorg.mockito.asm.Type[];;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07821");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray44 = classInfo43.getInterfaces();
        java.lang.String str45 = classInfo43.toString();
        org.mockito.asm.Type[] typeArray46 = classInfo43.getInterfaces();
        org.mockito.asm.Type[] typeArray47 = classInfo43.getInterfaces();
        org.mockito.asm.Type[] typeArray48 = classInfo43.getInterfaces();
        org.mockito.asm.Type type49 = classInfo43.getSuperType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str45, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(type49);
    }

    @Test
    public void test07822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07822");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        int int46 = methodInfo45.getModifiers();
        java.lang.String str47 = methodInfo45.toString();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo45.getClassInfo();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        generator54.setUseCache(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator66, 7, 6 };
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray72);
        generator54.setClasses(classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator54.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator54.getNamingPolicy();
        boolean boolean79 = methodInfo45.equals((java.lang.Object) generator54);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator54.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07823");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator18.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray36);
        generator18.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator18.getStrategy();
        generator5.setStrategy(generatorStrategy41);
        boolean boolean43 = generator5.getAttemptLoad();
        boolean boolean44 = generator5.getUseCache();
        generator5.setUseCache(false);
        boolean boolean47 = generator5.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07824");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) ' ');
        int int48 = methodInfo47.getModifiers();
        org.mockito.asm.Type[] typeArray49 = methodInfo47.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertNotNull(typeArray49);
    }

    @Test
    public void test07825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07825");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray20);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray20);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray20);
        int int25 = type2.getDimensions();
        int int26 = type2.getSize();
        java.lang.String str27 = type2.getDescriptor();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        generator33.setStyle((int) (byte) 1);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator42, 7, 6 };
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator33.setClasses(classArray48);
        java.lang.Class<?> wildcardClass51 = generator33.getClass();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        boolean boolean59 = generator57.getUseCache();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type62, type63, type65 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray66);
        generator57.setDelegates((java.lang.Object[]) classArray68);
        java.lang.reflect.Constructor constructor70 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass51, classArray68);
        org.mockito.asm.Type[] typeArray71 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor70);
        org.mockito.asm.Type[] typeArray72 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor70);
        java.lang.String str73 = org.mockito.asm.Type.getConstructorDescriptor(constructor70);
        org.mockito.cglib.core.MethodInfo methodInfo74 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor70);
        java.lang.String str75 = org.mockito.asm.Type.getConstructorDescriptor(constructor70);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor70, (int) (short) 1);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor70, (int) (short) 1);
        org.mockito.asm.Type[] typeArray80 = methodInfo79.getExceptionTypes();
        org.mockito.asm.Type[] typeArray81 = methodInfo79.getExceptionTypes();
        org.mockito.cglib.core.Signature signature82 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.lang.Object; displayName=java.lang.Object; shortDescription=]", type2, typeArray81);
        org.mockito.asm.Type[] typeArray83 = signature82.getArgumentTypes();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(III)I" + "'", str10, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str23, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str24, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str27, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "int" + "'", str61, "int");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "int" + "'", str64, "int");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(III)I" + "'", str67, "(III)I");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(constructor70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "()V" + "'", str73, "()V");
        org.junit.Assert.assertNotNull(methodInfo74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "()V" + "'", str75, "()V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(typeArray83);
    }

    @Test
    public void test07826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07826");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(III)LIII)Lorg/mockito/asm/Type;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07827");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        java.lang.ClassLoader classLoader48 = null;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) typeArray55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type61, type62, type64 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray65);
        java.lang.Class<?> wildcardClass67 = typeArray65.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass67);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin58.newInstance((java.lang.Object[]) propertyDescriptorArray68);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray68, true, false);
        java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, (java.lang.Object[]) methodArray72);
        org.mockito.asm.Type[] typeArray74 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray75 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 1065);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(III)I" + "'", str66, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(methodInfo77);
    }

    @Test
    public void test07828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07828");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray44 = classInfo43.getInterfaces();
        java.lang.String str45 = classInfo43.toString();
        org.mockito.asm.Type[] typeArray46 = classInfo43.getInterfaces();
        org.mockito.asm.Type[] typeArray47 = classInfo43.getInterfaces();
        int int48 = classInfo43.getModifiers();
        org.mockito.asm.Type type49 = classInfo43.getSuperType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str45, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(type49);
    }

    @Test
    public void test07829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07829");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60, 10);
        java.lang.String str63 = methodInfo62.toString();
        org.mockito.cglib.core.Signature signature64 = methodInfo62.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<init>()V" + "'", str63, "<init>()V");
        org.junit.Assert.assertNotNull(signature64);
    }

    @Test
    public void test07830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07830");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass8 = generator5.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = type9.getClassName();
        int int11 = type9.getSize();
        int int12 = type9.getSize();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str10, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test07831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07831");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        boolean boolean12 = generator5.getAttemptLoad();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator26.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator18.getAttemptLoad();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator36.getNamingPolicy();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type41, type42, type44 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray45);
        generator36.setClasses(classArray47);
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray47);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray47);
        generator18.setClasses(classArray47);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray47);
        generator5.setClasses(classArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator5.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(116);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 116");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(namingPolicy55);
    }

    @Test
    public void test07832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07832");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(III)F");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray3, false, false);
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray3, false, true);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(methodArray9);
    }

    @Test
    public void test07833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07833");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lint;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07834");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("[Lorg/mockito/asm/Type;", "()V");
        java.lang.String str4 = signature3.getDescriptor();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type10 };
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        int int16 = type15.getSort();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor20.setReadMethod(method21);
        java.lang.String str23 = propertyDescriptor20.getName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type27, type28, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        propertyDescriptor20.setValue("I", (java.lang.Object) propertyDescriptorArray34);
        propertyDescriptor20.setHidden(false);
        boolean boolean38 = type15.equals((java.lang.Object) propertyDescriptor20);
        int int39 = type15.getDimensions();
        org.mockito.asm.Type type40 = type15.getElementType();
        boolean boolean41 = signature3.equals((java.lang.Object) type40);
        java.lang.String str42 = type40.getClassName();
        java.lang.String str43 = type40.getInternalName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type46, type47, type49 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray50);
        java.lang.Class<?> wildcardClass52 = typeArray50.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str55 = type54.toString();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type58, type59, type61 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray62.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        java.lang.String str67 = classInfo66.toString();
        org.mockito.asm.Type type68 = classInfo66.getSuperType();
        org.mockito.asm.Type[] typeArray69 = classInfo66.getInterfaces();
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray69);
        org.mockito.cglib.core.Signature signature71 = new org.mockito.cglib.core.Signature("Lint;", type40, typeArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) typeArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "()V" + "'", str4, "()V");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(III)I" + "'", str12, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(III)I" + "'", str32, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.mockito.asm.Type" + "'", str42, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/Type" + "'", str43, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "int" + "'", str45, "int");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(III)I" + "'", str51, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str55, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(III)I" + "'", str63, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.asm.Type[]" + "'", str67, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str70, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07835");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        boolean boolean14 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method15 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(method15);
    }

    @Test
    public void test07836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07836");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator28.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy42);
        generator5.setStyle((int) (short) 0);
        generator5.setAttemptLoad(true);
        boolean boolean48 = generator5.getAttemptLoad();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator5.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test07837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07837");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        boolean boolean14 = generator5.getUseCache();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type19, type20, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray34);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray34);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        generator5.setClasses(classArray39);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)I" + "'", str24, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str37, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str38, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test07838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07838");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.Object obj45 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, false, true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray53);
    }

    @Test
    public void test07839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07839");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
    }

    @Test
    public void test07840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07840");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setDisplayName("[Lorg/mockito/asm/Type;");
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        boolean boolean27 = generator25.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(false);
        generator32.setUseCache(false);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        boolean boolean44 = generator42.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        generator42.setUseCache(false);
        generator42.setAttemptLoad(false);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        generator56.setStyle((int) (byte) 1);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("int", method61, method62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor63.setValue("", (java.lang.Object) generator65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator65.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy67);
        generator42.setNamingPolicy(namingPolicy67);
        generator32.setNamingPolicy(namingPolicy67);
        generator25.setNamingPolicy(namingPolicy67);
        java.beans.PropertyEditor propertyEditor72 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator25);
        java.lang.String str73 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNull(propertyEditor72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str73, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07841");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(III)I; displayName=()L<init>()V;]", "L)L(III)[Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(III)I; displayName=()L<init>()V;]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07842");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str13 = type12.getDescriptor();
        int int14 = type12.getSize();
        int int15 = type12.getDimensions();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo26.getInterfaces();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type32, type33, type35 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray36.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        int int41 = type39.getOpcode(1);
        java.lang.String str42 = type39.getInternalName();
        boolean boolean43 = classInfo26.equals((java.lang.Object) str42);
        org.mockito.asm.Type type44 = classInfo26.getSuperType();
        org.mockito.asm.Type[] typeArray45 = classInfo26.getInterfaces();
        org.mockito.asm.Type[] typeArray46 = classInfo26.getInterfaces();
        org.mockito.asm.Type type47 = classInfo26.getSuperType();
        java.lang.String str48 = classInfo26.toString();
        org.mockito.asm.Type[] typeArray49 = classInfo26.getInterfaces();
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray49);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str13, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.asm.Type[]" + "'", str27, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(III)I" + "'", str37, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str42, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.mockito.asm.Type[]" + "'", str48, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str50, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07843");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07844");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        generator14.setStyle((int) (byte) 1);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.Object[] objArray28 = new java.lang.Object[] { generator23, 7, 6 };
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator14.setClasses(classArray29);
        generator6.setClasses(classArray29);
        java.lang.ClassLoader classLoader33 = null;
        generator6.setClassLoader(classLoader33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator40.getNamingPolicy();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray49);
        generator40.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator40.getNamingPolicy();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        generator59.setStyle((int) (byte) 1);
        generator59.setUseCache(true);
        boolean boolean65 = generator59.getUseCache();
        generator59.setUseCache(false);
        boolean boolean68 = generator59.getUseCache();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type73, type74, type76 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray77);
        java.lang.Class<?> wildcardClass79 = typeArray77.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray88 = new org.mockito.asm.Type[] { type84, type85, type87 };
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type82, typeArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray88);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray88);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray88);
        java.lang.Class[] classArray93 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray88);
        java.lang.String[] strArray94 = org.mockito.cglib.core.ReflectUtils.getNames(classArray93);
        generator59.setClasses(classArray93);
        java.lang.ClassLoader classLoader96 = generator59.getClassLoader();
        generator40.setClassLoader(classLoader96);
        generator6.setClassLoader(classLoader96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method99 = org.mockito.cglib.core.ReflectUtils.findMethod("()I", classLoader96);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(III)I" + "'", str50, "(III)I");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "int" + "'", str75, "int");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(III)I" + "'", str78, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "int" + "'", str83, "int");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "int" + "'", str86, "int");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(III)I" + "'", str89, "(III)I");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str91, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str92, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test07845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07845");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 100);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str48 = signature47.getDescriptor();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
    }

    @Test
    public void test07846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07846");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Z");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07847");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator55.getNamingPolicy();
        generator55.setUseCache(true);
        boolean boolean60 = methodInfo48.equals((java.lang.Object) true);
        org.mockito.cglib.core.ClassInfo classInfo61 = methodInfo48.getClassInfo();
        org.mockito.asm.Type[] typeArray62 = classInfo61.getInterfaces();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(typeArray62);
    }

    @Test
    public void test07848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07848");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java/lang/Object", method1, method2);
        propertyDescriptor3.setShortDescription("java/util/Hashtable$Enumerator");
    }

    @Test
    public void test07849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07849");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        boolean boolean16 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(false);
        generator21.setUseCache(false);
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        generator31.setStyle((int) (byte) 1);
        generator31.setUseCache(true);
        boolean boolean37 = generator31.getUseCache();
        generator31.setUseCache(false);
        boolean boolean40 = generator31.getUseCache();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        generator54.setStyle((int) (byte) 1);
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("int", method59, method60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor61.setValue("", (java.lang.Object) generator63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        java.lang.Object[] objArray68 = new java.lang.Object[] { generator63, 7, 6 };
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator54.setClasses(classArray69);
        generator46.setClasses(classArray69);
        java.lang.ClassLoader classLoader73 = null;
        generator46.setClassLoader(classLoader73);
        java.lang.ClassLoader classLoader75 = generator46.getClassLoader();
        generator31.setClassLoader(classLoader75);
        generator21.setClassLoader(classLoader75);
        generator21.setStyle((int) (short) 1);
        java.beans.PropertyEditor propertyEditor80 = propertyDescriptor3.createPropertyEditor((java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNull(propertyEditor80);
    }

    @Test
    public void test07850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07850");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method29 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str28, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test07851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07851");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10 };
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        generator9.setStyle((int) (byte) 1);
        generator9.setUseCache(true);
        boolean boolean15 = generator9.getUseCache();
        generator9.setUseCache(false);
        boolean boolean18 = generator9.getUseCache();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        generator32.setStyle((int) (byte) 1);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator41, 7, 6 };
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator32.setClasses(classArray47);
        generator24.setClasses(classArray47);
        java.lang.ClassLoader classLoader51 = null;
        generator24.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = generator24.getClassLoader();
        generator9.setClassLoader(classLoader53);
        generator9.setAttemptLoad(false);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("int", method58, method59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor60.setValue("", (java.lang.Object) generator62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator62, 7, 6 };
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray67);
        generator9.setClasses(classArray70);
        java.lang.ClassLoader classLoader72 = generator9.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class73 = org.mockito.cglib.core.ReflectUtils.defineClass("<init>(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;", byteArray3, classLoader72);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test07852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07852");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        org.mockito.asm.Type type14 = classInfo12.getType();
        org.mockito.asm.Type type15 = classInfo12.getType();
        java.lang.String str16 = type15.getDescriptor();
        int int18 = type15.getOpcode(12);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str16, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
    }

    @Test
    public void test07853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07853");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 0);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        propertyDescriptor52.setExpert(false);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type58, type59, type61 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray62);
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        java.lang.String[] strArray66 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        propertyDescriptor52.setValue("org/mockito/cglib/proxy/Mixin$Generator", (java.lang.Object) classArray64);
        java.lang.Object obj68 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, (java.lang.Object[]) classArray64);
        org.mockito.cglib.core.Signature signature69 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray70 = signature69.getArgumentTypes();
        org.mockito.asm.Type type71 = signature69.getReturnType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(III)I" + "'", str63, "(III)I");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(signature69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(type71);
    }

    @Test
    public void test07854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07854");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/lang/Object;", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ljava/lang/Object;" + "'", str4, "Ljava/lang/Object;");
        org.junit.Assert.assertNull(method5);
    }

    @Test
    public void test07855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07855");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor15.getClass();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        generator40.setStyle((int) (byte) 1);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.Object[] objArray54 = new java.lang.Object[] { generator49, 7, 6 };
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator40.setClasses(classArray55);
        java.lang.Class<?> wildcardClass58 = generator40.getClass();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("int", method60, method61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor62.setValue("", (java.lang.Object) generator64);
        boolean boolean66 = generator64.getUseCache();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type69, type70, type72 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray73);
        generator64.setDelegates((java.lang.Object[]) classArray75);
        java.lang.reflect.Constructor constructor77 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass58, classArray75);
        java.lang.String str78 = org.mockito.asm.Type.getConstructorDescriptor(constructor77);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor77, 3);
        org.mockito.cglib.core.MethodInfo methodInfo81 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor77);
        org.mockito.asm.Type[] typeArray82 = methodInfo81.getExceptionTypes();
        java.lang.Class[] classArray83 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Object[] objArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass34, classArray83, objArray85);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "int" + "'", str68, "int");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "int" + "'", str71, "int");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(III)I" + "'", str74, "(III)I");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(constructor77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "()V" + "'", str78, "()V");
        org.junit.Assert.assertNotNull(methodInfo80);
        org.junit.Assert.assertNotNull(methodInfo81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
    }

    @Test
    public void test07856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07856");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 100);
        org.mockito.asm.Type[] typeArray47 = methodInfo46.getExceptionTypes();
        org.mockito.cglib.core.Signature signature48 = methodInfo46.getSignature();
        java.lang.String str49 = signature48.getName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<init>" + "'", str49, "<init>");
    }

    @Test
    public void test07857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07857");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator5, 7, 6 };
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator26.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator18.getAttemptLoad();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator36.getNamingPolicy();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type41, type42, type44 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray45);
        generator36.setClasses(classArray47);
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray47);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray47);
        generator18.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin12.newInstance((java.lang.Object[]) classArray47);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, true);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin52.newInstance((java.lang.Object[]) propertyDescriptorArray62);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)I" + "'", str60, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(methodArray69);
    }

    @Test
    public void test07858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07858");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("V(III)Lint;", "()I");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'V(III)Lint;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07859");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        generator5.setStyle(2);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor28.setReadMethod(method32);
        propertyDescriptor28.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration36 = propertyDescriptor28.attributeNames();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        generator42.setStyle((int) (byte) 1);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator51, 7, 6 };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator42.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor61 = propertyDescriptor28.createPropertyEditor((java.lang.Object) namingPolicy60);
        generator5.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator5.getStrategy();
        generator5.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(strEnumeration36);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNull(propertyEditor61);
        org.junit.Assert.assertNotNull(generatorStrategy63);
    }

    @Test
    public void test07860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07860");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        generator19.setUseCache(true);
        boolean boolean25 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        generator41.setStyle((int) (byte) 1);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator50, 7, 6 };
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator41.setClasses(classArray56);
        generator33.setClasses(classArray56);
        java.lang.ClassLoader classLoader60 = null;
        generator33.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = generator33.getClassLoader();
        generator5.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = generator5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator5.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin66 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
    }

    @Test
    public void test07861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07861");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str13, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
    }

    @Test
    public void test07862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07862");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        boolean boolean14 = generator5.getUseCache();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        generator28.setStyle((int) (byte) 1);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator37, 7, 6 };
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator28.setClasses(classArray43);
        generator20.setClasses(classArray43);
        java.lang.ClassLoader classLoader47 = null;
        generator20.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = generator20.getClassLoader();
        generator5.setClassLoader(classLoader49);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator5.getStrategy();
        java.lang.ClassLoader classLoader54 = generator5.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator5.getStrategy();
        generator5.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
    }

    @Test
    public void test07863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07863");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.String str10 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("org.mockito.asm.Type");
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("(III)Ljava/lang/Object;");
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test07864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07864");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 32);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 18);
        org.mockito.cglib.core.MethodInfo methodInfo56 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 33);
        org.mockito.cglib.core.Signature signature57 = methodInfo56.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(methodInfo56);
        org.junit.Assert.assertNotNull(signature57);
    }

    @Test
    public void test07865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07865");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test07866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07866");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setName("V");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
    }

    @Test
    public void test07867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07867");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=org/mockito/cglib/proxy/Mixin$Generator; values={hi!=F}; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07868");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor6.setReadMethod(method7);
        propertyDescriptor6.setExpert(false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor6.setValue("hi!", (java.lang.Object) type12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor6.setWriteMethod(method14);
        boolean boolean16 = propertyDescriptor6.isHidden();
        boolean boolean17 = propertyDescriptor6.isExpert();
        boolean boolean18 = signature2.equals((java.lang.Object) boolean17);
        java.lang.Object obj19 = null;
        boolean boolean20 = signature2.equals(obj19);
        java.lang.String str21 = signature2.getDescriptor();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        boolean boolean29 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator45.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator37.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy49);
        generator27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator27.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator27.getNamingPolicy();
        boolean boolean55 = signature2.equals((java.lang.Object) namingPolicy54);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07869");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(III)L(III)Lorg.mockito.asm.Type[];;");
        java.lang.String str2 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(III)Lorg.mockito.asm.Type[]" + "'", str2, "(III)Lorg.mockito.asm.Type[]");
    }

    @Test
    public void test07870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07870");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/proxy/Mixin$Generator;", "(III)I");
        java.lang.String str3 = signature2.getName();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        generator9.setStyle((int) (byte) 1);
        generator9.setUseCache(true);
        boolean boolean15 = generator9.getUseCache();
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator24, 7, 6 };
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("int", method35, method36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor37.setValue("", (java.lang.Object) generator39);
        generator39.setStyle((int) (byte) 1);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator48.getNamingPolicy();
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator48.setClassLoader(classLoader53);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator60.getStrategy();
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("int", method64, method65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor66.setValue("", (java.lang.Object) generator68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        generator60.setStrategy(generatorStrategy70);
        generator48.setStrategy(generatorStrategy70);
        generator39.setStrategy(generatorStrategy70);
        generator9.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator9.getStrategy();
        boolean boolean77 = signature2.equals((java.lang.Object) generatorStrategy76);
        java.lang.String str78 = signature2.toString();
        org.mockito.asm.Type type79 = signature2.getReturnType();
        java.lang.String str80 = type79.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str3, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;(III)I" + "'", str78, "Lorg/mockito/cglib/proxy/Mixin$Generator;(III)I");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "I" + "'", str80, "I");
    }

    @Test
    public void test07871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07871");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("<init>(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;", "Ljava/lang/Cloneable");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '<init>(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07872");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        generator14.setStyle((int) (byte) 1);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.Object[] objArray28 = new java.lang.Object[] { generator23, 7, 6 };
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator14.setClasses(classArray29);
        generator6.setClasses(classArray29);
        java.lang.ClassLoader classLoader33 = null;
        generator6.setClassLoader(classLoader33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator40.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator40.getNamingPolicy();
        generator40.setUseCache(true);
        java.lang.ClassLoader classLoader46 = null;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) typeArray53);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray53);
        generator40.setClasses(classArray57);
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("int", method60, method61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor62.setValue("", (java.lang.Object) generator64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator64.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator64.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy67);
        generator6.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader70 = generator6.getClassLoader();
        java.lang.reflect.Method method72 = null;
        java.lang.reflect.Method method73 = null;
        java.beans.PropertyDescriptor propertyDescriptor74 = new java.beans.PropertyDescriptor("int", method72, method73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor74.setValue("", (java.lang.Object) generator76);
        boolean boolean78 = generator76.getUseCache();
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        generator76.setUseCache(false);
        generator76.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator76.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy85);
        java.lang.ClassLoader classLoader87 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method88 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(III)I; expert]", classLoader87);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader87);
    }

    @Test
    public void test07873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07873");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        int int22 = type21.getSort();
        int int23 = type21.getDimensions();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type26, type27, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray41);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray41);
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray41);
        java.lang.reflect.Method method47 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(III)I" + "'", str31, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str44, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str45, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNull(method47);
    }

    @Test
    public void test07874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07874");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) typeArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(classArray51);
    }

    @Test
    public void test07875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07875");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        int int47 = methodInfo46.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        org.mockito.asm.Type type49 = classInfo48.getType();
        java.lang.String str50 = type49.getInternalName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str50, "org/mockito/cglib/proxy/Mixin$Generator");
    }

    @Test
    public void test07876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07876");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("boolean", "java.beans.PropertyDescriptor[name=(III)I; expert]");
    }

    @Test
    public void test07877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07877");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=int; shortDescription=]");
        int int2 = type1.getSort();
        int int4 = type1.getOpcode(52);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 56 + "'", int4 == 56);
    }

    @Test
    public void test07878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07878");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.Object obj24 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str25, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classArray28);
    }

    @Test
    public void test07879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07879");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("int");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getClassName();
        int int6 = type1.getOpcode(100);
        java.lang.String str7 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lint;" + "'", str7, "Lint;");
    }

    @Test
    public void test07880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07880");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setShortDescription("Lorg/mockito/cglib/core/ReflectUtils$3;");
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        propertyDescriptor3.setShortDescription("()Lorg/mockito/asm/Type;");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str11, "()Lorg/mockito/asm/Type;");
    }

    @Test
    public void test07881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07881");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray33 = classInfo31.getInterfaces();
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray33);
        org.mockito.asm.Type type35 = type10.getElementType();
        java.lang.String str36 = type10.getInternalName();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        generator42.setStyle((int) (byte) 1);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator51, 7, 6 };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        java.lang.Class<?> wildcardClass60 = generator42.getClass();
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        boolean boolean68 = generator66.getUseCache();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type71, type72, type74 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray75);
        generator66.setDelegates((java.lang.Object[]) classArray77);
        java.lang.reflect.Constructor constructor79 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass60, classArray77);
        org.mockito.asm.Type[] typeArray80 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor79);
        org.mockito.asm.Type[] typeArray81 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor79);
        java.lang.String str82 = org.mockito.asm.Type.getConstructorDescriptor(constructor79);
        org.mockito.cglib.core.MethodInfo methodInfo83 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor79);
        java.lang.String str84 = org.mockito.asm.Type.getConstructorDescriptor(constructor79);
        org.mockito.cglib.core.MethodInfo methodInfo85 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor79);
        org.mockito.cglib.core.MethodInfo methodInfo86 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor79);
        org.mockito.asm.Type[] typeArray87 = methodInfo86.getExceptionTypes();
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray87);
        int int89 = type10.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str20, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str34, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str36, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "int" + "'", str70, "int");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "int" + "'", str73, "int");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(III)I" + "'", str76, "(III)I");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(constructor79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "()V" + "'", str82, "()V");
        org.junit.Assert.assertNotNull(methodInfo83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "()V" + "'", str84, "()V");
        org.junit.Assert.assertNotNull(methodInfo85);
        org.junit.Assert.assertNotNull(methodInfo86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "()[Lorg/mockito/asm/Type;" + "'", str88, "()[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test07882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07882");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        java.lang.Class<?> wildcardClass59 = generator53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type62 = classInfo61.getSuperType();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getType();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        generator70.setStyle((int) (byte) 1);
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("int", method75, method76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor77.setValue("", (java.lang.Object) generator79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator79, 7, 6 };
        java.lang.Class[] classArray85 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        generator70.setClasses(classArray85);
        java.lang.Class<?> wildcardClass88 = generator70.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray91 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass88);
        boolean boolean92 = classInfo61.equals((java.lang.Object) propertyDescriptorArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray91);
        java.lang.reflect.Method[] methodArray96 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray91, false, true);
        java.lang.Class<?> wildcardClass97 = propertyDescriptorArray91.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method98 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str89, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str90, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(propertyDescriptorArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(methodArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test07883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07883");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(true);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(false);
        boolean boolean15 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07884");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        java.lang.String str20 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("boolean");
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
    }

    @Test
    public void test07885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07885");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type type29 = classInfo10.getType();
        java.lang.String str30 = classInfo10.toString();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("va/lang/Object", "()I");
        org.mockito.asm.Type[] typeArray34 = signature33.getArgumentTypes();
        boolean boolean35 = classInfo10.equals((java.lang.Object) signature33);
        org.mockito.asm.Type type36 = classInfo10.getType();
        int int37 = classInfo10.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type[]" + "'", str30, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1041 + "'", int37 == 1041);
    }

    @Test
    public void test07886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07886");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=int; preferred; values={hi!=F}]", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
    }

    @Test
    public void test07887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07887");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("va/lang/Object");
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        generator11.setStyle((int) (byte) 1);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator20, 7, 6 };
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator11.setClasses(classArray26);
        generator11.setStyle(2);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        java.lang.reflect.Method method38 = null;
        propertyDescriptor34.setReadMethod(method38);
        propertyDescriptor34.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration42 = propertyDescriptor34.attributeNames();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        generator48.setStyle((int) (byte) 1);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator57, 7, 6 };
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator48.setClasses(classArray63);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator48.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor67 = propertyDescriptor34.createPropertyEditor((java.lang.Object) namingPolicy66);
        generator11.setNamingPolicy(namingPolicy66);
        java.beans.PropertyEditor propertyEditor69 = propertyDescriptor3.createPropertyEditor((java.lang.Object) namingPolicy66);
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method72 = propertyDescriptor3.getReadMethod();
        boolean boolean73 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(strEnumeration42);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNull(propertyEditor67);
        org.junit.Assert.assertNull(propertyEditor69);
        org.junit.Assert.assertNull(method72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test07888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07888");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        java.lang.Class<?> wildcardClass59 = generator53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type62 = classInfo61.getSuperType();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getType();
        int int65 = classInfo61.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
    }

    @Test
    public void test07889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07889");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        generator5.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader14 = generator5.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test07890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07890");
        java.lang.String[] strArray0 = null;
        java.lang.reflect.Method[] methodArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray2 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07891");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
    }

    @Test
    public void test07892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07892");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.getName();
        java.lang.String str7 = signature2.getName();
        java.lang.String str8 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "intint" + "'", str3, "intint");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "intint" + "'", str4, "intint");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "intint" + "'", str8, "intint");
    }

    @Test
    public void test07893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07893");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        java.lang.String str11 = propertyDescriptor3.getName();
        java.lang.String str12 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
    }

    @Test
    public void test07894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07894");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo61.getClassInfo();
        java.lang.String str63 = methodInfo61.toString();
        org.mockito.asm.Type[] typeArray64 = methodInfo61.getExceptionTypes();
        int int65 = methodInfo61.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<init>()V" + "'", str63, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test07895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07895");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=int; shortDescription=]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07896");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor13.setReadMethod(method17);
        boolean boolean19 = propertyDescriptor13.isHidden();
        propertyDescriptor13.setExpert(false);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor13.setWriteMethod(method22);
        propertyDescriptor13.setDisplayName("[Lorg/mockito/asm/Type;");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor13.getPropertyType();
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass26);
        propertyDescriptor3.setName("");
        java.lang.String str30 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method33 = null;
        propertyDescriptor3.setWriteMethod(method33);
        java.lang.reflect.Method method35 = null;
        propertyDescriptor3.setWriteMethod(method35);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test07897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07897");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor13.setReadMethod(method17);
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration20 = propertyDescriptor13.attributeNames();
        java.lang.String str21 = propertyDescriptor13.getDisplayName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type24, type25, type27 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray28.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass30);
        java.beans.PropertyEditor propertyEditor32 = propertyDescriptor13.createPropertyEditor((java.lang.Object) propertyDescriptorArray31);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray35);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        generator43.setStyle((int) (byte) 1);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator52, 7, 6 };
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator43.setClasses(classArray58);
        java.lang.Class<?> wildcardClass61 = generator43.getClass();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("int", method63, method64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor65.setValue("", (java.lang.Object) generator67);
        boolean boolean69 = generator67.getUseCache();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type72, type73, type75 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray76);
        generator67.setDelegates((java.lang.Object[]) classArray78);
        java.lang.reflect.Constructor constructor80 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass61, classArray78);
        org.mockito.asm.Type[] typeArray81 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor80);
        org.mockito.asm.Type[] typeArray82 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor80);
        org.mockito.asm.Type[] typeArray83 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor80);
        java.lang.Object obj84 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7, classArray37, (java.lang.Object[]) typeArray83);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strEnumeration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(III)I" + "'", str29, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNull(propertyEditor32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "int" + "'", str71, "int");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(III)I" + "'", str77, "(III)I");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(constructor80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(obj84);
    }

    @Test
    public void test07898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07898");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        boolean boolean13 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07899");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setDisplayName("(III)F");
        java.util.Enumeration<java.lang.String> strEnumeration20 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(strEnumeration20);
    }

    @Test
    public void test07900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07900");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType("I");
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type20);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test07901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07901");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        java.lang.String str5 = signature2.getDescriptor();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        java.lang.Object obj11 = propertyDescriptor9.getValue("va/lang/Object");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyEditorClass();
        propertyDescriptor9.setConstrained(true);
        java.lang.String str15 = propertyDescriptor9.getDisplayName();
        boolean boolean16 = propertyDescriptor9.isExpert();
        boolean boolean17 = signature2.equals((java.lang.Object) propertyDescriptor9);
        boolean boolean18 = propertyDescriptor9.isPreferred();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(III)I" + "'", str5, "(III)I");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07902");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lntint(III)Lorg.mockito.asm.Type[];", method1, method2);
        propertyDescriptor3.setName("");
        propertyDescriptor3.setBound(false);
    }

    @Test
    public void test07903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07903");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lava/lang/Cloneable;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07904");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        boolean boolean10 = propertyDescriptor3.isPreferred();
        java.lang.String str11 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(III)I" + "'", str11, "(III)I");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test07905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07905");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        generator11.setStyle((int) (byte) 1);
        generator11.setUseCache(true);
        boolean boolean17 = generator11.getUseCache();
        generator11.setUseCache(false);
        boolean boolean20 = generator11.getUseCache();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type25, type26, type28 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray40);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray40);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray40);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray40);
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        generator11.setClasses(classArray45);
        java.lang.ClassLoader classLoader48 = generator11.getClassLoader();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass57);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass57);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type62 = classInfo61.getSuperType();
        org.mockito.asm.Type type63 = classInfo61.getType();
        org.mockito.asm.Type[] typeArray64 = classInfo61.getInterfaces();
        org.mockito.asm.Type[] typeArray65 = classInfo61.getInterfaces();
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) typeArray65);
        generator1.setClassLoader(classLoader48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method68 = org.mockito.cglib.core.ReflectUtils.findMethod("", classLoader48);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(III)I" + "'", str30, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str43, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str44, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test07906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07906");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        java.lang.String str47 = signature46.getName();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        generator53.setStyle((int) (byte) 1);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("int", method58, method59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor60.setValue("", (java.lang.Object) generator62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator62, 7, 6 };
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator53.setClasses(classArray68);
        java.lang.Class<?> wildcardClass71 = generator53.getClass();
        java.lang.reflect.Method method73 = null;
        java.lang.reflect.Method method74 = null;
        java.beans.PropertyDescriptor propertyDescriptor75 = new java.beans.PropertyDescriptor("int", method73, method74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor75.setValue("", (java.lang.Object) generator77);
        boolean boolean79 = generator77.getUseCache();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type82, type83, type85 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray86);
        generator77.setDelegates((java.lang.Object[]) classArray88);
        java.lang.reflect.Constructor constructor90 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass71, classArray88);
        java.lang.String str91 = org.mockito.asm.Type.getConstructorDescriptor(constructor90);
        org.mockito.cglib.core.MethodInfo methodInfo92 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90);
        org.mockito.asm.Type[] typeArray93 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor90);
        org.mockito.cglib.core.MethodInfo methodInfo94 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90);
        org.mockito.cglib.core.ClassInfo classInfo95 = methodInfo94.getClassInfo();
        boolean boolean96 = signature46.equals((java.lang.Object) classInfo95);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>" + "'", str47, "<init>");
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "int" + "'", str81, "int");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "int" + "'", str84, "int");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(III)I" + "'", str87, "(III)I");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(constructor90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "()V" + "'", str91, "()V");
        org.junit.Assert.assertNotNull(methodInfo92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertNotNull(methodInfo94);
        org.junit.Assert.assertNotNull(classInfo95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07907");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=V(III)Lint;; shortDescription=java.beans.PropertyDescriptor[name=(III)Lorg/mockito/asm/Type;; shortDescription=]; preferred; expert; constrained]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07908");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 6);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 11);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        java.lang.String str52 = methodInfo51.toString();
        org.mockito.asm.Type[] typeArray53 = methodInfo51.getExceptionTypes();
        java.lang.String str54 = methodInfo51.toString();
        org.mockito.cglib.core.ClassInfo classInfo55 = methodInfo51.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>()V" + "'", str52, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>()V" + "'", str54, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo55);
    }

    @Test
    public void test07909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07909");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = type12.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type[]" + "'", str13, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test07910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07910");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        propertyDescriptor3.setDisplayName("()V");
        java.lang.Object obj15 = propertyDescriptor3.getValue("java/util/Collections$EmptyEnumeration");
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "()V" + "'", str18, "()V");
    }

    @Test
    public void test07911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07911");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        java.lang.String str2 = type1.getClassName();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        boolean boolean7 = propertyDescriptor6.isExpert();
        propertyDescriptor6.setConstrained(true);
        propertyDescriptor6.setName("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        boolean boolean12 = type1.equals((java.lang.Object) propertyDescriptor6);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor6.getPropertyType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str2, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test07912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07912");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(III)V", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
    }

    @Test
    public void test07913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07913");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator5.getNamingPolicy();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type25, type26, type28 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray29);
        generator20.setClasses(classArray31);
        generator20.setAttemptLoad(false);
        boolean boolean35 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator20.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(III)I" + "'", str30, "(III)I");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test07914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07914");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.Object obj30 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str28, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test07915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07915");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        java.lang.ClassLoader classLoader32 = null;
        generator5.setClassLoader(classLoader32);
        generator5.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(1061);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 1061");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
    }

    @Test
    public void test07916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07916");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass2);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test07917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07917");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getAttemptLoad();
        generator5.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        generator26.setStyle((int) (byte) 1);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator35, 7, 6 };
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator26.setClasses(classArray41);
        generator18.setClasses(classArray41);
        java.lang.ClassLoader classLoader45 = null;
        generator18.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = generator18.getClassLoader();
        generator5.setClassLoader(classLoader47);
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test07918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07918");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 2);
        org.mockito.asm.Type[] typeArray52 = methodInfo51.getExceptionTypes();
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(classArray53);
    }

    @Test
    public void test07919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07919");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
    }

    @Test
    public void test07920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07920");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        java.lang.Object[] objArray46 = null;
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray46);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 9);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature53 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(signature53);
    }

    @Test
    public void test07921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07921");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray33 = classInfo31.getInterfaces();
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray33);
        java.lang.String str35 = type10.toString();
        java.lang.String str36 = type10.getDescriptor();
        java.lang.String str37 = type10.getInternalName();
        java.lang.Class<?> wildcardClass38 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str20, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str34, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str35, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str36, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str37, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(classArray40);
    }

    @Test
    public void test07922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07922");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo10.getInterfaces();
        org.mockito.asm.Type type30 = classInfo10.getType();
        org.mockito.asm.Type[] typeArray31 = classInfo10.getInterfaces();
        org.mockito.asm.Type type32 = classInfo10.getSuperType();
        java.lang.String str33 = type32.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.lang.Object" + "'", str33, "java.lang.Object");
    }

    @Test
    public void test07923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07923");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.Object obj30 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method31 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str26, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str27, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test07924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07924");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        generator14.setStyle((int) (byte) 1);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.Object[] objArray28 = new java.lang.Object[] { generator23, 7, 6 };
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator14.setClasses(classArray29);
        generator6.setClasses(classArray29);
        java.lang.ClassLoader classLoader33 = null;
        generator6.setClassLoader(classLoader33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator40.getNamingPolicy();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray49);
        generator40.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator40.getNamingPolicy();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        generator59.setStyle((int) (byte) 1);
        generator59.setUseCache(true);
        boolean boolean65 = generator59.getUseCache();
        generator59.setUseCache(false);
        boolean boolean68 = generator59.getUseCache();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type73, type74, type76 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray77);
        java.lang.Class<?> wildcardClass79 = typeArray77.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray88 = new org.mockito.asm.Type[] { type84, type85, type87 };
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type82, typeArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray88);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray88);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray88);
        java.lang.Class[] classArray93 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray88);
        java.lang.String[] strArray94 = org.mockito.cglib.core.ReflectUtils.getNames(classArray93);
        generator59.setClasses(classArray93);
        java.lang.ClassLoader classLoader96 = generator59.getClassLoader();
        generator40.setClassLoader(classLoader96);
        generator6.setClassLoader(classLoader96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor99 = org.mockito.cglib.core.ReflectUtils.findConstructor("F", classLoader96);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(III)I" + "'", str50, "(III)I");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "int" + "'", str75, "int");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(III)I" + "'", str78, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "int" + "'", str83, "int");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "int" + "'", str86, "int");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(III)I" + "'", str89, "(III)I");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str91, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str92, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test07925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07925");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type15 = classInfo14.getType();
        org.mockito.asm.Type[] typeArray16 = classInfo14.getInterfaces();
        int int17 = classInfo14.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str13, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1041 + "'", int17 == 1041);
    }

    @Test
    public void test07926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07926");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type8, type9, type11 };
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.String str17 = classInfo16.toString();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo16.getInterfaces();
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo16);
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("(III)Ljava/lang/Object;");
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method25 = null;
        propertyDescriptor3.setReadMethod(method25);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(III)I" + "'", str13, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type[]" + "'", str17, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)Ljava/lang/Object;" + "'", str24, "(III)Ljava/lang/Object;");
    }

    @Test
    public void test07927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07927");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("()V");
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(III)I; expert]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test07928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07928");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator15, 7, 6 };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator6.setClasses(classArray21);
        java.lang.Class<?> wildcardClass24 = generator6.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        generator33.setStyle((int) (byte) 1);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator42, 7, 6 };
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator33.setClasses(classArray48);
        java.lang.Class<?> wildcardClass51 = generator33.getClass();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        boolean boolean59 = generator57.getUseCache();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type62, type63, type65 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray66);
        generator57.setDelegates((java.lang.Object[]) classArray68);
        java.lang.reflect.Constructor constructor70 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass51, classArray68);
        java.lang.String str71 = org.mockito.asm.Type.getConstructorDescriptor(constructor70);
        org.mockito.cglib.core.Signature signature72 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor70);
        org.mockito.asm.Type[] typeArray73 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor70);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor70, 52);
        org.mockito.asm.Type[] typeArray76 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor70);
        org.mockito.asm.Type[] typeArray77 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor70);
        org.mockito.cglib.core.Signature signature78 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=int; values={hi!=F}]", type27, typeArray77);
        java.lang.String str79 = signature78.toString();
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str25, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "int" + "'", str61, "int");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "int" + "'", str64, "int");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(III)I" + "'", str67, "(III)I");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(constructor70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "()V" + "'", str71, "()V");
        org.junit.Assert.assertNotNull(signature72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.beans.PropertyDescriptor[name=int; values={hi!=F}]()Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str79, "java.beans.PropertyDescriptor[name=int; values={hi!=F}]()Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test07929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07929");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type29 = classInfo28.getSuperType();
        int int30 = type29.getSort();
        java.lang.String str31 = type29.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/cglib/core/AbstractClassGenerator;" + "'", str31, "Lorg/mockito/cglib/core/AbstractClassGenerator;");
    }

    @Test
    public void test07930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07930");
        org.mockito.asm.Type type0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator15, 7, 6 };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator6.setClasses(classArray21);
        java.lang.Class<?> wildcardClass24 = generator6.getClass();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        boolean boolean32 = generator30.getUseCache();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type35, type36, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray39);
        generator30.setDelegates((java.lang.Object[]) classArray41);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass24, classArray41);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)I" + "'", str40, "(III)I");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test07931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07931");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(III)I]", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.beans.PropertyDescriptor[name=(III)I]" + "'", str8, "java.beans.PropertyDescriptor[name=(III)I]");
    }

    @Test
    public void test07932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07932");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        int int59 = methodInfo45.getModifiers();
        org.mockito.asm.Type[] typeArray60 = methodInfo45.getExceptionTypes();
        java.lang.String str61 = methodInfo45.toString();
        boolean boolean63 = methodInfo45.equals((java.lang.Object) "Z");
        org.mockito.cglib.core.Signature signature64 = methodInfo45.getSignature();
        java.lang.Class<?> wildcardClass65 = signature64.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass65);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<init>()V" + "'", str61, "<init>()V");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test07933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07933");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type65 = classInfo64.getSuperType();
        java.lang.String str66 = type65.toString();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type69, type70, type72 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray73);
        java.lang.Class<?> wildcardClass75 = typeArray73.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass75);
        org.mockito.cglib.core.ClassInfo classInfo77 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = classInfo77.getSuperType();
        int int79 = classInfo77.getModifiers();
        org.mockito.asm.Type type80 = classInfo77.getType();
        org.mockito.asm.Type type81 = classInfo77.getSuperType();
        java.lang.String str82 = classInfo77.toString();
        org.mockito.asm.Type type83 = classInfo77.getSuperType();
        boolean boolean84 = type65.equals((java.lang.Object) type83);
        int int85 = type65.getSize();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/cglib/core/AbstractClassGenerator;" + "'", str66, "Lorg/mockito/cglib/core/AbstractClassGenerator;");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "int" + "'", str68, "int");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "int" + "'", str71, "int");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(III)I" + "'", str74, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertNotNull(classInfo77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1041 + "'", int79 == 1041);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.mockito.asm.Type[]" + "'", str82, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test07934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07934");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/ReflectUtils$4;", "java.beans.PropertyDescriptor[name=; values={hi!=F}]");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type4 = type3.getElementType();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
    }

    @Test
    public void test07935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07935");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature50 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test07936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07936");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07937");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo10.getInterfaces();
        org.mockito.asm.Type[] typeArray30 = classInfo10.getInterfaces();
        org.mockito.asm.Type type31 = classInfo10.getSuperType();
        java.lang.String str32 = classInfo10.toString();
        java.lang.String str33 = classInfo10.toString();
        org.mockito.asm.Type type34 = classInfo10.getSuperType();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getReturnType("(III)Lorg.mockito.asm.Type[];");
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("()Lva/lang/Object;");
        boolean boolean39 = type36.equals((java.lang.Object) type38);
        boolean boolean40 = classInfo10.equals((java.lang.Object) type38);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.mockito.asm.Type[]" + "'", str32, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.mockito.asm.Type[]" + "'", str33, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07938");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator21.getNamingPolicy();
        boolean boolean24 = generator21.getUseCache();
        generator21.setAttemptLoad(false);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray39);
        generator21.setClasses(classArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator21.getStrategy();
        generator5.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator5.getNamingPolicy();
        boolean boolean45 = generator5.getAttemptLoad();
        boolean boolean46 = generator5.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin47 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test07939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07939");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        propertyDescriptor3.setValue("I", (java.lang.Object) propertyDescriptorArray17);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj22 = propertyDescriptor3.getValue("");
        java.lang.reflect.Method method23 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor29.setReadMethod(method30);
        propertyDescriptor29.setBound(true);
        java.lang.reflect.Method method34 = null;
        propertyDescriptor29.setWriteMethod(method34);
        boolean boolean36 = propertyDescriptor29.isHidden();
        java.lang.Class<?> wildcardClass37 = propertyDescriptor29.getPropertyType();
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor3.setValue("()L(III)[Lorg/mockito/asm/Type;;", (java.lang.Object) wildcardClass37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(wildcardClass37);
    }

    @Test
    public void test07940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07940");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07941");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(III)I]");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo25);
        propertyDescriptor3.setName("");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propertyEditor26);
    }

    @Test
    public void test07942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07942");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = methodInfo46.toString();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass57);
        java.lang.String str60 = classInfo59.toString();
        org.mockito.asm.Type type61 = classInfo59.getSuperType();
        org.mockito.asm.Type type62 = classInfo59.getSuperType();
        org.mockito.asm.Type[] typeArray63 = classInfo59.getInterfaces();
        org.mockito.asm.Type type64 = classInfo59.getSuperType();
        org.mockito.asm.Type type65 = type64.getElementType();
        boolean boolean66 = methodInfo46.equals((java.lang.Object) type65);
        org.mockito.cglib.core.Signature signature67 = methodInfo46.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.mockito.asm.Type[]" + "'", str60, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(signature67);
    }

    @Test
    public void test07943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07943");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.Object obj8 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor3.setValue("V(III)Lint;", obj8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
    }

    @Test
    public void test07944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07944");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("<init>", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEnumeration6);
    }

    @Test
    public void test07945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07945");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test07946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07946");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(true);
        java.lang.String str19 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.beans.PropertyDescriptor[name=(III)I; hidden; expert]" + "'", str19, "java.beans.PropertyDescriptor[name=(III)I; hidden; expert]");
    }

    @Test
    public void test07947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07947");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator33.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator25.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type42 = signature41.getReturnType();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator48, 7, 6 };
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        boolean boolean56 = signature41.equals((java.lang.Object) classArray54);
        java.lang.String str57 = signature41.getDescriptor();
        org.mockito.asm.Type[] typeArray58 = signature41.getArgumentTypes();
        generator16.setDelegates((java.lang.Object[]) typeArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator16.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor61 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator16);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator16.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator16.setStyle(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 36");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNull(propertyEditor61);
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test07948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07948");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; constrained]");
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ava.beans.PropertyDescriptor[name=hi!" + "'", str2, "ava.beans.PropertyDescriptor[name=hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test07949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07949");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 2);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 1069);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(methodInfo53);
    }

    @Test
    public void test07950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07950");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        propertyDescriptor17.setExpert(true);
        java.lang.String str23 = propertyDescriptor17.getDisplayName();
        propertyDescriptor17.setShortDescription("org.mockito.asm.Type[]");
        java.lang.String str26 = propertyDescriptor17.getShortDescription();
        propertyDescriptor3.setValue("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;", (java.lang.Object) propertyDescriptor17);
        propertyDescriptor17.setPreferred(false);
        boolean boolean30 = propertyDescriptor17.isExpert();
        boolean boolean31 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setHidden(true);
        java.lang.String str34 = propertyDescriptor17.getDisplayName();
        java.lang.Class<?> wildcardClass35 = propertyDescriptor17.getPropertyType();
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNull(wildcardClass35);
    }

    @Test
    public void test07951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07951");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        java.lang.String str52 = methodInfo51.toString();
        org.mockito.cglib.core.Signature signature53 = methodInfo51.getSignature();
        int int54 = methodInfo51.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>()V" + "'", str52, "<init>()V");
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test07952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07952");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray23);
        generator5.setClasses(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator5.getStrategy();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, false);
        generator5.setDelegates((java.lang.Object[]) methodArray39);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 16");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
    }

    @Test
    public void test07953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07953");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator28.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy42);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        generator57.setStyle((int) (byte) 1);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator66, 7, 6 };
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator57.setClasses(classArray72);
        generator49.setClasses(classArray72);
        java.lang.ClassLoader classLoader76 = null;
        generator49.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader78 = generator49.getClassLoader();
        java.lang.reflect.Method method80 = null;
        java.lang.reflect.Method method81 = null;
        java.beans.PropertyDescriptor propertyDescriptor82 = new java.beans.PropertyDescriptor("int", method80, method81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor82.setValue("", (java.lang.Object) generator84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator84.getStrategy();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator84, 7, 6 };
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        int int92 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, (java.lang.Object[]) classArray90);
        generator5.setClassLoader(classLoader78);
        boolean boolean95 = generator5.getAttemptLoad();
        generator5.setUseCache(true);
        boolean boolean98 = generator5.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test07954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07954");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str24 = signature23.getName();
        org.mockito.asm.Type[] typeArray25 = signature23.getArgumentTypes();
        propertyDescriptor12.setValue("Lorg/mockito/cglib/proxy/Mixin$Generator;", (java.lang.Object) typeArray25);
        java.lang.reflect.Method method27 = propertyDescriptor12.getWriteMethod();
        java.lang.Class<?> wildcardClass28 = propertyDescriptor12.getPropertyType();
        propertyDescriptor12.setShortDescription("java.beans.PropertyDescriptor[name=V; shortDescription=()L<init>()V;; hidden; values={hi!=F}]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(wildcardClass28);
    }

    @Test
    public void test07955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07955");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("()Lava.beans.PropertyDescriptor[name=Lorg/mockito/cglib/core/ReflectUtils$4;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test07956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07956");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        int int28 = classInfo27.getModifiers();
        org.mockito.asm.Type type29 = classInfo27.getType();
        java.lang.String str30 = type29.getInternalName();
        org.mockito.asm.Type type31 = type29.getElementType();
        int int32 = type29.getDimensions();
        int int33 = type29.getSort();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("int");
        java.lang.String str36 = type35.getInternalName();
        boolean boolean37 = type29.equals((java.lang.Object) str36);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str30, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07957");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator28.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy42);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        generator57.setStyle((int) (byte) 1);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator66, 7, 6 };
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator57.setClasses(classArray72);
        generator49.setClasses(classArray72);
        java.lang.ClassLoader classLoader76 = null;
        generator49.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader78 = generator49.getClassLoader();
        java.lang.reflect.Method method80 = null;
        java.lang.reflect.Method method81 = null;
        java.beans.PropertyDescriptor propertyDescriptor82 = new java.beans.PropertyDescriptor("int", method80, method81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor82.setValue("", (java.lang.Object) generator84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator84.getStrategy();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator84, 7, 6 };
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        int int92 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, (java.lang.Object[]) classArray90);
        generator5.setClassLoader(classLoader78);
        generator5.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test07958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07958");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V(III)Lint;", method1, method2);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setPreferred(false);
    }

    @Test
    public void test07959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07959");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=int; bound]");
        int int3 = type1.getOpcode((int) (byte) 10);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 14 + "'", int3 == 14);
    }

    @Test
    public void test07960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07960");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ljava/lang/Object;");
        int int2 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test07961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07961");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("LIII)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test07962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07962");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        boolean boolean16 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        java.lang.String str20 = propertyDescriptor3.getShortDescription();
        boolean boolean21 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test07963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07963");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str44 = type43.getClassName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str25, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str44, "org.mockito.cglib.proxy.Mixin$Generator");
    }

    @Test
    public void test07964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07964");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()Lava.beans.PropertyDescriptor[name=Lorg/mockito/cglib/core/ReflectUtils$4;", method1, method2);
    }

    @Test
    public void test07965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07965");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        generator5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator5.getStrategy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) typeArray22);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray22);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray22);
        generator5.setDelegates((java.lang.Object[]) classArray27);
        int int29 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        java.lang.Class<?> wildcardClass30 = classArray27.getClass();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test07966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07966");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setExpert(false);
        boolean boolean16 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07967");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator17, 7, 6 };
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray23);
        generator5.setClasses(classArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator5.getNamingPolicy();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type32, type33, type35 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray36.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray41);
        generator5.setDelegates((java.lang.Object[]) classArray42);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.Class<?> wildcardClass45 = strArray44.getClass();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(III)I" + "'", str37, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test07968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07968");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        boolean boolean47 = methodInfo45.equals((java.lang.Object) "(III)Lorg/mockito/asm/Type;");
        int int48 = methodInfo45.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test07969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07969");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Lorg.mockito.asm.Type;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str15, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str16, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
    }

    @Test
    public void test07970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07970");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("va/lang/Object");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test07971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07971");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=int;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test07972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07972");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.String str12 = classInfo11.toString();
        org.mockito.asm.Type type13 = classInfo11.getSuperType();
        org.mockito.asm.Type[] typeArray14 = classInfo11.getInterfaces();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int26 = type24.getOpcode(1);
        java.lang.String str27 = type24.getInternalName();
        boolean boolean28 = classInfo11.equals((java.lang.Object) str27);
        org.mockito.asm.Type type29 = classInfo11.getSuperType();
        org.mockito.asm.Type[] typeArray30 = classInfo11.getInterfaces();
        org.mockito.asm.Type[] typeArray31 = classInfo11.getInterfaces();
        org.mockito.asm.Type type32 = classInfo11.getSuperType();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type35, type36, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray39.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        int int44 = type43.getSort();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        java.lang.reflect.Method method49 = null;
        propertyDescriptor48.setReadMethod(method49);
        java.lang.String str51 = propertyDescriptor48.getName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass61);
        propertyDescriptor48.setValue("I", (java.lang.Object) propertyDescriptorArray62);
        propertyDescriptor48.setHidden(false);
        boolean boolean66 = type43.equals((java.lang.Object) propertyDescriptor48);
        int int67 = type43.getSort();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type70, type71, type73 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray74);
        java.lang.Class<?> wildcardClass76 = typeArray74.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass76);
        org.mockito.cglib.core.ClassInfo classInfo78 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass76);
        java.lang.String str79 = classInfo78.toString();
        org.mockito.asm.Type type80 = classInfo78.getSuperType();
        org.mockito.asm.Type[] typeArray81 = classInfo78.getInterfaces();
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray81);
        org.mockito.cglib.core.Signature signature84 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type32, typeArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) typeArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.Type[]" + "'", str12, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str27, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)I" + "'", str40, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)I" + "'", str60, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(III)I" + "'", str75, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(classInfo78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.asm.Type[]" + "'", str79, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str82, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray83);
    }

    @Test
    public void test07973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07973");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo61.getClassInfo();
        java.lang.String str63 = methodInfo61.toString();
        java.lang.Object obj64 = null;
        boolean boolean65 = methodInfo61.equals(obj64);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<init>()V" + "'", str63, "<init>()V");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07974");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str44, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
    }

    @Test
    public void test07975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07975");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) ' ');
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature50 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(signature50);
    }

    @Test
    public void test07976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07976");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        int int47 = methodInfo45.getModifiers();
        org.mockito.cglib.core.Signature signature48 = methodInfo45.getSignature();
        java.lang.String str49 = signature48.getDescriptor();
        java.lang.String str50 = signature48.getDescriptor();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        java.lang.String str58 = propertyDescriptor54.getShortDescription();
        propertyDescriptor54.setShortDescription("(III)I");
        java.lang.reflect.Method method61 = propertyDescriptor54.getReadMethod();
        java.lang.Class<?> wildcardClass62 = propertyDescriptor54.getClass();
        boolean boolean63 = signature48.equals((java.lang.Object) propertyDescriptor54);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()V" + "'", str50, "()V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "int" + "'", str58, "int");
        org.junit.Assert.assertNull(method61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test07977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07977");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj14 = propertyDescriptor3.getValue("()L<init>()V;");
        propertyDescriptor3.setName("Lava.beans.PropertyDescriptor[name=int;");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setBound(false);
        java.lang.String str24 = propertyDescriptor3.getName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lava.beans.PropertyDescriptor[name=int;" + "'", str17, "Lava.beans.PropertyDescriptor[name=int;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lava.beans.PropertyDescriptor[name=int;" + "'", str24, "Lava.beans.PropertyDescriptor[name=int;");
    }

    @Test
    public void test07978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07978");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str51 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "()V" + "'", str51, "()V");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test07979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07979");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        boolean boolean8 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator5.getStrategy();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator15.getNamingPolicy();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray24);
        generator15.setClasses(classArray26);
        generator15.setAttemptLoad(false);
        generator15.setUseCache(true);
        generator15.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator15.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator5.getStrategy();
        boolean boolean37 = generator5.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)I" + "'", str25, "(III)I");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test07980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07980");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("va/lang/Object");
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        generator11.setStyle((int) (byte) 1);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator20, 7, 6 };
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator11.setClasses(classArray26);
        generator11.setStyle(2);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        java.lang.reflect.Method method38 = null;
        propertyDescriptor34.setReadMethod(method38);
        propertyDescriptor34.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration42 = propertyDescriptor34.attributeNames();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        generator48.setStyle((int) (byte) 1);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator57, 7, 6 };
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator48.setClasses(classArray63);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator48.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor67 = propertyDescriptor34.createPropertyEditor((java.lang.Object) namingPolicy66);
        generator11.setNamingPolicy(namingPolicy66);
        java.beans.PropertyEditor propertyEditor69 = propertyDescriptor3.createPropertyEditor((java.lang.Object) namingPolicy66);
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method72 = propertyDescriptor3.getReadMethod();
        boolean boolean73 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(strEnumeration42);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNull(propertyEditor67);
        org.junit.Assert.assertNull(propertyEditor69);
        org.junit.Assert.assertNull(method72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test07981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07981");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 2);
        java.lang.String str51 = methodInfo50.toString();
        java.lang.String str52 = methodInfo50.toString();
        org.mockito.cglib.core.ClassInfo classInfo53 = methodInfo50.getClassInfo();
        org.mockito.asm.Type type54 = classInfo53.getType();
        org.mockito.asm.Type type55 = classInfo53.getSuperType();
        int int56 = type55.getSort();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>()V" + "'", str51, "<init>()V");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>()V" + "'", str52, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
    }

    @Test
    public void test07982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07982");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("Lava.beans.PropertyDescriptor[name=int;", "Lint;");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        int int5 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray25);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray25);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("org.mockito.cglib.core.ReflectUtils$3", type4, typeArray25);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)I" + "'", str26, "(III)I");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str28, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str29, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test07983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07983");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator14.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(false);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator5.getStrategy();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, false, false);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        generator5.setDelegates((java.lang.Object[]) classArray49);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test07984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07984");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature45 = methodInfo44.getSignature();
        int int46 = methodInfo44.getModifiers();
        org.mockito.cglib.core.Signature signature47 = methodInfo44.getSignature();
        org.mockito.asm.Type[] typeArray48 = methodInfo44.getExceptionTypes();
        org.mockito.cglib.core.Signature signature49 = methodInfo44.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(signature49);
    }

    @Test
    public void test07985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07985");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        generator5.setAttemptLoad(true);
        generator5.setUseCache(false);
        boolean boolean16 = generator5.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07986");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.Object[] objArray15 = new java.lang.Object[] { generator10, 7, 6 };
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        boolean boolean18 = signature3.equals((java.lang.Object) classArray16);
        java.lang.String str19 = signature3.getDescriptor();
        java.lang.String str20 = signature3.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = signature3.getArgumentTypes();
        org.mockito.asm.Type type22 = signature3.getReturnType();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        generator28.setStyle((int) (byte) 1);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator37, 7, 6 };
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator28.setClasses(classArray43);
        java.lang.Class<?> wildcardClass46 = generator28.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.lang.String str48 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        java.lang.String str49 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type[] typeArray52 = classInfo51.getInterfaces();
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("", type22, typeArray52);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        generator59.setStyle((int) (byte) 1);
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("int", method64, method65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor66.setValue("", (java.lang.Object) generator68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator68, 7, 6 };
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator59.setClasses(classArray74);
        java.lang.Class<?> wildcardClass77 = generator59.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass77);
        java.lang.String str79 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        java.lang.Object obj80 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass77);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray88 = new org.mockito.asm.Type[] { type84, type85, type87 };
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type82, typeArray88);
        java.lang.Class<?> wildcardClass90 = typeArray88.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray91 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass90);
        java.lang.reflect.Method[] methodArray94 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray91, true, true);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray94);
        java.lang.reflect.Constructor constructor96 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass77, classArray95);
        java.lang.String str97 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        boolean boolean98 = type22.equals((java.lang.Object) str97);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(III)I" + "'", str19, "(III)I");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)I" + "'", str20, "(III)I");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str47, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str48, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str49, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str50, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str78, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str79, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "int" + "'", str83, "int");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "int" + "'", str86, "int");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(III)I" + "'", str89, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(propertyDescriptorArray91);
        org.junit.Assert.assertNotNull(methodArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(constructor96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str97, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test07987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07987");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        boolean boolean17 = generator5.getAttemptLoad();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        generator23.setStyle((int) (byte) 1);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator32, 7, 6 };
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator23.setClasses(classArray38);
        java.lang.Class<?> wildcardClass41 = generator23.getClass();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        boolean boolean49 = generator47.getUseCache();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator47.setDelegates((java.lang.Object[]) classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass41, classArray58);
        org.mockito.asm.Type[] typeArray61 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor60);
        org.mockito.asm.Type[] typeArray62 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor60);
        java.lang.String str63 = org.mockito.asm.Type.getConstructorDescriptor(constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo64 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60, 0);
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("int", method68, method69);
        propertyDescriptor70.setExpert(false);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type76, type77, type79 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray80);
        java.lang.String[] strArray83 = org.mockito.cglib.core.ReflectUtils.getNames(classArray82);
        java.lang.String[] strArray84 = org.mockito.cglib.core.ReflectUtils.getNames(classArray82);
        propertyDescriptor70.setValue("org/mockito/cglib/proxy/Mixin$Generator", (java.lang.Object) classArray82);
        java.lang.Object obj86 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor60, (java.lang.Object[]) classArray82);
        int int87 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray82);
        generator5.setClasses(classArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "()V" + "'", str63, "()V");
        org.junit.Assert.assertNotNull(methodInfo64);
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "int" + "'", str75, "int");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "int" + "'", str78, "int");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(III)I" + "'", str81, "(III)I");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test07988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07988");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        int int12 = type10.getOpcode(1);
        java.lang.String str13 = type10.getInternalName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) typeArray22);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray22);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray22);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str13, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)F" + "'", str27, "(III)F");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str28, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray29);
    }

    @Test
    public void test07989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07989");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setValue("boolean", (java.lang.Object) 10.0d);
        boolean boolean18 = propertyDescriptor3.isPreferred();
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        boolean boolean20 = propertyDescriptor3.isExpert();
        boolean boolean21 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07990");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor24.setReadMethod(method25);
        java.lang.reflect.Method method27 = propertyDescriptor24.getWriteMethod();
        java.lang.reflect.Method method28 = propertyDescriptor24.getReadMethod();
        propertyDescriptor24.setShortDescription("");
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor17.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor17.setConstrained(true);
        propertyDescriptor17.setShortDescription("int");
        boolean boolean36 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setConstrained(false);
        boolean boolean39 = propertyDescriptor17.isPreferred();
        boolean boolean40 = propertyDescriptor17.isExpert();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        propertyDescriptor17.setValue("ava.beans.PropertyDescriptor[name=int", (java.lang.Object) generator42);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        generator50.setStyle((int) (byte) 1);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        java.lang.Object[] objArray64 = new java.lang.Object[] { generator59, 7, 6 };
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator50.setClasses(classArray65);
        int int68 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray65);
        int int69 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray65);
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray65);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray65);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator42.setClasses(classArray72);
        boolean boolean74 = propertyDescriptor3.equals((java.lang.Object) classArray72);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test07991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07991");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray13);
        java.lang.Class<?> wildcardClass15 = methodArray14.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method16 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test07992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07992");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/cglib/proxy/Mixin$Generator", "(III)Lorg.mockito.asm.Type[];");
        java.lang.String str3 = signature2.toString();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        java.lang.String str5 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator(III)Lorg.mockito.asm.Type[];" + "'", str3, "org/mockito/cglib/proxy/Mixin$Generator(III)Lorg.mockito.asm.Type[];");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator(III)Lorg.mockito.asm.Type[];" + "'", str5, "org/mockito/cglib/proxy/Mixin$Generator(III)Lorg.mockito.asm.Type[];");
    }

    @Test
    public void test07993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07993");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        org.mockito.asm.Type[] typeArray11 = org.mockito.asm.Type.getArgumentTypes("(III)V");
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray11);
        generator5.setClasses(classArray12);
        boolean boolean14 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07994");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("int");
        boolean boolean22 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        boolean boolean27 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(false);
        boolean boolean30 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07995");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        java.lang.String str8 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
    }

    @Test
    public void test07996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07996");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("[Lorg/mockito/asm/Type;", "()V");
        java.lang.String str3 = signature2.getName();
        org.mockito.asm.Type[] typeArray4 = signature2.getArgumentTypes();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor8.setReadMethod(method12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor8.setReadMethod(method14);
        java.lang.String str16 = propertyDescriptor8.getDisplayName();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor8.getPropertyType();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor8.getPropertyType();
        boolean boolean19 = propertyDescriptor8.isPreferred();
        propertyDescriptor8.setShortDescription("java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]");
        boolean boolean22 = signature2.equals((java.lang.Object) propertyDescriptor8);
        boolean boolean23 = propertyDescriptor8.isPreferred();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str3, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07997");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
    }

    @Test
    public void test07998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07998");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor13.setReadMethod(method17);
        java.lang.reflect.Method method19 = null;
        propertyDescriptor13.setReadMethod(method19);
        propertyDescriptor13.setName("(III)I");
        propertyDescriptor13.setShortDescription("(III)Lorg.mockito.asm.Type[];");
        java.lang.Object obj26 = propertyDescriptor13.getValue("I");
        java.lang.String str27 = propertyDescriptor13.getDisplayName();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]; propertyEditorClass=class [Lorg.mockito.asm.Type;]", (java.lang.Object) propertyDescriptor13);
        java.lang.String str29 = propertyDescriptor13.getShortDescription();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(III)Lorg.mockito.asm.Type[];" + "'", str29, "(III)Lorg.mockito.asm.Type[];");
    }

    @Test
    public void test07999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07999");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.String str50 = methodInfo48.toString();
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo48.getClassInfo();
        int int52 = classInfo51.getModifiers();
        org.mockito.asm.Type type53 = classInfo51.getType();
        java.lang.String str54 = classInfo51.toString();
        java.lang.String str55 = classInfo51.toString();
        java.lang.String str56 = classInfo51.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str54, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str55, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str56, "org.mockito.cglib.proxy.Mixin$Generator");
    }

    @Test
    public void test08000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test08000");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator15.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy27);
        generator5.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator5.getNamingPolicy();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        generator38.setStyle((int) (byte) 1);
        generator38.setUseCache(true);
        boolean boolean44 = generator38.getUseCache();
        generator38.setUseCache(false);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        generator52.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator38.setStrategy(generatorStrategy56);
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("int", method59, method60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor61.setValue("", (java.lang.Object) generator63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator63.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator63.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy66);
        generator5.setNamingPolicy(namingPolicy66);
        boolean boolean69 = generator5.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("va/beans/PropertyDescriptor");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str51 = methodInfo50.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>()V" + "'", str51, "<init>()V");
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type type13 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray14 = classInfo10.getInterfaces();
        org.mockito.asm.Type type15 = classInfo10.getSuperType();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor19.setReadMethod(method23);
        boolean boolean25 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setShortDescription("hi!");
        java.lang.String str28 = propertyDescriptor19.getShortDescription();
        propertyDescriptor19.setConstrained(true);
        propertyDescriptor19.setValue("boolean", (java.lang.Object) 10.0d);
        propertyDescriptor19.setName("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        boolean boolean36 = classInfo10.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        int int37 = classInfo10.getModifiers();
        int int38 = classInfo10.getModifiers();
        java.lang.String str39 = classInfo10.toString();
        org.mockito.asm.Type[] typeArray40 = classInfo10.getInterfaces();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1041 + "'", int37 == 1041);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1041 + "'", int38 == 1041);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.mockito.asm.Type[]" + "'", str39, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray40);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        generator15.setStrategy(generatorStrategy25);
        generator5.setStrategy(generatorStrategy25);
        boolean boolean28 = generator5.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin29 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        int int4 = type2.getOpcode(5);
        java.lang.String str5 = type2.getDescriptor();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        generator11.setStyle((int) (byte) 1);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator20, 7, 6 };
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator11.setClasses(classArray26);
        java.lang.Class<?> wildcardClass29 = generator11.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        boolean boolean37 = generator35.getUseCache();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type40, type41, type43 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray44);
        generator35.setDelegates((java.lang.Object[]) classArray46);
        java.lang.reflect.Constructor constructor48 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass29, classArray46);
        org.mockito.asm.Type[] typeArray49 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor48);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor48);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor48);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor48, 3);
        org.mockito.asm.Type[] typeArray54 = methodInfo53.getExceptionTypes();
        org.mockito.asm.Type[] typeArray55 = methodInfo53.getExceptionTypes();
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("Lava.beans.PropertyDescriptor[name=int;", type2, typeArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray57);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lava.beans.PropertyDescriptor[name=int;" + "'", str5, "Lava.beans.PropertyDescriptor[name=int;");
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "int" + "'", str42, "int");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(III)I" + "'", str45, "(III)I");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(constructor48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()V" + "'", str50, "()V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray58);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator52.getNamingPolicy();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type57, type58, type60 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray61);
        generator52.setClasses(classArray63);
        int int65 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray63);
        java.lang.Object obj66 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, (java.lang.Object[]) classArray63);
        org.mockito.cglib.core.MethodInfo methodInfo68 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 6);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature71 = methodInfo70.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "int" + "'", str59, "int");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(III)I" + "'", str62, "(III)I");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(methodInfo68);
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertNotNull(signature71);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method14 = propertyDescriptor3.getReadMethod();
        java.lang.String str15 = propertyDescriptor3.getShortDescription();
        boolean boolean16 = propertyDescriptor3.isExpert();
        boolean boolean17 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator5.getStrategy();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator26.getNamingPolicy();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type31, type32, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray35);
        generator26.setClasses(classArray37);
        generator26.setAttemptLoad(false);
        generator26.setUseCache(true);
        generator26.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator26.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy45);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        boolean boolean54 = generator52.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator52.setClassLoader(classLoader55);
        generator52.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(false);
        generator59.setUseCache(false);
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("int", method65, method66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor67.setValue("", (java.lang.Object) generator69);
        boolean boolean71 = generator69.getUseCache();
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        generator69.setUseCache(false);
        generator69.setAttemptLoad(false);
        java.lang.reflect.Method method79 = null;
        java.lang.reflect.Method method80 = null;
        java.beans.PropertyDescriptor propertyDescriptor81 = new java.beans.PropertyDescriptor("int", method79, method80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor81.setValue("", (java.lang.Object) generator83);
        generator83.setStyle((int) (byte) 1);
        java.lang.reflect.Method method88 = null;
        java.lang.reflect.Method method89 = null;
        java.beans.PropertyDescriptor propertyDescriptor90 = new java.beans.PropertyDescriptor("int", method88, method89);
        org.mockito.cglib.proxy.Mixin.Generator generator92 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor90.setValue("", (java.lang.Object) generator92);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator92.getNamingPolicy();
        generator83.setNamingPolicy(namingPolicy94);
        generator69.setNamingPolicy(namingPolicy94);
        generator59.setNamingPolicy(namingPolicy94);
        generator52.setNamingPolicy(namingPolicy94);
        generator5.setNamingPolicy(namingPolicy94);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "int" + "'", str30, "int");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(III)I" + "'", str36, "(III)I");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo49.getClassInfo();
        org.mockito.asm.Type[] typeArray51 = methodInfo49.getExceptionTypes();
        org.mockito.asm.Type[] typeArray52 = methodInfo49.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo53 = methodInfo49.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(classInfo53);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("int");
        boolean boolean22 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.Object obj29 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type33, type34, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        int int42 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray41);
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method44 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass23, "java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=int; values={hi!=F}]]Lva/lang/Object;", classArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=int; values={hi!=F}]]Lva/lang/Object;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)I" + "'", str38, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        propertyDescriptor3.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Z");
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = type13.getElementType();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setStyle((int) (byte) 1);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator21.setClasses(classArray36);
        java.lang.Class<?> wildcardClass39 = generator21.getClass();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        boolean boolean47 = generator45.getUseCache();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type50, type51, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray54);
        generator45.setDelegates((java.lang.Object[]) classArray56);
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass39, classArray56);
        org.mockito.asm.Type[] typeArray59 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor58);
        org.mockito.asm.Type[] typeArray60 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor58);
        java.lang.String str61 = org.mockito.asm.Type.getConstructorDescriptor(constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo64 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, 4);
        org.mockito.cglib.core.ClassInfo classInfo65 = methodInfo64.getClassInfo();
        java.lang.String str66 = methodInfo64.toString();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type69, type70, type72 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray73);
        java.lang.Class<?> wildcardClass75 = typeArray73.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass75);
        org.mockito.cglib.core.ClassInfo classInfo77 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass75);
        java.lang.String str78 = classInfo77.toString();
        org.mockito.asm.Type type79 = classInfo77.getSuperType();
        org.mockito.asm.Type type80 = classInfo77.getSuperType();
        org.mockito.asm.Type type81 = classInfo77.getType();
        boolean boolean82 = methodInfo64.equals((java.lang.Object) type81);
        java.lang.String str83 = methodInfo64.toString();
        org.mockito.cglib.core.Signature signature84 = methodInfo64.getSignature();
        org.mockito.asm.Type type85 = signature84.getReturnType();
        org.mockito.cglib.core.Signature signature88 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str89 = signature88.getName();
        org.mockito.asm.Type[] typeArray90 = signature88.getArgumentTypes();
        boolean boolean91 = type85.equals((java.lang.Object) signature88);
        org.mockito.asm.Type[] typeArray92 = signature88.getArgumentTypes();
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray92);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.mockito.asm.Type[]" + "'", str14, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)I" + "'", str55, "(III)I");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "()V" + "'", str61, "()V");
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertNotNull(methodInfo64);
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<init>()V" + "'", str66, "<init>()V");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "int" + "'", str68, "int");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "int" + "'", str71, "int");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(III)I" + "'", str74, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertNotNull(classInfo77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.mockito.asm.Type[]" + "'", str78, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "<init>()V" + "'", str83, "<init>()V");
        org.junit.Assert.assertNotNull(signature84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "int" + "'", str89, "int");
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str93, "(III)[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type27, type28, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray31);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray41.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = classInfo45.getSuperType();
        org.mockito.asm.Type[] typeArray47 = classInfo45.getInterfaces();
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray47);
        generator5.setDelegates((java.lang.Object[]) typeArray47);
        boolean boolean50 = generator5.getAttemptLoad();
        java.lang.Class<?> wildcardClass51 = generator5.getClass();
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        java.lang.String str53 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass51);
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray54, false, true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(III)I" + "'", str32, "(III)I");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str34, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str48, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str52, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str53, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(methodArray57);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        java.lang.String str34 = propertyDescriptor15.getDisplayName();
        java.lang.reflect.Method method35 = null;
        propertyDescriptor15.setReadMethod(method35);
        propertyDescriptor15.setExpert(false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        generator53.setStyle((int) (byte) 1);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("int", method58, method59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor60.setValue("", (java.lang.Object) generator62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator62, 7, 6 };
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator53.setClasses(classArray68);
        java.lang.Class<?> wildcardClass71 = generator53.getClass();
        java.lang.reflect.Method method73 = null;
        java.lang.reflect.Method method74 = null;
        java.beans.PropertyDescriptor propertyDescriptor75 = new java.beans.PropertyDescriptor("int", method73, method74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor75.setValue("", (java.lang.Object) generator77);
        boolean boolean79 = generator77.getUseCache();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str81 = type80.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str84 = type83.getClassName();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type82, type83, type85 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray86);
        generator77.setDelegates((java.lang.Object[]) classArray88);
        java.lang.reflect.Constructor constructor90 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass71, classArray88);
        org.mockito.asm.Type[] typeArray91 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor90);
        org.mockito.asm.Type[] typeArray92 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor90);
        org.mockito.cglib.core.Signature signature93 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor90);
        org.mockito.cglib.core.MethodInfo methodInfo95 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90, 13);
        org.mockito.asm.Type[] typeArray96 = methodInfo95.getExceptionTypes();
        java.lang.Object obj97 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, (java.lang.Object[]) typeArray96);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "int" + "'", str81, "int");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "int" + "'", str84, "int");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(III)I" + "'", str87, "(III)I");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(constructor90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(signature93);
        org.junit.Assert.assertNotNull(methodInfo95);
        org.junit.Assert.assertNotNull(typeArray96);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()Lboolean;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]; displayName=java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]; propertyEditorClass=class [Lorg.mockito.asm.Type;]", "()L<init>()V;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]; displayName=java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]; propertyEditorClass=class [Lorg.mockito.asm.Type;]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("java/lang/Object");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        propertyDescriptor6.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        java.lang.String str20 = classInfo19.toString();
        org.mockito.asm.Type type21 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray22 = classInfo19.getInterfaces();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor6.createPropertyEditor((java.lang.Object) classInfo19);
        java.lang.String str24 = classInfo19.toString();
        java.lang.String str25 = classInfo19.toString();
        org.mockito.asm.Type type26 = classInfo19.getType();
        org.mockito.asm.Type[] typeArray27 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=int; propertyEditorClass=class [Lorg.mockito.asm.Type;]", type2, typeArray27);
        java.lang.String str29 = signature28.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.mockito.asm.Type[]" + "'", str20, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.Type[]" + "'", str24, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.Type[]" + "'", str25, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.beans.PropertyDescriptor[name=int; propertyEditorClass=class [Lorg.mockito.asm.Type;](Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;" + "'", str29, "java.beans.PropertyDescriptor[name=int; propertyEditorClass=class [Lorg.mockito.asm.Type;](Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;");
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 39");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isHidden();
        java.lang.Object obj22 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method23 = null;
        propertyDescriptor3.setWriteMethod(method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method26 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str28 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.asm.Type; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str14, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getType();
        org.mockito.asm.Type[] typeArray15 = classInfo10.getInterfaces();
        java.lang.String str16 = classInfo10.toString();
        org.mockito.asm.Type type17 = classInfo10.getSuperType();
        int int18 = classInfo10.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type[]" + "'", str16, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1041 + "'", int18 == 1041);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        generator5.setUseCache(true);
        generator5.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator5.setNamingPolicy(namingPolicy21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        generator28.setStyle((int) (byte) 1);
        generator28.setUseCache(true);
        boolean boolean34 = generator28.getUseCache();
        generator28.setUseCache(false);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        int int54 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        generator5.setClasses(classArray49);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = classInfo10.getType();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        generator17.setStyle((int) (byte) 1);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        java.lang.Object[] objArray31 = new java.lang.Object[] { generator26, 7, 6 };
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator17.setClasses(classArray32);
        java.lang.Class<?> wildcardClass35 = generator17.getClass();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        boolean boolean43 = generator41.getUseCache();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type46, type47, type49 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray50);
        generator41.setDelegates((java.lang.Object[]) classArray52);
        java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray52);
        org.mockito.cglib.core.ClassInfo classInfo55 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type[] typeArray56 = classInfo55.getInterfaces();
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("", type11, typeArray56);
        java.lang.String str58 = signature57.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "int" + "'", str45, "int");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(III)I" + "'", str51, "(III)I");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(constructor54);
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        java.lang.String str14 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor20.setReadMethod(method21);
        propertyDescriptor20.setExpert(false);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor20.setValue("hi!", (java.lang.Object) type26);
        propertyDescriptor20.setBound(false);
        propertyDescriptor20.setHidden(true);
        propertyDescriptor20.setShortDescription("()L<init>()V;");
        boolean boolean34 = propertyDescriptor20.isHidden();
        boolean boolean35 = propertyDescriptor20.isPreferred();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(III)I]", (java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setBound(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.toString();
        java.lang.String str4 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str2, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLorg/mockito/asm/Type;;" + "'", str3, "LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LLorg/mockito/asm/Type;;" + "'", str4, "LLorg/mockito/asm/Type;;");
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.Class<?> wildcardClass21 = generator18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(false);
        generator23.setUseCache(false);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        boolean boolean35 = generator33.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        generator33.setUseCache(false);
        generator33.setAttemptLoad(false);
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        generator47.setStyle((int) (byte) 1);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator56.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy58);
        generator33.setNamingPolicy(namingPolicy58);
        generator23.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray62 = new java.lang.Class[] {};
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        generator23.setClasses(classArray62);
        java.lang.reflect.Constructor constructor65 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray62);
        java.beans.PropertyEditor propertyEditor66 = propertyDescriptor3.createPropertyEditor((java.lang.Object) constructor65);
        org.mockito.cglib.core.MethodInfo methodInfo68 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65, 102);
        org.mockito.cglib.core.MethodInfo methodInfo69 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65);
        org.mockito.cglib.core.Signature signature70 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor65);
        org.mockito.cglib.core.Signature signature71 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor65);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(constructor65);
        org.junit.Assert.assertNull(propertyEditor66);
        org.junit.Assert.assertNotNull(methodInfo68);
        org.junit.Assert.assertNotNull(methodInfo69);
        org.junit.Assert.assertNotNull(signature70);
        org.junit.Assert.assertNotNull(signature71);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray41);
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str25, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str43, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str44, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str45, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str11 = type10.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()LIII)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.String str50 = methodInfo48.toString();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        java.lang.String str62 = classInfo61.toString();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getSuperType();
        org.mockito.asm.Type type65 = classInfo61.getType();
        boolean boolean66 = methodInfo48.equals((java.lang.Object) type65);
        java.lang.Class<?> wildcardClass67 = methodInfo48.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass67);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$3.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.Type[]" + "'", str62, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str15 = signature14.getName();
        org.mockito.asm.Type[] typeArray16 = signature14.getArgumentTypes();
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature14);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.Object[] objArray38 = new java.lang.Object[] { generator33, 7, 6 };
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator24.setClasses(classArray39);
        java.lang.Class<?> wildcardClass42 = generator24.getClass();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        boolean boolean50 = generator48.getUseCache();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray57);
        generator48.setDelegates((java.lang.Object[]) classArray59);
        java.lang.reflect.Constructor constructor61 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass42, classArray59);
        org.mockito.asm.Type[] typeArray62 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor61);
        org.mockito.asm.Type[] typeArray63 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor61);
        org.mockito.cglib.core.Signature signature64 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor61);
        java.lang.String str65 = signature64.getName();
        java.beans.PropertyEditor propertyEditor66 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature64);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass69 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("L(III)LIII)Lorg/mockito/asm/Type;;");
        java.lang.String str72 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName(")L(III)[Lorg/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(constructor61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "<init>" + "'", str65, "<init>");
        org.junit.Assert.assertNull(propertyEditor66);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=int; preferred; values={hi!=F}]");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("int", method3, method4);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor5.setValue("", (java.lang.Object) generator7);
        generator7.setStyle((int) (byte) 1);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator16, 7, 6 };
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator7.setClasses(classArray22);
        java.lang.Class<?> wildcardClass25 = generator7.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        boolean boolean33 = generator31.getUseCache();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray40);
        generator31.setDelegates((java.lang.Object[]) classArray42);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass25, classArray42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor44);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        org.mockito.asm.Type[] typeArray49 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray49.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method52 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.asm.Type; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()Lava.beans.PropertyDescriptor[name=int;" + "'", str50, "()Lava.beans.PropertyDescriptor[name=int;");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        int int14 = type12.getOpcode((int) (byte) 0);
        int int16 = type12.getOpcode((int) (short) 100);
        java.lang.Class<?> wildcardClass17 = type12.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass17);
        java.util.List list19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list20 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass17, list19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator28.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy30);
        generator5.setNamingPolicy(namingPolicy30);
        generator5.setAttemptLoad(true);
        boolean boolean35 = generator5.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/lang/Object;", method1, method2);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator19, 7, 6 };
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator10.setClasses(classArray25);
        java.lang.Class<?> wildcardClass28 = generator10.getClass();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        boolean boolean36 = generator34.getUseCache();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray43);
        generator34.setDelegates((java.lang.Object[]) classArray45);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass28, classArray45);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        propertyDescriptor3.setValue("java/util/Collections$EmptyEnumeration", (java.lang.Object) 3);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass55 = propertyDescriptor3.getPropertyType();
        boolean boolean56 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("[Ljava/lang/reflect/Method;", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setWriteMethod(method5);
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        generator6.setUseCache(true);
        boolean boolean12 = generator6.getUseCache();
        generator6.setUseCache(false);
        boolean boolean15 = generator6.getUseCache();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        generator29.setStyle((int) (byte) 1);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator38, 7, 6 };
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator29.setClasses(classArray44);
        generator21.setClasses(classArray44);
        java.lang.ClassLoader classLoader48 = null;
        generator21.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = generator21.getClassLoader();
        generator6.setClassLoader(classLoader50);
        generator6.setAttemptLoad(false);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        java.lang.Object[] objArray64 = new java.lang.Object[] { generator59, 7, 6 };
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        generator6.setClasses(classArray67);
        java.lang.ClassLoader classLoader69 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method70 = org.mockito.cglib.core.ReflectUtils.findMethod("Ljava.beans.PropertyDescriptor[name=int; shortDescription=(III)I; hidden; values={hi!=F; I=org.mockito.asm.Type[]}];", classLoader69);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->Ljava.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator5.getStrategy();
        boolean boolean10 = generator5.getUseCache();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        generator16.setUseCache(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        generator16.setUseCache(false);
        generator16.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator16.getStrategy();
        generator5.setStrategy(generatorStrategy34);
        generator5.setAttemptLoad(true);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        generator43.setStyle((int) (byte) 1);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator52.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy54);
        generator43.setUseCache(false);
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("int", method59, method60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor61.setValue("", (java.lang.Object) generator63);
        generator63.setUseCache(false);
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("int", method68, method69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor70.setValue("", (java.lang.Object) generator72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator72.getStrategy();
        generator63.setStrategy(generatorStrategy74);
        generator43.setStrategy(generatorStrategy74);
        generator5.setStrategy(generatorStrategy74);
        boolean boolean78 = generator5.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        int int12 = type11.getSort();
        int int13 = type11.getSort();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator28, 7, 6 };
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator19.setClasses(classArray34);
        java.lang.Class<?> wildcardClass37 = generator19.getClass();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        boolean boolean45 = generator43.getUseCache();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        java.lang.reflect.Constructor constructor56 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass37, classArray54);
        java.lang.String str57 = org.mockito.asm.Type.getConstructorDescriptor(constructor56);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor56, 3);
        org.mockito.cglib.core.Signature signature60 = methodInfo59.getSignature();
        org.mockito.asm.Type[] typeArray61 = methodInfo59.getExceptionTypes();
        org.mockito.cglib.core.Signature signature62 = new org.mockito.cglib.core.Signature("boolean", type11, typeArray61);
        org.mockito.asm.Type type63 = signature62.getReturnType();
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("int", method65, method66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor67.setValue("", (java.lang.Object) generator69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator69.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator69.getNamingPolicy();
        generator69.setUseCache(true);
        java.lang.ClassLoader classLoader75 = null;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type78, type79, type81 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) typeArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray82);
        generator69.setClasses(classArray86);
        boolean boolean88 = type63.equals((java.lang.Object) classArray86);
        java.lang.String[] strArray89 = org.mockito.cglib.core.ReflectUtils.getNames(classArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) strArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(constructor56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "()V" + "'", str57, "()V");
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(signature60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)I" + "'", str83, "(III)I");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strArray89);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        boolean boolean14 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setShortDescription("()Lva/lang/Object;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.toString();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.String str7 = signature2.toString();
        org.mockito.asm.Type[] typeArray8 = signature2.getArgumentTypes();
        java.lang.String str9 = signature2.toString();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        boolean boolean17 = generator15.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        generator15.setUseCache(false);
        generator15.setAttemptLoad(false);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator46.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator38.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator29.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy52);
        generator15.setStyle((int) (short) 0);
        generator15.setAttemptLoad(true);
        boolean boolean58 = generator15.getUseCache();
        boolean boolean59 = signature2.equals((java.lang.Object) boolean58);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(III)I" + "'", str3, "(III)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(III)I" + "'", str4, "(III)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int(III)I" + "'", str5, "int(III)I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(III)I" + "'", str6, "(III)I");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int(III)I" + "'", str7, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int(III)I" + "'", str9, "int(III)I");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("[Lorg/mockito/asm/Type;");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str3, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        propertyDescriptor3.setValue("I", (java.lang.Object) propertyDescriptorArray17);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = methodInfo46.toString();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        org.mockito.asm.Type[] typeArray49 = methodInfo46.getExceptionTypes();
        org.mockito.cglib.core.Signature signature50 = methodInfo46.getSignature();
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str54 = signature53.getName();
        org.mockito.asm.Type[] typeArray55 = signature53.getArgumentTypes();
        org.mockito.asm.Type[] typeArray56 = signature53.getArgumentTypes();
        boolean boolean57 = methodInfo46.equals((java.lang.Object) typeArray56);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo50);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator28.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy42);
        boolean boolean44 = generator5.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(106);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 106");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 2);
        org.mockito.cglib.core.ClassInfo classInfo52 = methodInfo51.getClassInfo();
        org.mockito.asm.Type type53 = classInfo52.getType();
        java.lang.String str54 = classInfo52.toString();
        org.mockito.asm.Type type55 = classInfo52.getSuperType();
        org.mockito.asm.Type[] typeArray56 = classInfo52.getInterfaces();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str54, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        boolean boolean14 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str17 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(III)I; preferred]" + "'", str17, "java.beans.PropertyDescriptor[name=(III)I; preferred]");
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass8 = generator5.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray25);
        generator17.setClasses(classArray27);
        int int29 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        java.lang.reflect.Constructor constructor30 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass8, classArray27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type33, type34, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = classInfo41.getSuperType();
        int int43 = classInfo41.getModifiers();
        org.mockito.asm.Type type44 = classInfo41.getType();
        org.mockito.asm.Type type45 = classInfo41.getType();
        int int46 = classInfo41.getModifiers();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class<?> wildcardClass55 = typeArray53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass55);
        org.mockito.cglib.core.ClassInfo classInfo57 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        java.lang.String str58 = classInfo57.toString();
        org.mockito.asm.Type type59 = classInfo57.getSuperType();
        boolean boolean61 = classInfo57.equals((java.lang.Object) 1L);
        int int62 = classInfo57.getModifiers();
        org.mockito.asm.Type type63 = classInfo57.getType();
        org.mockito.asm.Type type64 = type63.getElementType();
        boolean boolean65 = classInfo41.equals((java.lang.Object) type64);
        int int66 = classInfo41.getModifiers();
        java.lang.String str67 = classInfo41.toString();
        org.mockito.asm.Type[] typeArray68 = classInfo41.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor30, (java.lang.Object[]) typeArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)I" + "'", str26, "(III)I");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(constructor30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)I" + "'", str38, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1041 + "'", int43 == 1041);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1041 + "'", int46 == 1041);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(classInfo57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.mockito.asm.Type[]" + "'", str58, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1041 + "'", int62 == 1041);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1041 + "'", int66 == 1041);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.asm.Type[]" + "'", str67, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray68);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator20, 7, 6 };
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray26);
        generator5.setClasses(classArray26);
        generator5.setUseCache(true);
        generator5.setStyle(2);
        boolean boolean34 = generator5.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()Lint;", method1, method2);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(III)I]]", method6, method7);
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor8.attributeNames();
        propertyDescriptor3.setValue("", (java.lang.Object) propertyDescriptor8);
        org.junit.Assert.assertNotNull(strEnumeration9);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(true);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator16.getStrategy();
        propertyDescriptor3.setValue("()Lint;", (java.lang.Object) generator16);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 0);
        org.mockito.asm.Type[] typeArray47 = methodInfo46.getExceptionTypes();
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray47);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.reflect.Method method18 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setName("(III)I");
        java.lang.reflect.Method method21 = propertyDescriptor15.getReadMethod();
        java.util.Enumeration<java.lang.String> strEnumeration22 = propertyDescriptor15.attributeNames();
        boolean boolean23 = classInfo10.equals((java.lang.Object) strEnumeration22);
        org.mockito.asm.Type type24 = classInfo10.getSuperType();
        java.lang.String str25 = classInfo10.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(strEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.Type[]" + "'", str25, "org.mockito.asm.Type[]");
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        int int49 = methodInfo48.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo48.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(classInfo50);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setDisplayName("");
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean19 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()Lva/lang/Object;", "org.mockito.asm.Type");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()Lva/lang/Object;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("int");
        boolean boolean22 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setConstrained(false);
        boolean boolean25 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setConstrained(true);
        java.lang.String str28 = propertyDescriptor3.getName();
        java.lang.String str29 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        generator36.setStyle((int) (byte) 1);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator45, 7, 6 };
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator36.setClasses(classArray51);
        java.lang.Class<?> wildcardClass54 = generator36.getClass();
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass54);
        java.lang.Object obj56 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass54);
        propertyDescriptor3.setValue("(III)Ljava/lang/Object;", (java.lang.Object) propertyDescriptorArray59);
        boolean boolean61 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str55, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator15, 7, 6 };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator6.setClasses(classArray21);
        java.lang.Class<?> wildcardClass24 = generator6.getClass();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        boolean boolean32 = generator30.getUseCache();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type35, type36, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray39);
        generator30.setDelegates((java.lang.Object[]) classArray41);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass24, classArray41);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor43);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor43);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) typeArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)I" + "'", str40, "(III)I");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(typeArray48);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.lang.Object obj15 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        propertyDescriptor3.setName("Ljava.beans.PropertyDescriptor[name=int; shortDescription=(III)I; hidden; values={hi!=F; I=org.mockito.asm.Type[]}];");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) ' ');
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 97);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()V" + "'", str50, "()V");
        org.junit.Assert.assertNotNull(methodInfo52);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        boolean boolean9 = generator6.getUseCache();
        generator6.setAttemptLoad(false);
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator6.getNamingPolicy();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        generator20.setUseCache(true);
        boolean boolean26 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy27);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        generator42.setStyle((int) (byte) 1);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator51, 7, 6 };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        generator34.setClasses(classArray57);
        java.lang.ClassLoader classLoader61 = null;
        generator34.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = generator34.getClassLoader();
        generator6.setClassLoader(classLoader63);
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        generator70.setStyle((int) (byte) 1);
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("int", method75, method76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor77.setValue("", (java.lang.Object) generator79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator79, 7, 6 };
        java.lang.Class[] classArray85 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        generator70.setClasses(classArray85);
        java.lang.Class<?> wildcardClass88 = generator70.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray90 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray92 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass88);
        java.lang.Class[] classArray93 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) propertyDescriptorArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor95 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=int; values={hi!=F}]]", classLoader63);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str89, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray90);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(propertyDescriptorArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        generator5.setUseCache(true);
        boolean boolean19 = generator5.getUseCache();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        boolean boolean27 = generator25.getUseCache();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray34);
        generator25.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator25.getNamingPolicy();
        generator25.setUseCache(false);
        boolean boolean41 = generator25.getUseCache();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        java.lang.reflect.Method method49 = null;
        propertyDescriptor45.setReadMethod(method49);
        propertyDescriptor45.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration53 = propertyDescriptor45.attributeNames();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        generator59.setStyle((int) (byte) 1);
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("int", method64, method65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor66.setValue("", (java.lang.Object) generator68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator68, 7, 6 };
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator59.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator59.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor78 = propertyDescriptor45.createPropertyEditor((java.lang.Object) namingPolicy77);
        generator25.setNamingPolicy(namingPolicy77);
        generator5.setNamingPolicy(namingPolicy77);
        generator5.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strEnumeration53);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNull(propertyEditor78);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=; values={hi!=F}]");
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        java.lang.Object[] objArray14 = new java.lang.Object[] { generator9, 7, 6 };
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        boolean boolean17 = signature2.equals((java.lang.Object) classArray15);
        java.lang.String str18 = signature2.toString();
        org.mockito.asm.Type[] typeArray19 = signature2.getArgumentTypes();
        java.lang.String str20 = signature2.toString();
        org.mockito.asm.Type type21 = signature2.getReturnType();
        java.lang.String str22 = signature2.toString();
        java.lang.String str23 = signature2.getName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int(III)I" + "'", str18, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int(III)I" + "'", str20, "int(III)I");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int(III)I" + "'", str22, "int(III)I");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V(III)Lint;", method1, method2);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("()[Lorg/mockito/asm/Type;");
        boolean boolean8 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("L)Ljava/lang/Object;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        boolean boolean17 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor10.setValue("", (java.lang.Object) generator12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor10.setReadMethod(method14);
        boolean boolean16 = propertyDescriptor10.isHidden();
        propertyDescriptor10.setShortDescription("hi!");
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor26.setReadMethod(method30);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        java.lang.reflect.Method method39 = null;
        propertyDescriptor35.setReadMethod(method39);
        boolean boolean41 = propertyDescriptor35.isHidden();
        propertyDescriptor35.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] { propertyDescriptor10, propertyDescriptor22, propertyDescriptor26, propertyDescriptor35 };
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, false);
        java.lang.Class<?> wildcardClass48 = propertyDescriptorArray44.getClass();
        java.lang.String str49 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass48);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray53);
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str49, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        java.lang.String str34 = propertyDescriptor15.getDisplayName();
        java.lang.reflect.Method method35 = null;
        propertyDescriptor15.setReadMethod(method35);
        java.lang.String str37 = propertyDescriptor15.getDisplayName();
        java.lang.String str38 = propertyDescriptor15.getName();
        java.lang.String str39 = propertyDescriptor15.getShortDescription();
        java.lang.String str40 = propertyDescriptor15.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj14 = propertyDescriptor3.getValue("()L<init>()V;");
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str21 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) typeArray7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.proxy.Mixin mixin21 = mixin10.newInstance((java.lang.Object[]) propertyDescriptorArray20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type24, type25, type27 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray28.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass30);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        org.mockito.cglib.proxy.Mixin mixin35 = mixin21.newInstance((java.lang.Object[]) methodArray34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type38, type39, type41 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray42.getClass();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        int int47 = type45.getOpcode(1);
        java.lang.String str48 = type45.getInternalName();
        org.mockito.asm.Type type49 = type45.getElementType();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin35.newInstance((java.lang.Object[]) typeArray56);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("int", method61, method62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor63.setValue("", (java.lang.Object) generator65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator65.getStrategy();
        java.lang.Object[] objArray70 = new java.lang.Object[] { generator65, 7, 6 };
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin59.newInstance((java.lang.Object[]) classArray72);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(III)I" + "'", str29, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(III)I" + "'", str43, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str48, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)Lorg/mockito/asm/Type;" + "'", str58, "(III)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        generator53.setUseCache(false);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.reflect.Method method79 = null;
        java.lang.reflect.Method method80 = null;
        java.beans.PropertyDescriptor propertyDescriptor81 = new java.beans.PropertyDescriptor("int", method79, method80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor81.setValue("", (java.lang.Object) generator83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator83.getNamingPolicy();
        generator75.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator75.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy87);
        generator53.setNamingPolicy(namingPolicy87);
        // The following exception was thrown during execution in test generation
        try {
            generator53.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getName();
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setReadMethod(method18);
        java.lang.String str20 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj22 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor3.setValue("Ljava.beans.PropertyDescriptor[name=(III)I; displayName=()L<init>()V;];", obj22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.String str16 = signature15.toString();
        boolean boolean17 = classInfo10.equals((java.lang.Object) signature15);
        org.mockito.asm.Type type18 = classInfo10.getSuperType();
        java.lang.String str19 = classInfo10.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "intint" + "'", str16, "intint");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type[]" + "'", str19, "org.mockito.asm.Type[]");
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(III)V", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray13);
        java.lang.Class<?> wildcardClass15 = methodArray14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method17 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.cglib.core.Signature signature45 = methodInfo44.getSignature();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator51.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator51.getNamingPolicy();
        generator51.setUseCache(true);
        java.lang.ClassLoader classLoader57 = null;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type60, type61, type63 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) typeArray64);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray64);
        generator51.setClasses(classArray68);
        boolean boolean70 = signature45.equals((java.lang.Object) classArray68);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray68);
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray68);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "int" + "'", str59, "int");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(III)I" + "'", str65, "(III)I");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("[Ljava/lang/reflect/Method;");
        int int2 = type1.getSort();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(III)V");
        java.lang.Class[] classArray2 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray1);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type15, type16, type18 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray19);
        generator11.setClasses(classArray21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type26, type27, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray36);
        generator11.setDelegates((java.lang.Object[]) strArray23);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type42, type43, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray46.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray52);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray23);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray23);
        int int57 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method58 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass3, "Z(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;", classArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Z(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)I" + "'", str20, "(III)I");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(III)I" + "'", str31, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(III)I" + "'", str47, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str51 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.ClassInfo classInfo53 = methodInfo52.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "()V" + "'", str51, "()V");
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(classInfo53);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray44 = classInfo43.getInterfaces();
        java.lang.String str45 = classInfo43.toString();
        org.mockito.asm.Type[] typeArray46 = classInfo43.getInterfaces();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        generator52.setStyle((int) (byte) 1);
        generator52.setUseCache(true);
        boolean boolean58 = generator52.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator52.getNamingPolicy();
        generator52.setAttemptLoad(true);
        boolean boolean62 = generator52.getUseCache();
        boolean boolean63 = classInfo43.equals((java.lang.Object) generator52);
        org.mockito.asm.Type type64 = classInfo43.getType();
        int int65 = type64.getDimensions();
        java.lang.String str66 = type64.getClassName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str45, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str66, "org.mockito.cglib.proxy.Mixin$Generator");
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        int int48 = methodInfo47.getModifiers();
        org.mockito.cglib.core.Signature signature49 = methodInfo47.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(signature49);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = classInfo11.getType();
        org.mockito.asm.Type type13 = classInfo11.getType();
        java.lang.String str14 = classInfo11.toString();
        org.mockito.asm.Type type15 = classInfo11.getType();
        int int16 = type15.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.mockito.asm.Type[]" + "'", str14, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator16, 7, 6 };
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor28 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass7, classArray27);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.proxy.Mixin$Generator.<init>(java.io.Serializable, java.lang.reflect.GenericDeclaration, java.lang.reflect.AnnotatedElement, java.lang.reflect.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type27, type28, type30 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray31);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray41.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = classInfo45.getSuperType();
        org.mockito.asm.Type[] typeArray47 = classInfo45.getInterfaces();
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray47);
        generator5.setDelegates((java.lang.Object[]) typeArray47);
        boolean boolean50 = generator5.getAttemptLoad();
        java.lang.Class<?> wildcardClass51 = generator5.getClass();
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        org.mockito.cglib.core.ClassInfo classInfo54 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass51);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(III)I" + "'", str32, "(III)I");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str34, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str48, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str52, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(classInfo54);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.String str17 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        java.lang.String str34 = propertyDescriptor15.getDisplayName();
        java.lang.reflect.Method method35 = null;
        propertyDescriptor15.setReadMethod(method35);
        java.lang.String str37 = propertyDescriptor15.getDisplayName();
        java.lang.String str38 = propertyDescriptor15.getName();
        java.lang.String str39 = propertyDescriptor15.getShortDescription();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor15.getPropertyEditorClass();
        propertyDescriptor15.setBound(true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNull(wildcardClass40);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; displayName=ava.beans.PropertyDescriptor[name=int; shortDescription=; values={hi!=F}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("<init>", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method6);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("int");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getDescriptor();
        int int4 = type1.getSize();
        int int6 = type1.getOpcode(0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lint;" + "'", str3, "Lint;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray49 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        org.mockito.asm.Type type52 = signature51.getReturnType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(type52);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        generator5.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) typeArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray18);
        generator5.setClasses(classArray22);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator29.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy32);
        generator5.setUseCache(true);
        boolean boolean36 = generator5.getUseCache();
        boolean boolean37 = generator5.getAttemptLoad();
        generator5.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator5.getStrategy();
        generator5.setUseCache(false);
        boolean boolean44 = generator5.getAttemptLoad();
        boolean boolean45 = generator5.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(III)I" + "'", str19, "(III)I");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.Object obj10 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str13 = type12.getInternalName();
        int int14 = type12.getDimensions();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str8, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str11, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str13, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; displayName=; shortDescription=]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type31, type32, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray35);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type41, type42, type44 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray45);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        java.lang.reflect.Method method56 = null;
        propertyDescriptor52.setReadMethod(method56);
        boolean boolean58 = propertyDescriptor52.isHidden();
        propertyDescriptor52.setShortDescription("hi!");
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        java.lang.reflect.Method method72 = null;
        propertyDescriptor68.setReadMethod(method72);
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("int", method75, method76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor77.setValue("", (java.lang.Object) generator79);
        java.lang.reflect.Method method81 = null;
        propertyDescriptor77.setReadMethod(method81);
        boolean boolean83 = propertyDescriptor77.isHidden();
        propertyDescriptor77.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray86 = new java.beans.PropertyDescriptor[] { propertyDescriptor52, propertyDescriptor64, propertyDescriptor68, propertyDescriptor77 };
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray86, false, false);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray89);
        java.lang.reflect.Method[] methodArray91 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray90);
        java.beans.PropertyEditor propertyEditor92 = propertyDescriptor3.createPropertyEditor((java.lang.Object) strArray38);
        boolean boolean93 = propertyDescriptor3.isHidden();
        java.lang.Object obj95 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=V; shortDescription=()L<init>()V;; hidden; values={hi!=F}]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "int" + "'", str30, "int");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(III)I" + "'", str36, "(III)I");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray86);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(methodArray91);
        org.junit.Assert.assertNull(propertyEditor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.String str11 = propertyDescriptor3.getName();
        java.lang.Object obj13 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]");
        java.lang.Object obj15 = propertyDescriptor3.getValue("Lava.beans.PropertyDescriptor[name=;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator18, 7, 6 };
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray24);
        generator6.setClasses(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader30 = generator6.getClassLoader();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        generator36.setStyle((int) (byte) 1);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator45, 7, 6 };
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator36.setClasses(classArray51);
        java.lang.Class<?> wildcardClass54 = generator36.getClass();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        boolean boolean62 = generator60.getUseCache();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type65, type66, type68 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray69);
        generator60.setDelegates((java.lang.Object[]) classArray71);
        java.lang.reflect.Constructor constructor73 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass54, classArray71);
        org.mockito.cglib.core.ClassInfo classInfo74 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass54);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass54);
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) propertyDescriptorArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor79 = org.mockito.cglib.core.ReflectUtils.findConstructor("", classLoader30);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "int" + "'", str64, "int");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "int" + "'", str67, "int");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(III)I" + "'", str70, "(III)I");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(constructor73);
        org.junit.Assert.assertNotNull(classInfo74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str75, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str76, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        propertyDescriptor3.setDisplayName("()V");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "()V" + "'", str14, "()V");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        int int53 = methodInfo52.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        java.lang.Class<?> wildcardClass32 = generator5.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator46.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy48);
        boolean boolean50 = generator38.getAttemptLoad();
        generator38.setAttemptLoad(false);
        boolean boolean53 = generator38.getUseCache();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getReturnType("(III)Lorg.mockito.asm.Type[];");
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("int");
        java.lang.String str59 = type58.getInternalName();
        int int60 = type58.getSize();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type72, type73, type75 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray76);
        int int78 = type70.getSize();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray85 = new org.mockito.asm.Type[] { type81, type82, type84 };
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray85);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray85);
        org.mockito.cglib.core.Signature signature89 = new org.mockito.cglib.core.Signature("", type62, typeArray85);
        org.mockito.cglib.core.Signature signature90 = new org.mockito.cglib.core.Signature("V", type58, typeArray85);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray85);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray85);
        generator38.setDelegates((java.lang.Object[]) classArray92);
        java.lang.reflect.Constructor constructor94 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass32, classArray92);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "int" + "'", str59, "int");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)I" + "'", str69, "(III)I");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "int" + "'", str71, "int");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(III)I" + "'", str77, "(III)I");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "int" + "'", str83, "int");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(III)I" + "'", str86, "(III)I");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(III)I" + "'", str88, "(III)I");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(III)Lorg.mockito.asm.Type[];" + "'", str91, "(III)Lorg.mockito.asm.Type[];");
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(constructor94);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj29 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str28, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setDisplayName("java/beans/PropertyDescriptor");
        java.lang.ClassLoader classLoader20 = null;
        java.lang.ClassLoader classLoader21 = null;
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator27, 7, 6 };
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray33);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        boolean boolean40 = propertyDescriptor3.equals((java.lang.Object) mixin39);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        boolean boolean14 = propertyDescriptor3.isHidden();
        boolean boolean15 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getSuperType();
        int int15 = classInfo10.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("ZZ", "java.beans.PropertyDescriptor[name=hi!; constrained]");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setBound(false);
        boolean boolean22 = propertyDescriptor3.isExpert();
        boolean boolean23 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator15, 7, 6 };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator6.setClasses(classArray21);
        java.lang.Class<?> wildcardClass24 = generator6.getClass();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        boolean boolean32 = generator30.getUseCache();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type35, type36, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray39);
        generator30.setDelegates((java.lang.Object[]) classArray41);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass24, classArray41);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type47, type48, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray51.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        int int56 = type54.getOpcode(1);
        java.lang.String str57 = type54.getInternalName();
        org.mockito.asm.Type type58 = type54.getElementType();
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getReturnType("(III)I");
        boolean boolean63 = type60.equals((java.lang.Object) "(III)I");
        boolean boolean64 = type58.equals((java.lang.Object) type60);
        boolean boolean65 = classInfo44.equals((java.lang.Object) type58);
        org.mockito.asm.Type type66 = classInfo44.getType();
        java.lang.String str67 = type66.getClassName();
        java.lang.String str68 = type66.toString();
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("int", method70, method71);
        java.lang.reflect.Method method73 = propertyDescriptor72.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration74 = propertyDescriptor72.attributeNames();
        boolean boolean75 = propertyDescriptor72.isExpert();
        propertyDescriptor72.setBound(false);
        org.mockito.asm.Type[] typeArray80 = org.mockito.asm.Type.getArgumentTypes("(III)Lorg.mockito.asm.Type[];");
        propertyDescriptor72.setValue("(III)Lava.beans.PropertyDescriptor[name=int;", (java.lang.Object) typeArray80);
        org.mockito.cglib.core.Signature signature82 = new org.mockito.cglib.core.Signature("org.mockito.cglib.core.ReflectUtils$3", type66, typeArray80);
        org.mockito.asm.Type[] typeArray83 = signature82.getArgumentTypes();
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)I" + "'", str40, "(III)I");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)I" + "'", str52, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str57, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.mockito.asm.Type" + "'", str59, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str67, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str68, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNull(method73);
        org.junit.Assert.assertNotNull(strEnumeration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(typeArray83);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]", "org/mockito/cglib/core/DefaultGeneratorStrategy");
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(1);
        java.lang.String str12 = type9.getInternalName();
        java.lang.String str13 = type9.getClassName();
        int int14 = type9.getDimensions();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode((-1));
        boolean boolean18 = type9.equals((java.lang.Object) type15);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        java.lang.String str21 = type20.toString();
        boolean boolean22 = type15.equals((java.lang.Object) str21);
        java.lang.String str23 = type15.getDescriptor();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        java.lang.reflect.Method method28 = null;
        propertyDescriptor27.setReadMethod(method28);
        propertyDescriptor27.setExpert(false);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor27.setValue("hi!", (java.lang.Object) type33);
        java.lang.reflect.Method method35 = null;
        propertyDescriptor27.setWriteMethod(method35);
        java.lang.String str37 = propertyDescriptor27.getName();
        boolean boolean38 = propertyDescriptor27.isPreferred();
        boolean boolean39 = type15.equals((java.lang.Object) boolean38);
        java.lang.String str40 = type15.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type[]" + "'", str13, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str21, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "C" + "'", str23, "C");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "char" + "'", str40, "char");
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator30.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator22.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        generator5.setClasses(classArray38);
        boolean boolean40 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin41 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray49 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        int int52 = methodInfo50.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setDisplayName("");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V(III)Lint;", method1, method2);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setConstrained(true);
        boolean boolean8 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        java.lang.Object[] objArray46 = null;
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray46);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 9);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 21);
        org.mockito.cglib.core.Signature signature54 = methodInfo53.getSignature();
        org.mockito.cglib.core.Signature signature55 = methodInfo53.getSignature();
        java.lang.Class<?> wildcardClass56 = methodInfo53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertNotNull(signature55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo10.getInterfaces();
        org.mockito.asm.Type[] typeArray30 = classInfo10.getInterfaces();
        org.mockito.asm.Type type31 = classInfo10.getSuperType();
        java.lang.String str32 = classInfo10.toString();
        org.mockito.asm.Type[] typeArray33 = classInfo10.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) typeArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.mockito.asm.Type[]" + "'", str32, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray33);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        propertyDescriptor3.setDisplayName("()V");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("ntint(III)Lorg.mockito.asm.Type[]");
        java.lang.String str20 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        boolean boolean15 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/ReflectUtils$3;", "java/beans/PropertyDescriptor(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.String str13 = propertyDescriptor3.getName();
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        boolean boolean18 = propertyDescriptor3.isHidden();
        boolean boolean19 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method20 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(method20);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setName("Lint;");
        propertyDescriptor3.setShortDescription("()C");
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]", "(III)[Lorg/mockito/asm/Type;");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]" + "'", str3, "java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]" + "'", str4, "java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]");
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=int; bound]");
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setName("org.mockito.asm.Type");
        propertyDescriptor3.setName("V(III)Lint;");
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("int");
        java.lang.String str17 = type16.getInternalName();
        java.lang.String str18 = type16.getDescriptor();
        int int19 = type16.getSize();
        java.lang.String str20 = type16.getDescriptor();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str20);
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method25 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method26 = null;
        propertyDescriptor3.setReadMethod(method26);
        propertyDescriptor3.setDisplayName("org/mockito/cglib/core/ReflectUtils$4");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(III)I; displayName=(III)LIII)Lorg/mockito/asm/Type;; preferred]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "V(III)Lint;" + "'", str14, "V(III)Lint;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lint;" + "'", str18, "Lint;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lint;" + "'", str20, "Lint;");
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method25);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        java.lang.Object[] objArray14 = new java.lang.Object[] { generator9, 7, 6 };
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        boolean boolean17 = signature2.equals((java.lang.Object) classArray15);
        java.lang.String str18 = signature2.toString();
        org.mockito.asm.Type[] typeArray19 = signature2.getArgumentTypes();
        java.lang.String str20 = signature2.toString();
        java.lang.String str21 = signature2.getName();
        java.lang.String str22 = signature2.toString();
        java.lang.String str23 = signature2.getName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int(III)I" + "'", str18, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int(III)I" + "'", str20, "int(III)I");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int(III)I" + "'", str22, "int(III)I");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.String str9 = propertyDescriptor3.getShortDescription();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.String str9 = propertyDescriptor3.getName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray48 = signature47.getArgumentTypes();
        java.lang.String str49 = signature47.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<init>()V" + "'", str49, "<init>()V");
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        generator6.setUseCache(true);
        boolean boolean12 = generator6.getUseCache();
        generator6.setUseCache(false);
        boolean boolean15 = generator6.getUseCache();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type31, type32, type34 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray35);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray35);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray35);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray35);
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        generator6.setClasses(classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("int", method61, method62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor63.setValue("", (java.lang.Object) generator65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator65.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator57.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.core.Signature signature73 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type74 = signature73.getReturnType();
        java.lang.reflect.Method method76 = null;
        java.lang.reflect.Method method77 = null;
        java.beans.PropertyDescriptor propertyDescriptor78 = new java.beans.PropertyDescriptor("int", method76, method77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor78.setValue("", (java.lang.Object) generator80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator80.getStrategy();
        java.lang.Object[] objArray85 = new java.lang.Object[] { generator80, 7, 6 };
        java.lang.Class[] classArray86 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        boolean boolean88 = signature73.equals((java.lang.Object) classArray86);
        java.lang.String str89 = signature73.getDescriptor();
        org.mockito.asm.Type[] typeArray90 = signature73.getArgumentTypes();
        generator48.setDelegates((java.lang.Object[]) typeArray90);
        generator6.setDelegates((java.lang.Object[]) typeArray90);
        java.lang.ClassLoader classLoader93 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor94 = org.mockito.cglib.core.ReflectUtils.findConstructor("L$java/beans/PropertyDescriptor$$MixinByCGLIB$$3af0b23a;", classLoader93);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)I" + "'", str25, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "int" + "'", str30, "int");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(III)I" + "'", str36, "(III)I");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str38, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str39, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(III)I" + "'", str89, "(III)I");
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(classLoader93);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator5.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        generator5.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator5.getStrategy();
        java.lang.Object[] objArray16 = null;
        generator5.setDelegates(objArray16);
        generator5.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        java.lang.String str22 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator14.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator37, 7, 6 };
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        boolean boolean45 = signature30.equals((java.lang.Object) classArray43);
        java.lang.String str46 = signature30.getDescriptor();
        org.mockito.asm.Type[] typeArray47 = signature30.getArgumentTypes();
        generator5.setDelegates((java.lang.Object[]) typeArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator5.getNamingPolicy();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        generator56.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator56.getStrategy();
        generator5.setStrategy(generatorStrategy60);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("int", method63, method64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor65.setValue("", (java.lang.Object) generator67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        boolean boolean70 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator67.getStrategy();
        generator5.setStrategy(generatorStrategy71);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.Object obj24 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str25, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classInfo28);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=int; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        int int59 = methodInfo45.getModifiers();
        org.mockito.asm.Type[] typeArray60 = methodInfo45.getExceptionTypes();
        java.lang.String str61 = methodInfo45.toString();
        boolean boolean63 = methodInfo45.equals((java.lang.Object) "Z");
        org.mockito.cglib.core.Signature signature64 = methodInfo45.getSignature();
        java.lang.String str65 = signature64.getName();
        java.lang.String str66 = signature64.getName();
        java.lang.String str67 = signature64.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<init>()V" + "'", str61, "<init>()V");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "<init>" + "'", str65, "<init>");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<init>" + "'", str66, "<init>");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<init>()V" + "'", str67, "<init>()V");
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        java.lang.ClassLoader classLoader32 = null;
        generator5.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass35 = generator5.getClass();
        java.lang.Object obj36 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass35);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj23 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=int; bound]");
        propertyDescriptor3.setName("C");
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setValue("ava.beans.PropertyDescriptor[name=hi!", (java.lang.Object) 25);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator5, 7, 6 };
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor18.setReadMethod(method22);
        boolean boolean24 = propertyDescriptor18.isHidden();
        propertyDescriptor18.setShortDescription("hi!");
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        java.lang.reflect.Method method38 = null;
        propertyDescriptor34.setReadMethod(method38);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        java.lang.reflect.Method method47 = null;
        propertyDescriptor43.setReadMethod(method47);
        boolean boolean49 = propertyDescriptor43.isHidden();
        propertyDescriptor43.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] { propertyDescriptor18, propertyDescriptor30, propertyDescriptor34, propertyDescriptor43 };
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, false, false);
        java.lang.Class<?> wildcardClass56 = propertyDescriptorArray52.getClass();
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass56);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, true);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin14.newInstance((java.lang.Object[]) propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str57, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str58, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Z");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("int", method3, method4);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor5.setValue("", (java.lang.Object) generator7);
        java.lang.Class<?> wildcardClass9 = generator7.getClass();
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, false, false);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray11);
        boolean boolean16 = type1.equals((java.lang.Object) propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str10, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator19.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator19.getNamingPolicy();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        generator28.setStyle((int) (byte) 1);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator37.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator37.setClassLoader(classLoader42);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator49.setStrategy(generatorStrategy59);
        generator37.setStrategy(generatorStrategy59);
        generator28.setStrategy(generatorStrategy59);
        generator19.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator19.getStrategy();
        generator5.setStrategy(generatorStrategy64);
        generator5.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader68 = generator5.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy64);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("int(III)I");
        propertyDescriptor3.setDisplayName("org/mockito/cglib/proxy/Mixin$Generator");
        propertyDescriptor3.setName("org/mockito/asm/Type");
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(false);
        boolean boolean22 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        boolean boolean16 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        propertyDescriptor3.setPreferred(false);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=int; bound]]");
        propertyDescriptor3.setValue("(III)Lorg/mockito/cglib/proxy/Mixin$Generator;", (java.lang.Object) type26);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type26);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("Ljava/lang/Cloneable");
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Ljava/lang/Cloneable" + "'", str14, "Ljava/lang/Cloneable");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; shortDescription=; propertyEditorClass=class java.util.Collections$EmptyEnumeration]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getType();
        org.mockito.asm.Type[] typeArray15 = classInfo10.getInterfaces();
        int int16 = classInfo10.getModifiers();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type19, type20, type22 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str28 = classInfo27.toString();
        org.mockito.asm.Type type29 = classInfo27.getSuperType();
        org.mockito.asm.Type type30 = classInfo27.getSuperType();
        org.mockito.asm.Type[] typeArray31 = classInfo27.getInterfaces();
        org.mockito.asm.Type type32 = classInfo27.getSuperType();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        java.lang.reflect.Method method40 = null;
        propertyDescriptor36.setReadMethod(method40);
        boolean boolean42 = propertyDescriptor36.isHidden();
        propertyDescriptor36.setShortDescription("hi!");
        java.lang.String str45 = propertyDescriptor36.getShortDescription();
        propertyDescriptor36.setConstrained(true);
        propertyDescriptor36.setValue("boolean", (java.lang.Object) 10.0d);
        propertyDescriptor36.setName("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        boolean boolean53 = classInfo27.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        int int54 = classInfo27.getModifiers();
        int int55 = classInfo27.getModifiers();
        boolean boolean56 = classInfo10.equals((java.lang.Object) classInfo27);
        int int57 = classInfo10.getModifiers();
        org.mockito.asm.Type type58 = classInfo10.getSuperType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1041 + "'", int16 == 1041);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)I" + "'", str24, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.mockito.asm.Type[]" + "'", str28, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1041 + "'", int54 == 1041);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1041 + "'", int55 == 1041);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1041 + "'", int57 == 1041);
        org.junit.Assert.assertNotNull(type58);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setDisplayName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; displayName=(III)F; expert; values={hi!=F}; constrained]");
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        org.mockito.asm.Type type14 = classInfo12.getType();
        int int15 = classInfo12.getModifiers();
        java.lang.String str16 = classInfo12.toString();
        org.mockito.asm.Type type17 = classInfo12.getType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type[]" + "'", str16, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type17);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int13 = type11.getOpcode(1041);
        java.lang.String str14 = type11.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1045 + "'", int13 == 1045);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java/lang/Object" + "'", str14, "java/lang/Object");
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        propertyDescriptor3.setConstrained(true);
        boolean boolean18 = propertyDescriptor3.isHidden();
        java.lang.String str19 = propertyDescriptor3.getName();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(III)V", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setReadMethod(method5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(III)V" + "'", str4, "(III)V");
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Ljava.beans.PropertyDescriptor[name=(III)I; displayName=()L<init>()V;];");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->Ljava.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(1);
        java.lang.String str12 = type9.getInternalName();
        java.lang.String str13 = type9.getClassName();
        java.lang.String str14 = type9.getDescriptor();
        org.mockito.asm.Type type15 = type9.getElementType();
        int int16 = type9.getSize();
        org.mockito.asm.Type type17 = type9.getElementType();
        org.mockito.asm.Type type18 = type17.getElementType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = classInfo29.getSuperType();
        int int31 = classInfo29.getModifiers();
        org.mockito.asm.Type type32 = classInfo29.getType();
        org.mockito.asm.Type type33 = classInfo29.getType();
        org.mockito.asm.Type[] typeArray34 = classInfo29.getInterfaces();
        org.mockito.asm.Type type35 = classInfo29.getSuperType();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        generator41.setStyle((int) (byte) 1);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator50, 7, 6 };
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator41.setClasses(classArray56);
        java.lang.Class<?> wildcardClass59 = generator41.getClass();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("int", method61, method62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor63.setValue("", (java.lang.Object) generator65);
        boolean boolean67 = generator65.getUseCache();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type70, type71, type73 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray74);
        generator65.setDelegates((java.lang.Object[]) classArray76);
        java.lang.reflect.Constructor constructor78 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass59, classArray76);
        org.mockito.asm.Type[] typeArray79 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor78);
        org.mockito.asm.Type[] typeArray80 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor78);
        java.lang.String str81 = org.mockito.asm.Type.getConstructorDescriptor(constructor78);
        org.mockito.cglib.core.MethodInfo methodInfo82 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78);
        java.lang.String str83 = org.mockito.asm.Type.getConstructorDescriptor(constructor78);
        org.mockito.cglib.core.MethodInfo methodInfo85 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78, (int) (short) 1);
        org.mockito.cglib.core.MethodInfo methodInfo87 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78, (int) (short) 1);
        org.mockito.asm.Type[] typeArray88 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor78);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray88);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray88);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type[]" + "'", str13, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str14, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)I" + "'", str26, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1041 + "'", int31 == 1041);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(III)I" + "'", str75, "(III)I");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(constructor78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "()V" + "'", str81, "()V");
        org.junit.Assert.assertNotNull(methodInfo82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "()V" + "'", str83, "()V");
        org.junit.Assert.assertNotNull(methodInfo85);
        org.junit.Assert.assertNotNull(methodInfo87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "()Ljava/lang/Object;" + "'", str89, "()Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str90, "()Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo61.getClassInfo();
        org.mockito.asm.Type[] typeArray63 = methodInfo61.getExceptionTypes();
        java.lang.String str64 = methodInfo61.toString();
        org.mockito.asm.Type[] typeArray65 = methodInfo61.getExceptionTypes();
        int int66 = methodInfo61.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<init>()V" + "'", str64, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray49 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()V" + "'", str50, "()V");
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("[Lorg/mockito/asm/Type;", "()V");
        java.lang.String str3 = signature2.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type9 };
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        int int15 = type14.getSort();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor19.setReadMethod(method20);
        java.lang.String str22 = propertyDescriptor19.getName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type26, type27, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        propertyDescriptor19.setValue("I", (java.lang.Object) propertyDescriptorArray33);
        propertyDescriptor19.setHidden(false);
        boolean boolean37 = type14.equals((java.lang.Object) propertyDescriptor19);
        int int38 = type14.getDimensions();
        org.mockito.asm.Type type39 = type14.getElementType();
        boolean boolean40 = signature2.equals((java.lang.Object) type39);
        int int41 = type39.getDimensions();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        generator47.setStyle((int) (byte) 1);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator56.getStrategy();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator56, 7, 6 };
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator47.setClasses(classArray62);
        java.lang.Class<?> wildcardClass65 = generator47.getClass();
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("int", method67, method68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor69.setValue("", (java.lang.Object) generator71);
        boolean boolean73 = generator71.getUseCache();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type76, type77, type79 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray80);
        generator71.setDelegates((java.lang.Object[]) classArray82);
        java.lang.reflect.Constructor constructor84 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass65, classArray82);
        org.mockito.asm.Type[] typeArray85 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor84);
        org.mockito.cglib.core.MethodInfo methodInfo87 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor84, (int) (short) 1);
        org.mockito.cglib.core.Signature signature88 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor84);
        java.lang.String str89 = org.mockito.asm.Type.getConstructorDescriptor(constructor84);
        org.mockito.cglib.core.Signature signature90 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor84);
        java.lang.String str91 = org.mockito.asm.Type.getConstructorDescriptor(constructor84);
        org.mockito.cglib.core.MethodInfo methodInfo92 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor84);
        java.lang.String str93 = org.mockito.asm.Type.getConstructorDescriptor(constructor84);
        org.mockito.asm.Type[] typeArray94 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor84);
        java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray94);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "()V" + "'", str3, "()V");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(III)I" + "'", str11, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(III)I" + "'", str31, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "int" + "'", str75, "int");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "int" + "'", str78, "int");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(III)I" + "'", str81, "(III)I");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(constructor84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(methodInfo87);
        org.junit.Assert.assertNotNull(signature88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "()V" + "'", str89, "()V");
        org.junit.Assert.assertNotNull(signature90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "()V" + "'", str91, "()V");
        org.junit.Assert.assertNotNull(methodInfo92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "()V" + "'", str93, "()V");
        org.junit.Assert.assertNotNull(typeArray94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str95, "()Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        generator6.setUseCache(true);
        boolean boolean12 = generator6.getUseCache();
        generator6.setUseCache(false);
        boolean boolean15 = generator6.getUseCache();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        generator29.setStyle((int) (byte) 1);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator38, 7, 6 };
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator29.setClasses(classArray44);
        generator21.setClasses(classArray44);
        java.lang.ClassLoader classLoader48 = null;
        generator21.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = generator21.getClassLoader();
        generator6.setClassLoader(classLoader50);
        generator6.setAttemptLoad(false);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        java.lang.Object[] objArray64 = new java.lang.Object[] { generator59, 7, 6 };
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        generator6.setClasses(classArray67);
        java.lang.ClassLoader classLoader69 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor70 = org.mockito.cglib.core.ReflectUtils.findConstructor("[Ljava/lang/Class;", classLoader69);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator19.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator19.getNamingPolicy();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        generator28.setStyle((int) (byte) 1);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator37.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator37.setClassLoader(classLoader42);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        generator49.setStrategy(generatorStrategy59);
        generator37.setStrategy(generatorStrategy59);
        generator28.setStrategy(generatorStrategy59);
        generator19.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator19.getStrategy();
        generator5.setStrategy(generatorStrategy64);
        generator5.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator5.getNamingPolicy();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type71, type72, type74 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray75);
        java.lang.Class<?> wildcardClass77 = typeArray75.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass77);
        org.mockito.cglib.core.ClassInfo classInfo79 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass77);
        java.lang.String str80 = classInfo79.toString();
        org.mockito.asm.Type type81 = classInfo79.getSuperType();
        org.mockito.asm.Type type82 = classInfo79.getSuperType();
        org.mockito.asm.Type[] typeArray83 = classInfo79.getInterfaces();
        generator5.setDelegates((java.lang.Object[]) typeArray83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator5.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "int" + "'", str70, "int");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "int" + "'", str73, "int");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(III)I" + "'", str76, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(classInfo79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.mockito.asm.Type[]" + "'", str80, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.Class[] classArray43 = null;
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        generator49.setStyle((int) (byte) 1);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator58.getStrategy();
        java.lang.Object[] objArray63 = new java.lang.Object[] { generator58, 7, 6 };
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator49.setClasses(classArray64);
        java.lang.Class<?> wildcardClass67 = generator49.getClass();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("int", method69, method70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor71.setValue("", (java.lang.Object) generator73);
        boolean boolean75 = generator73.getUseCache();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type78, type79, type81 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray82);
        generator73.setDelegates((java.lang.Object[]) classArray84);
        java.lang.reflect.Constructor constructor86 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass67, classArray84);
        org.mockito.asm.Type[] typeArray87 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray88 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray89 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.cglib.core.MethodInfo methodInfo90 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray91 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray92 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray92);
        java.lang.Object obj94 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23, classArray43, (java.lang.Object[]) typeArray92);
        java.util.List list95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list96 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass23, list95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)I" + "'", str83, "(III)I");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(constructor86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(methodInfo90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.Class<?> wildcardClass21 = generator18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(false);
        generator23.setUseCache(false);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        boolean boolean35 = generator33.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        generator33.setUseCache(false);
        generator33.setAttemptLoad(false);
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        generator47.setStyle((int) (byte) 1);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator56.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy58);
        generator33.setNamingPolicy(namingPolicy58);
        generator23.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray62 = new java.lang.Class[] {};
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        generator23.setClasses(classArray62);
        java.lang.reflect.Constructor constructor65 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray62);
        java.beans.PropertyEditor propertyEditor66 = propertyDescriptor3.createPropertyEditor((java.lang.Object) constructor65);
        org.mockito.cglib.core.MethodInfo methodInfo67 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65);
        org.mockito.cglib.core.Signature signature68 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor65);
        java.lang.String str69 = signature68.getName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(constructor65);
        org.junit.Assert.assertNull(propertyEditor66);
        org.junit.Assert.assertNotNull(methodInfo67);
        org.junit.Assert.assertNotNull(signature68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "<init>" + "'", str69, "<init>");
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type29 = classInfo28.getSuperType();
        org.mockito.asm.Type type30 = classInfo28.getSuperType();
        java.lang.String str31 = type30.getInternalName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/cglib/core/AbstractClassGenerator" + "'", str31, "org/mockito/cglib/core/AbstractClassGenerator");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        boolean boolean12 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strEnumeration14);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator5.getNamingPolicy();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator24.getNamingPolicy();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray33);
        generator24.setClasses(classArray35);
        generator24.setAttemptLoad(false);
        generator24.setUseCache(true);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        generator54.setStyle((int) (byte) 1);
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("int", method59, method60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor61.setValue("", (java.lang.Object) generator63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        java.lang.Object[] objArray68 = new java.lang.Object[] { generator63, 7, 6 };
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator54.setClasses(classArray69);
        generator46.setClasses(classArray69);
        java.lang.ClassLoader classLoader73 = null;
        generator46.setClassLoader(classLoader73);
        java.lang.ClassLoader classLoader75 = generator46.getClassLoader();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("int", method77, method78);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor79.setValue("", (java.lang.Object) generator81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        java.lang.Object[] objArray86 = new java.lang.Object[] { generator81, 7, 6 };
        java.lang.Class[] classArray87 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        int int89 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray87);
        generator24.setClassLoader(classLoader75);
        generator5.setClassLoader(classLoader75);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator5.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(1);
        java.lang.String str12 = type9.getInternalName();
        org.mockito.asm.Type type13 = type9.getElementType();
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getReturnType("(III)I");
        boolean boolean18 = type15.equals((java.lang.Object) "(III)I");
        boolean boolean19 = type13.equals((java.lang.Object) type15);
        java.lang.ClassLoader classLoader20 = null;
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray22);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.mockito.asm.Type" + "'", str14, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)Lorg/mockito/asm/Type;" + "'", str24, "(III)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(true);
        boolean boolean15 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray41);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 11);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str25, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        int int22 = type21.getSort();
        int int23 = type21.getDimensions();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type26, type27, type29 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type40 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray41);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray41);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray41);
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray41);
        propertyDescriptor3.setShortDescription("(III)Lorg.mockito.asm.Type[];");
        java.lang.reflect.Method method49 = null;
        propertyDescriptor3.setReadMethod(method49);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method53 = null;
        propertyDescriptor3.setReadMethod(method53);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setBound(false);
        java.lang.String str59 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(III)I" + "'", str31, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)I" + "'", str42, "(III)I");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str44, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str45, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)I" + "'", str59, "(III)I");
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj16 = propertyDescriptor3.getValue("char");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(III)I]");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass35);
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        boolean boolean43 = classInfo25.equals((java.lang.Object) type42);
        java.lang.String str44 = type42.getDescriptor();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str40, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str44, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type9, type10, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray13);
        generator5.setClasses(classArray15);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, true, true);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray30);
        generator5.setDelegates((java.lang.Object[]) strArray17);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray47);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = generator54.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, true);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, true);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) methodArray65);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) strArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)I" + "'", str25, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(methodArray67);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 5);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str52 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature55 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "()V" + "'", str52, "()V");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "()V" + "'", str54, "()V");
        org.junit.Assert.assertNotNull(signature55);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = methodInfo46.getExceptionTypes();
        org.mockito.cglib.core.Signature signature48 = methodInfo46.getSignature();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        boolean boolean58 = generator54.getUseCache();
        boolean boolean59 = methodInfo46.equals((java.lang.Object) generator54);
        org.mockito.cglib.core.Signature signature60 = methodInfo46.getSignature();
        org.mockito.cglib.core.Signature signature61 = methodInfo46.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(signature60);
        org.junit.Assert.assertNotNull(signature61);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature50 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str51 = signature50.getName();
        java.lang.String str52 = signature50.getName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>" + "'", str51, "<init>");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>" + "'", str52, "<init>");
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("int", method3, method4);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor5.setValue("", (java.lang.Object) generator7);
        generator7.setStyle((int) (byte) 1);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator16, 7, 6 };
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator7.setClasses(classArray22);
        java.lang.Class<?> wildcardClass25 = generator7.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        boolean boolean33 = generator31.getUseCache();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray40);
        generator31.setDelegates((java.lang.Object[]) classArray42);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass25, classArray42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor44);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44);
        boolean boolean47 = type1.equals((java.lang.Object) methodInfo46);
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        int int60 = type59.getSort();
        int int61 = type59.getDimensions();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArray68.getClass();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type75, type76, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray79);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray79);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray79);
        java.lang.Class[] classArray84 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray79);
        java.lang.Class[] classArray85 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray84);
        boolean boolean86 = classInfo48.equals((java.lang.Object) classArray85);
        java.lang.String[] strArray87 = org.mockito.cglib.core.ReflectUtils.getNames(classArray85);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)I" + "'", str69, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(III)I" + "'", str80, "(III)I");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str82, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str83, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=int; values={hi!=F}]]Lva/lang/Object;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.String str9 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(III)I" + "'", str9, "(III)I");
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        int int12 = type11.getSort();
        int int13 = type11.getSort();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator28, 7, 6 };
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator19.setClasses(classArray34);
        java.lang.Class<?> wildcardClass37 = generator19.getClass();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        boolean boolean45 = generator43.getUseCache();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        java.lang.reflect.Constructor constructor56 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass37, classArray54);
        java.lang.String str57 = org.mockito.asm.Type.getConstructorDescriptor(constructor56);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor56, 3);
        org.mockito.cglib.core.Signature signature60 = methodInfo59.getSignature();
        org.mockito.asm.Type[] typeArray61 = methodInfo59.getExceptionTypes();
        org.mockito.cglib.core.Signature signature62 = new org.mockito.cglib.core.Signature("boolean", type11, typeArray61);
        org.mockito.asm.Type type63 = signature62.getReturnType();
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("int", method65, method66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor67.setValue("", (java.lang.Object) generator69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator69.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator69.getNamingPolicy();
        generator69.setUseCache(true);
        java.lang.ClassLoader classLoader75 = null;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type78, type79, type81 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) typeArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray82);
        generator69.setClasses(classArray86);
        boolean boolean88 = type63.equals((java.lang.Object) classArray86);
        java.lang.String str89 = type63.getClassName();
        int int90 = type63.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(constructor56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "()V" + "'", str57, "()V");
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(signature60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)I" + "'", str83, "(III)I");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.mockito.asm.Type[]" + "'", str89, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 6);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature52 = methodInfo51.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setShortDescription("");
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setName("Lint;");
        propertyDescriptor3.setShortDescription("()C");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getClass();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        boolean boolean16 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setDisplayName("java.lang.Object");
        java.lang.reflect.Method method19 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(method19);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.toString();
        java.lang.String str7 = signature2.getDescriptor();
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, true, true);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray21);
        java.lang.Class<?> wildcardClass23 = methodArray22.getClass();
        boolean boolean24 = signature2.equals((java.lang.Object) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        org.mockito.asm.Type type28 = classInfo25.getType();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int(III)I" + "'", str6, "int(III)I");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.lang.reflect.Method[]" + "'", str26, "java.lang.reflect.Method[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("()V");
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=V(III)Lint;; values={<init>()V=Lorg/mockito/cglib/proxy/Mixin$Generator;}]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertNotNull(strEnumeration18);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        java.lang.String str4 = signature2.toString();
        org.mockito.asm.Type[] typeArray5 = signature2.getArgumentTypes();
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int(III)I" + "'", str4, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray5);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        int int12 = type10.getDimensions();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("<init>()V");
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator29, 7, 6 };
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator20.setClasses(classArray35);
        java.lang.Class<?> wildcardClass38 = generator20.getClass();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor42.setValue("", (java.lang.Object) generator44);
        boolean boolean46 = generator44.getUseCache();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray53);
        generator44.setDelegates((java.lang.Object[]) classArray55);
        java.lang.reflect.Constructor constructor57 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass38, classArray55);
        java.lang.String str58 = org.mockito.asm.Type.getConstructorDescriptor(constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        org.mockito.asm.Type[] typeArray60 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray60);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray60);
        org.mockito.asm.Type type63 = type10.getElementType();
        int int65 = type10.getOpcode(0);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(constructor57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "()V" + "'", str58, "()V");
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "()L<init>()V;" + "'", str61, "()L<init>()V;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "()[Lorg/mockito/asm/Type;" + "'", str62, "()[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Object obj12 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]");
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("Lava.beans.PropertyDescriptor[name=(III)I;");
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(III)I" + "'", str10, "(III)I");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(III)I; displayName=(III)LIII)Lorg/mockito/asm/Type;; preferred]", method1, method2);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        generator16.setStyle((int) (byte) 1);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator25, 7, 6 };
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        java.lang.Class<?> wildcardClass34 = generator16.getClass();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        boolean boolean42 = generator40.getUseCache();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray49);
        generator40.setDelegates((java.lang.Object[]) classArray51);
        java.lang.reflect.Constructor constructor53 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass34, classArray51);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor53);
        boolean boolean55 = classInfo10.equals((java.lang.Object) constructor53);
        org.mockito.asm.Type type56 = classInfo10.getType();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str60 = signature59.getDescriptor();
        java.lang.String str61 = signature59.getDescriptor();
        java.lang.String str62 = signature59.toString();
        org.mockito.asm.Type[] typeArray63 = signature59.getArgumentTypes();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.ClassLoader classLoader65 = null;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type68, type69, type71 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) typeArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray72);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray72);
        boolean boolean78 = signature59.equals((java.lang.Object) typeArray72);
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("", type56, typeArray72);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(III)I" + "'", str50, "(III)I");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(constructor53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)I" + "'", str60, "(III)I");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(III)I" + "'", str61, "(III)I");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int(III)I" + "'", str62, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "int" + "'", str67, "int");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "int" + "'", str70, "int");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(III)I" + "'", str73, "(III)I");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(III)F" + "'", str77, "(III)F");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) ' ');
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo49.getClassInfo();
        org.mockito.asm.Type type51 = classInfo50.getSuperType();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type57 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray58.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        java.lang.String str63 = classInfo62.toString();
        org.mockito.asm.Type type64 = classInfo62.getSuperType();
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.String str68 = signature67.toString();
        boolean boolean69 = classInfo62.equals((java.lang.Object) signature67);
        java.lang.String str70 = classInfo62.toString();
        java.lang.String str71 = classInfo62.toString();
        org.mockito.asm.Type[] typeArray72 = classInfo62.getInterfaces();
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray72);
        int int74 = type51.getSize();
        java.lang.String str75 = type51.getInternalName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)I" + "'", str59, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.mockito.asm.Type[]" + "'", str63, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "intint" + "'", str68, "intint");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.Type[]" + "'", str70, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.Type[]" + "'", str71, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;" + "'", str73, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/cglib/core/AbstractClassGenerator;");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/cglib/core/AbstractClassGenerator" + "'", str75, "org/mockito/cglib/core/AbstractClassGenerator");
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj15 = propertyDescriptor3.getValue("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; bound]");
        propertyDescriptor3.setShortDescription("ava.beans.PropertyDescriptor[name=<init>");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lorg/mockito/cglib/core/ReflectUtils$3;(III)Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        boolean boolean5 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lorg/mockito/cglib/core/AbstractClassGenerator;", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator55.getNamingPolicy();
        generator55.setUseCache(true);
        boolean boolean60 = methodInfo48.equals((java.lang.Object) true);
        org.mockito.cglib.core.ClassInfo classInfo61 = methodInfo48.getClassInfo();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArray68.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass70);
        org.mockito.cglib.core.ClassInfo classInfo72 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type73 = classInfo72.getSuperType();
        int int74 = classInfo72.getModifiers();
        org.mockito.asm.Type type75 = classInfo72.getType();
        org.mockito.asm.Type type76 = classInfo72.getType();
        java.lang.String str77 = type76.getDescriptor();
        int int78 = type76.getSize();
        boolean boolean79 = methodInfo48.equals((java.lang.Object) type76);
        int int80 = type76.getDimensions();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)I" + "'", str69, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(classInfo72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1041 + "'", int74 == 1041);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str77, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator21.getNamingPolicy();
        boolean boolean24 = generator21.getUseCache();
        generator21.setAttemptLoad(false);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray39);
        generator21.setClasses(classArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator21.getStrategy();
        generator5.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator5.getNamingPolicy();
        boolean boolean45 = generator5.getAttemptLoad();
        boolean boolean46 = generator5.getUseCache();
        boolean boolean47 = generator5.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        propertyDescriptor3.setDisplayName("()V");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        boolean boolean18 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "()V" + "'", str14, "()V");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator28, 7, 6 };
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator19.setClasses(classArray34);
        java.lang.Class<?> wildcardClass37 = generator19.getClass();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        boolean boolean45 = generator43.getUseCache();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        generator43.setDelegates((java.lang.Object[]) classArray54);
        java.lang.reflect.Constructor constructor56 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass37, classArray54);
        org.mockito.asm.Type[] typeArray57 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor56);
        java.lang.String str58 = org.mockito.asm.Type.getConstructorDescriptor(constructor56);
        org.mockito.cglib.core.MethodInfo methodInfo60 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor56, (int) (byte) 1);
        org.mockito.asm.Type[] typeArray61 = methodInfo60.getExceptionTypes();
        org.mockito.asm.Type[] typeArray62 = methodInfo60.getExceptionTypes();
        org.mockito.cglib.core.Signature signature63 = methodInfo60.getSignature();
        org.mockito.asm.Type type64 = signature63.getReturnType();
        org.mockito.asm.Type type65 = signature63.getReturnType();
        propertyDescriptor3.setValue("org.mockito.asm.Type", (java.lang.Object) signature63);
        java.lang.String str67 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(constructor56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "()V" + "'", str58, "()V");
        org.junit.Assert.assertNotNull(methodInfo60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(signature63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "int" + "'", str67, "int");
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        org.mockito.asm.Type type29 = classInfo25.getType();
        int int31 = type29.getOpcode(1061);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1065 + "'", int31 == 1065);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        java.lang.ClassLoader classLoader18 = null;
        generator5.setClassLoader(classLoader18);
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setDisplayName("[Lorg/mockito/asm/Type;");
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setValue("boolean", (java.lang.Object) 10.0d);
        boolean boolean18 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setDisplayName("()Lint;");
        propertyDescriptor3.setShortDescription("");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor19.setReadMethod(method23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor28.setReadMethod(method32);
        boolean boolean34 = propertyDescriptor28.isHidden();
        propertyDescriptor28.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] { propertyDescriptor3, propertyDescriptor15, propertyDescriptor19, propertyDescriptor28 };
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.lang.Class<?> wildcardClass41 = propertyDescriptorArray37.getClass();
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        java.util.List list45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list46 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass41, list45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str42, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classInfo44);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.Object obj29 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str30, "org/mockito/cglib/proxy/Mixin$Generator");
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.Class[] classArray43 = null;
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        generator49.setStyle((int) (byte) 1);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator58.getStrategy();
        java.lang.Object[] objArray63 = new java.lang.Object[] { generator58, 7, 6 };
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator49.setClasses(classArray64);
        java.lang.Class<?> wildcardClass67 = generator49.getClass();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("int", method69, method70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor71.setValue("", (java.lang.Object) generator73);
        boolean boolean75 = generator73.getUseCache();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type78, type79, type81 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray82);
        generator73.setDelegates((java.lang.Object[]) classArray84);
        java.lang.reflect.Constructor constructor86 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass67, classArray84);
        org.mockito.asm.Type[] typeArray87 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray88 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray89 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.cglib.core.MethodInfo methodInfo90 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray91 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        org.mockito.asm.Type[] typeArray92 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor86);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray92);
        java.lang.Object obj94 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23, classArray43, (java.lang.Object[]) typeArray92);
        java.lang.Object obj95 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)I" + "'", str83, "(III)I");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(constructor86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(methodInfo90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertNotNull(obj95);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = classInfo10.getType();
        java.lang.String str12 = type11.toString();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        generator18.setStyle((int) (byte) 1);
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator27, 7, 6 };
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator18.setClasses(classArray33);
        java.lang.Class<?> wildcardClass36 = generator18.getClass();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        boolean boolean44 = generator42.getUseCache();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type47, type48, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray51);
        generator42.setDelegates((java.lang.Object[]) classArray53);
        java.lang.reflect.Constructor constructor55 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass36, classArray53);
        org.mockito.asm.Type[] typeArray56 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor55);
        org.mockito.asm.Type[] typeArray57 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor55);
        java.lang.String str58 = org.mockito.asm.Type.getConstructorDescriptor(constructor55);
        org.mockito.asm.Type[] typeArray59 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor55);
        org.mockito.asm.Type[] typeArray60 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor55);
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("org.mockito.asm.Type", type11, typeArray60);
        java.lang.String str62 = type11.getInternalName();
        org.mockito.asm.Type type63 = type11.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)I" + "'", str52, "(III)I");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(constructor55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "()V" + "'", str58, "()V");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str62, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type63);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type33, type34, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray37);
        generator5.setDelegates((java.lang.Object[]) typeArray37);
        boolean boolean44 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator5.getStrategy();
        generator5.setAttemptLoad(true);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("int", method57, method58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor59.setValue("", (java.lang.Object) generator61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator61.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy63);
        generator53.setUseCache(true);
        generator53.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator53.getStrategy();
        generator5.setStrategy(generatorStrategy69);
        boolean boolean71 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin72 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)I" + "'", str38, "(III)I");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str40, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str41, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        propertyDescriptor16.setExpert(true);
        java.lang.String str22 = propertyDescriptor16.getDisplayName();
        boolean boolean23 = propertyDescriptor16.isExpert();
        propertyDescriptor16.setPreferred(true);
        java.lang.reflect.Method method26 = null;
        propertyDescriptor16.setReadMethod(method26);
        java.lang.reflect.Method method28 = propertyDescriptor16.getWriteMethod();
        java.lang.reflect.Method method29 = null;
        propertyDescriptor16.setReadMethod(method29);
        boolean boolean31 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor16);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.Signature signature61 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60, 1053);
        org.mockito.asm.Type[] typeArray64 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor60);
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator70.getNamingPolicy();
        boolean boolean73 = generator70.getUseCache();
        generator70.setAttemptLoad(false);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type78, type79, type81 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray82);
        java.lang.Class<?> wildcardClass84 = typeArray82.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass84);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray85, true, true);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray88);
        generator70.setClasses(classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        java.lang.String[] strArray93 = org.mockito.cglib.core.ReflectUtils.getNames(classArray91);
        java.lang.Object obj94 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor60, (java.lang.Object[]) classArray91);
        org.mockito.asm.Type[] typeArray95 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor60);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(signature61);
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(III)I" + "'", str83, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertNotNull(typeArray95);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setPreferred(false);
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor6.setReadMethod(method7);
        propertyDescriptor6.setExpert(false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor6.setValue("hi!", (java.lang.Object) type12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor6.setWriteMethod(method14);
        boolean boolean16 = propertyDescriptor6.isHidden();
        boolean boolean17 = propertyDescriptor6.isExpert();
        boolean boolean18 = signature2.equals((java.lang.Object) boolean17);
        java.lang.Object obj19 = null;
        boolean boolean20 = signature2.equals(obj19);
        java.lang.String str21 = signature2.getDescriptor();
        java.lang.String str22 = signature2.getDescriptor();
        java.lang.String str23 = signature2.getDescriptor();
        java.lang.Object obj24 = null;
        boolean boolean25 = signature2.equals(obj24);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("()L<init>()V;");
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray1);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(classArray2);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        boolean boolean14 = propertyDescriptor3.isPreferred();
        java.lang.String str15 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type8, type9, type11 };
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.String str17 = classInfo16.toString();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo16.getInterfaces();
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo16);
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("(III)Ljava/lang/Object;");
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        java.lang.String str25 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(III)I" + "'", str13, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type[]" + "'", str17, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(III)Ljava/lang/Object;" + "'", str24, "(III)Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)Ljava/lang/Object;" + "'", str25, "(III)Ljava/lang/Object;");
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("char");
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(method7);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        propertyDescriptor4.setExpert(true);
        java.lang.String str10 = propertyDescriptor4.getDisplayName();
        propertyDescriptor4.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean13 = propertyDescriptor4.isExpert();
        propertyDescriptor4.setShortDescription("java.beans.PropertyDescriptor[name=(III)I]");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor4.createPropertyEditor((java.lang.Object) classInfo26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        boolean boolean44 = classInfo26.equals((java.lang.Object) type43);
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str48 = signature47.getName();
        java.lang.String str49 = signature47.getName();
        java.lang.String str50 = signature47.getName();
        org.mockito.asm.Type[] typeArray51 = signature47.getArgumentTypes();
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray51);
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("Lava/lang/Cloneable;", type43, typeArray51);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str41, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(classArray52);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list15 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass8, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        java.lang.Object[] objArray46 = null;
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray46);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 9);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        java.lang.reflect.Method method57 = null;
        propertyDescriptor56.setReadMethod(method57);
        java.lang.reflect.Method method59 = propertyDescriptor56.getWriteMethod();
        java.lang.reflect.Method method60 = propertyDescriptor56.getWriteMethod();
        propertyDescriptor56.setName("(III)I");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor56.getPropertyEditorClass();
        propertyDescriptor56.setPreferred(true);
        java.lang.Class<?> wildcardClass66 = propertyDescriptor56.getPropertyEditorClass();
        java.lang.String str67 = propertyDescriptor56.getName();
        boolean boolean68 = signature52.equals((java.lang.Object) propertyDescriptor56);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(III)I" + "'", str67, "(III)I");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        generator9.setStyle((int) (byte) 1);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator18, 7, 6 };
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        generator9.setClasses(classArray24);
        java.lang.Class<?> wildcardClass27 = generator9.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, false, true);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray35);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str28, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type9.getOpcode(1);
        java.lang.String str12 = type9.getInternalName();
        java.lang.String str13 = type9.getClassName();
        int int14 = type9.getDimensions();
        int int15 = type9.getSize();
        int int16 = type9.getSort();
        org.mockito.asm.Type[] typeArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type[]" + "'", str13, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        int int14 = classInfo10.getModifiers();
        java.lang.String str15 = classInfo10.toString();
        org.mockito.asm.Type type16 = classInfo10.getSuperType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1041 + "'", int14 == 1041);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.asm.Type[]" + "'", str15, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type16);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(III)I" + "'", str10, "(III)I");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(III)I" + "'", str12, "(III)I");
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type2.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray27);
        java.lang.Class<?> wildcardClass29 = propertyDescriptorArray27.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass29);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        boolean boolean11 = generator5.getUseCache();
        generator5.setUseCache(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        generator5.setStrategy(generatorStrategy23);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(false);
        generator27.setUseCache(false);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        boolean boolean39 = generator37.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        generator37.setUseCache(false);
        generator37.setAttemptLoad(false);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        generator51.setStyle((int) (byte) 1);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator60.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy62);
        generator37.setNamingPolicy(namingPolicy62);
        generator27.setNamingPolicy(namingPolicy62);
        generator5.setNamingPolicy(namingPolicy62);
        generator5.setAttemptLoad(true);
        boolean boolean69 = generator5.getUseCache();
        boolean boolean70 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean73 = generator5.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator5.getNamingPolicy();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        generator14.setStyle((int) (byte) 1);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator23.getNamingPolicy();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator23.setClassLoader(classLoader28);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        generator35.setStrategy(generatorStrategy45);
        generator23.setStrategy(generatorStrategy45);
        generator14.setStrategy(generatorStrategy45);
        generator5.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator5.getStrategy();
        generator5.setAttemptLoad(false);
        generator5.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy50);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) (byte) -1);
        propertyDescriptor3.setExpert(true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = classInfo27.getType();
        java.lang.String str29 = classInfo27.toString();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type32, type33, type35 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray36);
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        java.lang.reflect.Method method47 = null;
        propertyDescriptor43.setReadMethod(method47);
        boolean boolean49 = propertyDescriptor43.isHidden();
        propertyDescriptor43.setShortDescription("hi!");
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("int", method57, method58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor59.setValue("", (java.lang.Object) generator61);
        java.lang.reflect.Method method63 = null;
        propertyDescriptor59.setReadMethod(method63);
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        java.lang.reflect.Method method72 = null;
        propertyDescriptor68.setReadMethod(method72);
        boolean boolean74 = propertyDescriptor68.isHidden();
        propertyDescriptor68.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = new java.beans.PropertyDescriptor[] { propertyDescriptor43, propertyDescriptor55, propertyDescriptor59, propertyDescriptor68 };
        java.lang.reflect.Method[] methodArray80 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray77, false, false);
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray80);
        boolean boolean82 = classInfo27.equals((java.lang.Object) methodArray80);
        java.beans.PropertyEditor propertyEditor83 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray80);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=int; shortDescription=; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNull(propertyEditor13);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.mockito.asm.Type[]" + "'", str29, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(III)I" + "'", str37, "(III)I");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(propertyEditor83);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lboolean;", "java.lang.Object");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.String str4 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.lang.Object" + "'", str3, "java.lang.Object");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lboolean;java.lang.Object" + "'", str4, "Lboolean;java.lang.Object");
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("()V");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type9, type10, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray13);
        generator5.setClasses(classArray15);
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type23 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, true, true);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray30);
        generator5.setDelegates((java.lang.Object[]) strArray17);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type39 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray47);
        java.lang.Class<?> wildcardClass49 = methodArray47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass49);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass49);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        java.lang.Object[] objArray64 = new java.lang.Object[] { generator59, 7, 6 };
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        int int67 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method70 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass49, "ava.lang.Cloneable", classArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ava.lang.Cloneable");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(III)I" + "'", str14, "(III)I");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(III)I" + "'", str25, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)I" + "'", str41, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj14 = propertyDescriptor3.getValue("()L<init>()V;");
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("[Ljava/lang/Class;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        boolean boolean53 = generator51.getUseCache();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type56, type57, type59 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray60);
        generator51.setDelegates((java.lang.Object[]) classArray62);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray65);
        java.lang.Object obj67 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, (java.lang.Object[]) classArray65);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "int" + "'", str58, "int");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(III)I" + "'", str61, "(III)I");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(obj67);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) ' ');
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = signature48.getDescriptor();
        org.mockito.asm.Type[] typeArray50 = signature48.getArgumentTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertNotNull(typeArray50);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 9);
        int int50 = methodInfo49.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method29 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        java.lang.String str47 = signature46.getName();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        java.lang.reflect.Method method52 = null;
        propertyDescriptor51.setReadMethod(method52);
        propertyDescriptor51.setExpert(false);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor51.setValue("hi!", (java.lang.Object) type57);
        java.lang.reflect.Method method59 = null;
        propertyDescriptor51.setWriteMethod(method59);
        java.lang.String str61 = propertyDescriptor51.getName();
        propertyDescriptor51.setConstrained(true);
        propertyDescriptor51.setExpert(true);
        propertyDescriptor51.setDisplayName("(III)F");
        java.lang.reflect.Method method68 = null;
        propertyDescriptor51.setReadMethod(method68);
        boolean boolean70 = signature46.equals((java.lang.Object) propertyDescriptor51);
        java.lang.String str71 = propertyDescriptor51.getShortDescription();
        java.lang.Class<?> wildcardClass72 = propertyDescriptor51.getPropertyEditorClass();
        boolean boolean73 = propertyDescriptor51.isExpert();
        java.lang.Class<?> wildcardClass74 = propertyDescriptor51.getPropertyType();
        java.lang.String str75 = propertyDescriptor51.getDisplayName();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>" + "'", str47, "<init>");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "int" + "'", str61, "int");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(III)F" + "'", str71, "(III)F");
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(III)F" + "'", str75, "(III)F");
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        java.lang.String str2 = type1.getClassName();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        boolean boolean7 = propertyDescriptor6.isExpert();
        propertyDescriptor6.setConstrained(true);
        propertyDescriptor6.setName("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        boolean boolean12 = type1.equals((java.lang.Object) propertyDescriptor6);
        java.lang.String str13 = type1.getInternalName();
        int int14 = type1.getSort();
        java.lang.String str15 = type1.getClassName();
        java.lang.String str16 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str2, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str15, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LLorg/mockito/asm/Type;;" + "'", str16, "LLorg/mockito/asm/Type;;");
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.lang.Object obj27 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method28 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str25, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.String str12 = classInfo11.toString();
        org.mockito.asm.Type type13 = classInfo11.getSuperType();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("(III)[Lorg/mockito/asm/Type;");
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setStyle((int) (byte) 1);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator21.setClasses(classArray36);
        java.lang.Class<?> wildcardClass39 = generator21.getClass();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("int", method41, method42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor43.setValue("", (java.lang.Object) generator45);
        boolean boolean47 = generator45.getUseCache();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type50, type51, type53 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray54);
        generator45.setDelegates((java.lang.Object[]) classArray56);
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass39, classArray56);
        org.mockito.cglib.core.MethodInfo methodInfo60 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, (int) (short) 100);
        org.mockito.cglib.core.Signature signature61 = methodInfo60.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo60.getClassInfo();
        org.mockito.asm.Type[] typeArray63 = methodInfo60.getExceptionTypes();
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray63);
        org.mockito.cglib.core.Signature signature65 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=; expert; values={hi!=F}]", type13, typeArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.Type[]" + "'", str12, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(III)I" + "'", str55, "(III)I");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertNotNull(methodInfo60);
        org.junit.Assert.assertNotNull(signature61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()L(III)[Lorg/mockito/asm/Type;;" + "'", str64, "()L(III)[Lorg/mockito/asm/Type;;");
        org.junit.Assert.assertNotNull(classArray66);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(signature49);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        propertyDescriptor3.setName("a.beans.PropertyDescriptor[name=hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        boolean boolean15 = classInfo13.equals((java.lang.Object) (short) 1);
        org.mockito.asm.Type[] typeArray16 = classInfo13.getInterfaces();
        java.lang.String str17 = classInfo13.toString();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        generator23.setStyle((int) (byte) 1);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator32, 7, 6 };
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator23.setClasses(classArray38);
        java.lang.Class<?> wildcardClass41 = generator23.getClass();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        boolean boolean49 = generator47.getUseCache();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator47.setDelegates((java.lang.Object[]) classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass41, classArray58);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type70, type71, type73 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray74);
        generator66.setClasses(classArray76);
        java.lang.reflect.Constructor constructor78 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass41, classArray76);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78);
        org.mockito.cglib.core.ClassInfo classInfo80 = methodInfo79.getClassInfo();
        java.lang.String str81 = methodInfo79.toString();
        org.mockito.asm.Type[] typeArray82 = methodInfo79.getExceptionTypes();
        boolean boolean83 = classInfo13.equals((java.lang.Object) typeArray82);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type[]" + "'", str17, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(III)I" + "'", str75, "(III)I");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(constructor78);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertNotNull(classInfo80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "<init>()V" + "'", str81, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classInfo28);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        boolean boolean8 = generator6.getUseCache();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray15);
        generator6.setDelegates((java.lang.Object[]) classArray17);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        generator24.setUseCache(true);
        boolean boolean30 = generator24.getUseCache();
        generator24.setUseCache(false);
        boolean boolean33 = generator24.getUseCache();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("int", method35, method36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor37.setValue("", (java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator39.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        generator47.setStyle((int) (byte) 1);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator56.getStrategy();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator56, 7, 6 };
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator47.setClasses(classArray62);
        generator39.setClasses(classArray62);
        java.lang.ClassLoader classLoader66 = null;
        generator39.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = generator39.getClassLoader();
        generator24.setClassLoader(classLoader68);
        generator6.setClassLoader(classLoader68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.findConstructor("Lorg/mockito/cglib/core/ReflectUtils$3;(III)Lorg/mockito/asm/Type;", classLoader68);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->Lorg/mockito/cglib/core/ReflectUtils$3;");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str51 = methodInfo50.toString();
        org.mockito.asm.Type[] typeArray52 = methodInfo50.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>()V" + "'", str51, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray52);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=V]", method1, method2);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        int int47 = methodInfo45.getModifiers();
        org.mockito.asm.Type[] typeArray48 = methodInfo45.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(typeArray48);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("<init>(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;", method1, method2);
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        org.mockito.asm.Type type8 = signature6.getReturnType();
        org.mockito.asm.Type type9 = signature6.getReturnType();
        org.mockito.asm.Type type10 = signature6.getReturnType();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        java.lang.String str18 = propertyDescriptor14.getShortDescription();
        java.lang.String str19 = propertyDescriptor14.getName();
        java.lang.String str20 = propertyDescriptor14.getDisplayName();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        java.lang.reflect.Method method28 = null;
        propertyDescriptor24.setReadMethod(method28);
        boolean boolean30 = propertyDescriptor24.isHidden();
        propertyDescriptor24.setExpert(false);
        java.lang.reflect.Method method33 = null;
        propertyDescriptor24.setWriteMethod(method33);
        propertyDescriptor24.setDisplayName("[Lorg/mockito/asm/Type;");
        java.lang.Class<?> wildcardClass37 = propertyDescriptor24.getPropertyType();
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor14.createPropertyEditor((java.lang.Object) wildcardClass37);
        propertyDescriptor14.setName("");
        java.lang.String str41 = propertyDescriptor14.getDisplayName();
        boolean boolean42 = signature6.equals((java.lang.Object) propertyDescriptor14);
        boolean boolean43 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor14);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(propertyEditor38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("(Ljava/lang/Cloneable;Ljava/io/Serializable;)L(III)Lorg.mockito.asm.Type[];;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        byte[] byteArray4 = new byte[] { (byte) 100, (byte) 100, (byte) -1 };
        java.lang.ClassLoader classLoader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class6 = org.mockito.cglib.core.ReflectUtils.defineClass("rg/mockito/asm/Type", byteArray4, classLoader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 100, -1]");
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str24 = signature23.getName();
        org.mockito.asm.Type[] typeArray25 = signature23.getArgumentTypes();
        propertyDescriptor12.setValue("Lorg/mockito/cglib/proxy/Mixin$Generator;", (java.lang.Object) typeArray25);
        java.lang.reflect.Method method27 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        java.lang.reflect.Method method35 = propertyDescriptor31.getWriteMethod();
        java.lang.Class<?> wildcardClass36 = propertyDescriptor31.getPropertyType();
        java.lang.String str37 = propertyDescriptor31.getName();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        propertyDescriptor41.setExpert(true);
        java.lang.String str47 = propertyDescriptor41.getDisplayName();
        java.lang.Class<?> wildcardClass48 = propertyDescriptor41.getClass();
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor31.createPropertyEditor((java.lang.Object) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass48);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        java.beans.PropertyEditor propertyEditor53 = propertyDescriptor12.createPropertyEditor((java.lang.Object) wildcardClass48);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(method35);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java/beans/PropertyDescriptor" + "'", str52, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor53);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        generator17.setStyle((int) (byte) 1);
        generator17.setUseCache(true);
        boolean boolean23 = generator17.getUseCache();
        generator17.setUseCache(false);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator32, 7, 6 };
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray38);
        generator17.setClasses(classArray38);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        propertyDescriptor3.setValue("(III)I", (java.lang.Object) classArray42);
        java.lang.Class<?> wildcardClass44 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str47 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str45, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setDisplayName("(III)V");
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        generator5.setAttemptLoad(false);
        boolean boolean20 = generator5.getUseCache();
        boolean boolean21 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin22 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor6.setValue("", (java.lang.Object) generator8);
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor15.setValue("", (java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator17.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        java.lang.Object[] objArray45 = new java.lang.Object[] { generator40, 7, 6 };
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        boolean boolean48 = signature33.equals((java.lang.Object) classArray46);
        java.lang.String str49 = signature33.getDescriptor();
        org.mockito.asm.Type[] typeArray50 = signature33.getArgumentTypes();
        generator8.setDelegates((java.lang.Object[]) typeArray50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator8.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator8.getNamingPolicy();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator59.getNamingPolicy();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type67 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray68);
        generator59.setClasses(classArray70);
        generator59.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator59.getStrategy();
        generator8.setStrategy(generatorStrategy74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin78 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(III)I" + "'", str49, "(III)I");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "int" + "'", str63, "int");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(III)I" + "'", str69, "(III)I");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        int int46 = methodInfo45.getModifiers();
        java.lang.String str47 = methodInfo45.toString();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo45.getClassInfo();
        org.mockito.cglib.core.Signature signature49 = methodInfo45.getSignature();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(signature49);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.toString();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        generator9.setStyle((int) (byte) 1);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator18, 7, 6 };
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        generator9.setClasses(classArray24);
        java.lang.Class<?> wildcardClass27 = generator9.getClass();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        boolean boolean35 = generator33.getUseCache();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type38, type39, type41 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray42);
        generator33.setDelegates((java.lang.Object[]) classArray44);
        java.lang.reflect.Constructor constructor46 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass27, classArray44);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type56, type57, type59 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray60);
        generator52.setClasses(classArray62);
        java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass27, classArray62);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        org.mockito.cglib.core.MethodInfo methodInfo67 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor64, 7);
        boolean boolean68 = type1.equals((java.lang.Object) 7);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ljava.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;];" + "'", str3, "Ljava.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;];");
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(III)I" + "'", str43, "(III)I");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(constructor46);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "int" + "'", str58, "int");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(III)I" + "'", str61, "(III)I");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(constructor64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "()V" + "'", str65, "()V");
        org.junit.Assert.assertNotNull(methodInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        boolean boolean14 = classInfo10.equals((java.lang.Object) 1L);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator29, 7, 6 };
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator20.setClasses(classArray35);
        java.lang.Class<?> wildcardClass38 = generator20.getClass();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor42.setValue("", (java.lang.Object) generator44);
        boolean boolean46 = generator44.getUseCache();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray53);
        generator44.setDelegates((java.lang.Object[]) classArray55);
        java.lang.reflect.Constructor constructor57 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass38, classArray55);
        org.mockito.asm.Type[] typeArray58 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo60 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57, (int) (short) 1);
        org.mockito.cglib.core.Signature signature61 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.Signature signature63 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.Signature signature64 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.mockito.asm.Type[] typeArray65 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        java.lang.String str66 = org.mockito.asm.Type.getConstructorDescriptor(constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo67 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        boolean boolean68 = classInfo10.equals((java.lang.Object) constructor57);
        org.mockito.asm.Type type69 = classInfo10.getType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(constructor57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(methodInfo60);
        org.junit.Assert.assertNotNull(signature61);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertNotNull(signature63);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "()V" + "'", str66, "()V");
        org.junit.Assert.assertNotNull(methodInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass8 = generator5.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getReturnType("(III)Lorg.mockito.asm.Type[];");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("int");
        java.lang.String str17 = type16.getInternalName();
        int int18 = type16.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        int int36 = type28.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray43);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray43);
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("", type20, typeArray43);
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("V", type16, typeArray43);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray43);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method51 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass8, "java.beans.PropertyDescriptor[name=hi!; constrained]", classArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=hi!; constrained]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str10, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(III)Lorg.mockito.asm.Type[];" + "'", str49, "(III)Lorg.mockito.asm.Type[];");
        org.junit.Assert.assertNotNull(classArray50);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        boolean boolean16 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        java.lang.String str18 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.beans.PropertyDescriptor[name=; values={hi!=F}]" + "'", str18, "java.beans.PropertyDescriptor[name=; values={hi!=F}]");
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("()Lint;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        java.lang.Class<?> wildcardClass52 = generator34.getClass();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        boolean boolean60 = generator58.getUseCache();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type63, type64, type66 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray67);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass52, classArray69);
        org.mockito.asm.Type[] typeArray72 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray73 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        java.lang.String str74 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        java.lang.String str76 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        boolean boolean78 = classInfo25.equals((java.lang.Object) methodInfo77);
        org.mockito.asm.Type type79 = classInfo25.getSuperType();
        int int80 = classInfo25.getModifiers();
        org.mockito.asm.Type type81 = classInfo25.getType();
        org.mockito.asm.Type type82 = classInfo25.getSuperType();
        int int84 = type82.getOpcode(1041);
        org.mockito.asm.Type type85 = type82.getElementType();
        java.lang.String str86 = type85.getInternalName();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "int" + "'", str65, "int");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(III)I" + "'", str68, "(III)I");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()V" + "'", str74, "()V");
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()V" + "'", str76, "()V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1041 + "'", int80 == 1041);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1045 + "'", int84 == 1045);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "va/lang/Object" + "'", str86, "va/lang/Object");
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setDisplayName("(III)V");
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(true);
        boolean boolean13 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str15 = signature14.getName();
        org.mockito.asm.Type[] typeArray16 = signature14.getArgumentTypes();
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature14);
        java.lang.String str18 = signature14.getDescriptor();
        org.mockito.asm.Type type19 = signature14.getReturnType();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        generator25.setStyle((int) (byte) 1);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator34, 7, 6 };
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator25.setClasses(classArray40);
        java.lang.Class<?> wildcardClass43 = generator25.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        boolean boolean51 = generator49.getUseCache();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type57 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray58);
        generator49.setDelegates((java.lang.Object[]) classArray60);
        java.lang.reflect.Constructor constructor62 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass43, classArray60);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.lang.String str64 = classInfo63.toString();
        int int65 = classInfo63.getModifiers();
        org.mockito.asm.Type type66 = classInfo63.getSuperType();
        org.mockito.asm.Type type67 = classInfo63.getSuperType();
        org.mockito.asm.Type[] typeArray68 = classInfo63.getInterfaces();
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray68);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)I" + "'", str59, "(III)I");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(constructor62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str64, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "()I" + "'", str69, "()I");
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray33 = classInfo31.getInterfaces();
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray33);
        java.lang.ClassLoader classLoader35 = null;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type38, type39, type41 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) typeArray42);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin45.newInstance((java.lang.Object[]) propertyDescriptorArray55);
        boolean boolean57 = type10.equals((java.lang.Object) mixin56);
        java.lang.String str58 = type10.toString();
        org.mockito.asm.Type type59 = type10.getElementType();
        int int61 = type59.getOpcode(40);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str20, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;" + "'", str34, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(III)I" + "'", str43, "(III)I");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str58, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 44 + "'", int61 == 44);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        int int50 = methodInfo49.getModifiers();
        org.mockito.asm.Type[] typeArray51 = methodInfo49.getExceptionTypes();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type57 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray58.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        boolean boolean64 = methodInfo49.equals((java.lang.Object) wildcardClass60);
        java.lang.Class[] classArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor66 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass60, classArray65);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Lorg.mockito.asm.Type;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)I" + "'", str59, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        generator13.setStyle((int) (byte) 1);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator22, 7, 6 };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator5.setClasses(classArray28);
        java.lang.ClassLoader classLoader32 = null;
        generator5.setClassLoader(classLoader32);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("int", method35, method36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor37.setValue("", (java.lang.Object) generator39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator39.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator39.getNamingPolicy();
        generator39.setUseCache(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) typeArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        generator39.setClasses(classArray56);
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("int", method59, method60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor61.setValue("", (java.lang.Object) generator63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator63.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator63.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy66);
        generator5.setNamingPolicy(namingPolicy66);
        java.lang.ClassLoader classLoader69 = generator5.getClassLoader();
        generator5.setUseCache(true);
        java.lang.ClassLoader classLoader72 = generator5.getClassLoader();
        generator5.setUseCache(true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java/beans/PropertyDescriptororg/mockito/cglib/proxy/Mixin$Generator(III)Lorg.mockito.asm.Type[];");
        int int2 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        boolean boolean9 = generator6.getUseCache();
        generator6.setAttemptLoad(false);
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator6.getNamingPolicy();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        generator20.setUseCache(true);
        boolean boolean26 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy27);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        generator42.setStyle((int) (byte) 1);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator51, 7, 6 };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        generator34.setClasses(classArray57);
        java.lang.ClassLoader classLoader61 = null;
        generator34.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = generator34.getClassLoader();
        generator6.setClassLoader(classLoader63);
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        generator70.setStyle((int) (byte) 1);
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("int", method75, method76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor77.setValue("", (java.lang.Object) generator79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator79, 7, 6 };
        java.lang.Class[] classArray85 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        generator70.setClasses(classArray85);
        java.lang.Class<?> wildcardClass88 = generator70.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray90 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray92 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass88);
        java.lang.Class[] classArray93 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) propertyDescriptorArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor95 = org.mockito.cglib.core.ReflectUtils.findConstructor("Lorg.mockito.asm.Type;", classLoader63);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str89, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray90);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(propertyDescriptorArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        java.lang.Object[] objArray46 = null;
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray46);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 10);
        java.lang.Class<?> wildcardClass51 = methodInfo50.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("()V");
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertNull(method20);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature50 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray52 = signature51.getArgumentTypes();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.String str66 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo67 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        boolean boolean69 = signature51.equals((java.lang.Object) propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)I" + "'", str60, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str66, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo10.getInterfaces();
        org.mockito.asm.Type[] typeArray30 = classInfo10.getInterfaces();
        org.mockito.asm.Type type31 = classInfo10.getSuperType();
        java.lang.String str32 = type31.getClassName();
        java.lang.Class<?> wildcardClass33 = type31.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method35 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.lang.Object" + "'", str32, "java.lang.Object");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str34, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        generator11.setStyle((int) (byte) 1);
        generator11.setUseCache(true);
        boolean boolean17 = generator11.getUseCache();
        generator11.setUseCache(false);
        boolean boolean20 = generator11.getUseCache();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        generator26.setClasses(classArray49);
        java.lang.ClassLoader classLoader53 = null;
        generator26.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = generator26.getClassLoader();
        generator11.setClassLoader(classLoader55);
        generator1.setClassLoader(classLoader55);
        generator1.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader60 = generator1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor61 = org.mockito.cglib.core.ReflectUtils.findConstructor("()LIII)LIII)Lorg.mockito.asm.Type;", classLoader60);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int16 = type15.getSort();
        java.lang.String str17 = type15.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str17, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("[Lorg/mockito/asm/Type;");
        java.lang.String str2 = type1.getInternalName();
        int int4 = type1.getOpcode(5);
        java.lang.String str5 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str2, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str5, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        generator51.setStyle((int) (byte) 1);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator60.getStrategy();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator60, 7, 6 };
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator51.setClasses(classArray66);
        generator51.setStyle(2);
        java.lang.Class<?> wildcardClass71 = generator51.getClass();
        boolean boolean72 = signature45.equals((java.lang.Object) wildcardClass71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method73 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Mixin$Generator is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getType();
        org.mockito.asm.Type type15 = classInfo10.getType();
        org.mockito.asm.Type type16 = type15.getElementType();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("int", "int");
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        java.lang.reflect.Method method31 = null;
        propertyDescriptor30.setReadMethod(method31);
        java.lang.reflect.Method method33 = propertyDescriptor30.getWriteMethod();
        java.lang.reflect.Method method34 = propertyDescriptor30.getReadMethod();
        propertyDescriptor30.setShortDescription("");
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor23.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor23.setConstrained(true);
        boolean boolean40 = propertyDescriptor23.isHidden();
        java.lang.Object obj42 = propertyDescriptor23.getValue("org.mockito.asm.Type");
        boolean boolean43 = signature19.equals(obj42);
        java.lang.String str44 = signature19.toString();
        boolean boolean46 = signature19.equals((java.lang.Object) "va/lang/Object");
        boolean boolean47 = type16.equals((java.lang.Object) signature19);
        int int48 = type16.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "intint" + "'", str44, "intint");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type type29 = classInfo10.getType();
        java.lang.String str30 = classInfo10.toString();
        org.mockito.asm.Type type31 = classInfo10.getType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type[]" + "'", str30, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type31);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray6);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.ClassLoader classLoader10 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, (java.lang.Object[]) typeArray17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin20.newInstance((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, false);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray34);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray43.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray50);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(methodArray52);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature45 = methodInfo44.getSignature();
        org.mockito.cglib.core.Signature signature46 = methodInfo44.getSignature();
        java.lang.String str47 = signature46.getDescriptor();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("<init>()V");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "L<init>()V;" + "'", str3, "L<init>()V;");
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=int; bound]");
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setName("org.mockito.asm.Type");
        propertyDescriptor3.setName("V(III)Lint;");
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setWriteMethod(method19);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "V(III)Lint;" + "'", str14, "V(III)Lint;");
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        generator5.setAttemptLoad(false);
        boolean boolean20 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator5.getNamingPolicy();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        generator27.setStyle((int) (byte) 1);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        java.lang.Object[] objArray41 = new java.lang.Object[] { generator36, 7, 6 };
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator27.setClasses(classArray42);
        java.lang.Class<?> wildcardClass45 = generator27.getClass();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        boolean boolean53 = generator51.getUseCache();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type56, type57, type59 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray60);
        generator51.setDelegates((java.lang.Object[]) classArray62);
        java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass45, classArray62);
        org.mockito.asm.Type[] typeArray65 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor64);
        org.mockito.asm.Type[] typeArray66 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor64);
        java.lang.String str67 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        org.mockito.asm.Type[] typeArray68 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor64);
        org.mockito.asm.Type[] typeArray69 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor64);
        generator5.setDelegates((java.lang.Object[]) typeArray69);
        generator5.setUseCache(false);
        java.lang.reflect.Method method74 = null;
        java.lang.reflect.Method method75 = null;
        java.beans.PropertyDescriptor propertyDescriptor76 = new java.beans.PropertyDescriptor("int", method74, method75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor76.setValue("", (java.lang.Object) generator78);
        generator78.setStyle((int) (byte) 1);
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("int", method83, method84);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor85.setValue("", (java.lang.Object) generator87);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator87.getNamingPolicy();
        generator78.setNamingPolicy(namingPolicy89);
        generator78.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator78.getStrategy();
        generator5.setStrategy(generatorStrategy94);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "int" + "'", str58, "int");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(III)I" + "'", str61, "(III)I");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(constructor64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "()V" + "'", str67, "()V");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj14 = propertyDescriptor3.getValue("()L<init>()V;");
        propertyDescriptor3.setName("Lava.beans.PropertyDescriptor[name=int;");
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setDisplayName("int(III)I");
        java.lang.reflect.Method method21 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setReadMethod(method22);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(method21);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature50 = methodInfo49.getSignature();
        int int51 = methodInfo49.getModifiers();
        org.mockito.cglib.core.Signature signature52 = methodInfo49.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo53 = methodInfo49.getClassInfo();
        org.mockito.asm.Type[] typeArray54 = classInfo53.getInterfaces();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(typeArray54);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str24 = signature23.getName();
        org.mockito.asm.Type[] typeArray25 = signature23.getArgumentTypes();
        propertyDescriptor12.setValue("Lorg/mockito/cglib/proxy/Mixin$Generator;", (java.lang.Object) typeArray25);
        java.lang.reflect.Method method27 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setBound(true);
        boolean boolean30 = propertyDescriptor12.isExpert();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        byte[] byteArray1 = new byte[] {};
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("int", method3, method4);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor5.setValue("", (java.lang.Object) generator7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        boolean boolean10 = generator7.getUseCache();
        generator7.setAttemptLoad(false);
        generator7.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator7.getNamingPolicy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setStyle((int) (byte) 1);
        generator21.setUseCache(true);
        boolean boolean27 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator21.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy28);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        generator43.setStyle((int) (byte) 1);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator52, 7, 6 };
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator43.setClasses(classArray58);
        generator35.setClasses(classArray58);
        java.lang.ClassLoader classLoader62 = null;
        generator35.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = generator35.getClassLoader();
        generator7.setClassLoader(classLoader64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str70 = type69.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type68, type69, type71 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray72);
        java.lang.Class<?> wildcardClass74 = typeArray72.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass74);
        org.mockito.cglib.core.ClassInfo classInfo76 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass74);
        org.mockito.asm.Type type77 = classInfo76.getSuperType();
        int int78 = classInfo76.getModifiers();
        org.mockito.asm.Type type79 = classInfo76.getType();
        org.mockito.asm.Type type80 = classInfo76.getType();
        org.mockito.asm.Type[] typeArray81 = classInfo76.getInterfaces();
        org.mockito.asm.Type type82 = classInfo76.getSuperType();
        java.lang.Class<?> wildcardClass83 = type82.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) propertyDescriptorArray84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class86 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class org.mockito.cglib.proxy.Mixin$Generator]; preferred; expert]", byteArray1, classLoader64);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "int" + "'", str67, "int");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "int" + "'", str70, "int");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(III)I" + "'", str73, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertNotNull(classInfo76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1041 + "'", int78 == 1041);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        generator16.setStyle((int) (byte) 1);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator25, 7, 6 };
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        java.lang.Class<?> wildcardClass34 = generator16.getClass();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("int", method36, method37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor38.setValue("", (java.lang.Object) generator40);
        boolean boolean42 = generator40.getUseCache();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type48 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray49);
        generator40.setDelegates((java.lang.Object[]) classArray51);
        java.lang.reflect.Constructor constructor53 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass34, classArray51);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor53);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor53);
        org.mockito.cglib.core.MethodInfo methodInfo57 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor53, (int) (byte) 100);
        org.mockito.asm.Type[] typeArray58 = methodInfo57.getExceptionTypes();
        generator5.setDelegates((java.lang.Object[]) typeArray58);
        boolean boolean60 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator5.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader62 = generator5.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(III)I" + "'", str50, "(III)I");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(constructor53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "()V" + "'", str54, "()V");
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(methodInfo57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(strEnumeration21);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.String str50 = methodInfo48.toString();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        java.lang.String str62 = classInfo61.toString();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getSuperType();
        org.mockito.asm.Type type65 = classInfo61.getType();
        boolean boolean66 = methodInfo48.equals((java.lang.Object) type65);
        java.lang.String str67 = methodInfo48.toString();
        org.mockito.cglib.core.Signature signature68 = methodInfo48.getSignature();
        org.mockito.asm.Type type69 = signature68.getReturnType();
        org.mockito.cglib.core.Signature signature72 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str73 = signature72.getName();
        org.mockito.asm.Type[] typeArray74 = signature72.getArgumentTypes();
        boolean boolean75 = type69.equals((java.lang.Object) signature72);
        java.lang.String str76 = signature72.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.Type[]" + "'", str62, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<init>()V" + "'", str67, "<init>()V");
        org.junit.Assert.assertNotNull(signature68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "int" + "'", str73, "int");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "int(III)I" + "'", str76, "int(III)I");
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.Object[] objArray38 = new java.lang.Object[] { generator33, 7, 6 };
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator24.setClasses(classArray39);
        generator16.setClasses(classArray39);
        java.lang.ClassLoader classLoader43 = null;
        generator16.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator16.getStrategy();
        generator5.setStrategy(generatorStrategy45);
        generator5.setUseCache(false);
        generator5.setUseCache(false);
        generator5.setAttemptLoad(true);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator58.getNamingPolicy();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type63, type64, type66 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray67);
        generator58.setClasses(classArray69);
        int int71 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray69);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray69);
        generator5.setClasses(classArray69);
        java.lang.String[] strArray74 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "int" + "'", str65, "int");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(III)I" + "'", str68, "(III)I");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo10.getInterfaces();
        org.mockito.asm.Type[] typeArray30 = classInfo10.getInterfaces();
        org.mockito.asm.Type type31 = classInfo10.getSuperType();
        org.mockito.asm.Type type32 = type31.getElementType();
        int int33 = type31.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lorg/mockito/cglib/proxy/Mixin$Generator;(III)I", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj12 = propertyDescriptor3.getValue("(III)[Lorg/mockito/asm/Type;");
        propertyDescriptor3.setDisplayName("()L<init>()V;");
        propertyDescriptor3.setDisplayName("(III)LIII)Lorg/mockito/asm/Type;");
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = signature48.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<init>()V" + "'", str49, "<init>()V");
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lint;", method1, method2);
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.String str8 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.beans.PropertyDescriptor[name=Lint;; constrained]" + "'", str8, "java.beans.PropertyDescriptor[name=Lint;; constrained]");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor14.setReadMethod(method18);
        boolean boolean20 = propertyDescriptor14.isHidden();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor24.setReadMethod(method25);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        java.lang.reflect.Method method31 = null;
        propertyDescriptor30.setReadMethod(method31);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        java.lang.reflect.Method method37 = null;
        propertyDescriptor36.setReadMethod(method37);
        propertyDescriptor36.setBound(true);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        java.lang.reflect.Method method48 = null;
        propertyDescriptor44.setReadMethod(method48);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        java.lang.reflect.Method method54 = null;
        propertyDescriptor53.setReadMethod(method54);
        propertyDescriptor53.setBound(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = new java.beans.PropertyDescriptor[] { propertyDescriptor14, propertyDescriptor24, propertyDescriptor30, propertyDescriptor36, propertyDescriptor44, propertyDescriptor53 };
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray58, true, true);
        generator5.setDelegates((java.lang.Object[]) methodArray61);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 60");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(methodArray61);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isHidden();
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        generator15.setStyle((int) (byte) 1);
        generator15.setUseCache(true);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("int", method22, method23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor24.setValue("", (java.lang.Object) generator26);
        generator26.setStyle((int) (byte) 1);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator35, 7, 6 };
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator26.setClasses(classArray41);
        java.lang.Class<?> wildcardClass44 = generator26.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        boolean boolean52 = generator50.getUseCache();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type58 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray59);
        generator50.setDelegates((java.lang.Object[]) classArray61);
        java.lang.reflect.Constructor constructor63 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass44, classArray61);
        java.lang.String str64 = org.mockito.asm.Type.getConstructorDescriptor(constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo65 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo67 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63, (int) (byte) 100);
        org.mockito.asm.Type[] typeArray68 = methodInfo67.getExceptionTypes();
        generator15.setDelegates((java.lang.Object[]) typeArray68);
        java.beans.PropertyEditor propertyEditor70 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator15);
        generator15.setUseCache(true);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)I" + "'", str60, "(III)I");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(constructor63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()V" + "'", str64, "()V");
        org.junit.Assert.assertNotNull(methodInfo65);
        org.junit.Assert.assertNotNull(methodInfo67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNull(propertyEditor70);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()V");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("int", method3, method4);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor5.setValue("", (java.lang.Object) generator7);
        generator7.setStyle((int) (byte) 1);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator16, 7, 6 };
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator7.setClasses(classArray22);
        java.lang.Class<?> wildcardClass25 = generator7.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        java.lang.Object obj27 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray28);
        boolean boolean30 = type1.equals((java.lang.Object) propertyDescriptorArray28);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) methodArray33);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str26, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(mixin34);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        int int48 = methodInfo47.getModifiers();
        org.mockito.asm.Type[] typeArray49 = methodInfo47.getExceptionTypes();
        int int50 = methodInfo47.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        java.lang.Class<?> wildcardClass52 = generator34.getClass();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        boolean boolean60 = generator58.getUseCache();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type63, type64, type66 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray67);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass52, classArray69);
        org.mockito.asm.Type[] typeArray72 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray73 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        java.lang.String str74 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        java.lang.String str76 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        boolean boolean78 = classInfo25.equals((java.lang.Object) methodInfo77);
        org.mockito.asm.Type[] typeArray79 = classInfo25.getInterfaces();
        org.mockito.asm.Type[] typeArray80 = classInfo25.getInterfaces();
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) typeArray80);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "int" + "'", str65, "int");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(III)I" + "'", str68, "(III)I");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()V" + "'", str74, "()V");
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()V" + "'", str76, "()V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lint;", method1, method2);
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(strEnumeration8);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("int", method5, method6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor7.setValue("", (java.lang.Object) generator9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator9.getStrategy();
        java.lang.Object[] objArray14 = new java.lang.Object[] { generator9, 7, 6 };
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        boolean boolean17 = signature2.equals((java.lang.Object) classArray15);
        java.lang.String str18 = signature2.getDescriptor();
        org.mockito.asm.Type type19 = signature2.getReturnType();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        java.lang.Class<?> wildcardClass27 = generator25.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        java.lang.Object obj30 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass27);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        boolean boolean33 = signature2.equals((java.lang.Object) propertyDescriptorArray32);
        org.mockito.asm.Type[] typeArray34 = signature2.getArgumentTypes();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str28, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str31, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typeArray34);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.lang.Object obj48 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str44, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str45, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor19.setReadMethod(method23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor28.setReadMethod(method32);
        boolean boolean34 = propertyDescriptor28.isHidden();
        propertyDescriptor28.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] { propertyDescriptor3, propertyDescriptor15, propertyDescriptor19, propertyDescriptor28 };
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray44);
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray28 = classInfo27.getInterfaces();
        org.mockito.asm.Type type29 = classInfo27.getSuperType();
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type33 = signature32.getReturnType();
        java.lang.String str34 = signature32.toString();
        java.lang.String str35 = signature32.toString();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        propertyDescriptor39.setExpert(false);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type44, type45, type47 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray48.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass50);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        java.lang.String str53 = classInfo52.toString();
        org.mockito.asm.Type type54 = classInfo52.getSuperType();
        org.mockito.asm.Type[] typeArray55 = classInfo52.getInterfaces();
        java.beans.PropertyEditor propertyEditor56 = propertyDescriptor39.createPropertyEditor((java.lang.Object) classInfo52);
        java.lang.String str57 = classInfo52.toString();
        java.lang.String str58 = classInfo52.toString();
        org.mockito.asm.Type type59 = classInfo52.getType();
        org.mockito.asm.Type[] typeArray60 = classInfo52.getInterfaces();
        org.mockito.asm.Type type61 = classInfo52.getSuperType();
        boolean boolean62 = signature32.equals((java.lang.Object) type61);
        java.lang.String str63 = type61.getClassName();
        boolean boolean64 = type29.equals((java.lang.Object) type61);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int(III)I" + "'", str34, "int(III)I");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int(III)I" + "'", str35, "int(III)I");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(III)I" + "'", str49, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.Type[]" + "'", str53, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNull(propertyEditor56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.mockito.asm.Type[]" + "'", str57, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.mockito.asm.Type[]" + "'", str58, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.lang.Object" + "'", str63, "java.lang.Object");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 6);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str52 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "()V" + "'", str52, "()V");
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 100, (byte) -1 };
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        boolean boolean12 = generator10.getUseCache();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type15, type16, type18 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray19);
        generator10.setDelegates((java.lang.Object[]) classArray21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("int", method24, method25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor26.setValue("", (java.lang.Object) generator28);
        generator28.setStyle((int) (byte) 1);
        generator28.setUseCache(true);
        boolean boolean34 = generator28.getUseCache();
        generator28.setUseCache(false);
        boolean boolean37 = generator28.getUseCache();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        generator51.setStyle((int) (byte) 1);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator60.getStrategy();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator60, 7, 6 };
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator51.setClasses(classArray66);
        generator43.setClasses(classArray66);
        java.lang.ClassLoader classLoader70 = null;
        generator43.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = generator43.getClassLoader();
        generator28.setClassLoader(classLoader72);
        generator10.setClassLoader(classLoader72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class75 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=<init>; values={hi!=F}]; propertyEditorClass=class [Lorg.mockito.asm.Type;]", byteArray4, classLoader72);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)I" + "'", str20, "(III)I");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setShortDescription("(III)Lorg.mockito.asm.Type[];");
        java.lang.Object obj16 = propertyDescriptor3.getValue("I");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        generator23.setStyle((int) (byte) 1);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator32, 7, 6 };
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator23.setClasses(classArray38);
        java.lang.Class<?> wildcardClass41 = generator23.getClass();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        boolean boolean49 = generator47.getUseCache();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator47.setDelegates((java.lang.Object[]) classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass41, classArray58);
        java.lang.String str61 = org.mockito.asm.Type.getConstructorDescriptor(constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.ClassInfo classInfo63 = methodInfo62.getClassInfo();
        org.mockito.asm.Type type64 = classInfo63.getSuperType();
        java.beans.PropertyEditor propertyEditor65 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo63);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "()V" + "'", str61, "()V");
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNull(propertyEditor65);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        boolean boolean17 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()Lava.beans.PropertyDescriptor[name=int;");
        java.lang.String str2 = type1.getInternalName();
        org.mockito.asm.Type type3 = type1.getElementType();
        java.lang.String str4 = type3.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ava.beans.PropertyDescriptor[name=int" + "'", str2, "ava.beans.PropertyDescriptor[name=int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "a.beans.PropertyDescriptor[name=int" + "'", str4, "a.beans.PropertyDescriptor[name=int");
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        boolean boolean14 = classInfo10.equals((java.lang.Object) 1L);
        int int15 = classInfo10.getModifiers();
        org.mockito.asm.Type type16 = classInfo10.getSuperType();
        int int17 = classInfo10.getModifiers();
        java.lang.String str18 = classInfo10.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1041 + "'", int17 == 1041);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.mockito.asm.Type[]" + "'", str18, "org.mockito.asm.Type[]");
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "int(III)I");
        java.lang.String str3 = signature2.toString();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        int int5 = type4.getSize();
        boolean boolean7 = type4.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=; values={hi!=F}; constrained]");
        java.lang.String str8 = type4.getClassName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "int(III)I" + "'", str3, "int(III)I");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(III)I; hidden; expert]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; hidden; values={hi!=F; I=org.mockito.asm.Type[]}]", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ljava/beans/PropertyDescriptor;");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getInternalName();
        java.lang.String str4 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java/beans/PropertyDescriptor" + "'", str2, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java/beans/PropertyDescriptor" + "'", str3, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor" + "'", str4, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.asm.Type; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str14, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        generator16.setStyle((int) (byte) 1);
        generator16.setUseCache(true);
        boolean boolean22 = generator16.getUseCache();
        generator16.setUseCache(false);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator31, 7, 6 };
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator16.getStrategy();
        generator5.setStrategy(generatorStrategy41);
        generator5.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method5 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.Class<?> wildcardClass3 = generator0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        generator18.setStyle((int) (byte) 1);
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator27, 7, 6 };
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator18.setClasses(classArray33);
        generator10.setClasses(classArray33);
        java.lang.ClassLoader classLoader37 = null;
        generator10.setClassLoader(classLoader37);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(false);
        java.lang.ClassLoader classLoader43 = generator10.getClassLoader();
        generator10.setAttemptLoad(false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type51 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray52);
        generator10.setDelegates((java.lang.Object[]) classArray54);
        java.lang.reflect.Constructor constructor56 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass3, classArray54);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "int" + "'", str47, "int");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(III)I" + "'", str53, "(III)I");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(constructor56);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(III)I; displayName=java/beans/PropertyDescriptor]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("V");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "void" + "'", str3, "void");
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "java.beans.PropertyDescriptor[name=int; constrained]");
        java.lang.String str3 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=int; constrained]" + "'", str3, "java.beans.PropertyDescriptor[name=int; constrained]");
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("()V");
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("int(III)I");
        propertyDescriptor3.setDisplayName("org/mockito/cglib/proxy/Mixin$Generator");
        propertyDescriptor3.setShortDescription("F");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getClass();
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list19 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass17, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "int" + "'", str8, "int");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type15 = classInfo14.getSuperType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str13, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(type15);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.toString();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        propertyDescriptor9.setExpert(false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.lang.String str23 = classInfo22.toString();
        org.mockito.asm.Type type24 = classInfo22.getSuperType();
        org.mockito.asm.Type[] typeArray25 = classInfo22.getInterfaces();
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor9.createPropertyEditor((java.lang.Object) classInfo22);
        java.lang.String str27 = classInfo22.toString();
        java.lang.String str28 = classInfo22.toString();
        org.mockito.asm.Type type29 = classInfo22.getType();
        org.mockito.asm.Type[] typeArray30 = classInfo22.getInterfaces();
        org.mockito.asm.Type type31 = classInfo22.getSuperType();
        boolean boolean32 = signature2.equals((java.lang.Object) type31);
        java.lang.String str33 = type31.getClassName();
        int int34 = type31.getSort();
        java.lang.String str35 = type31.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int(III)I" + "'", str4, "int(III)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int(III)I" + "'", str5, "int(III)I");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(III)I" + "'", str19, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.mockito.asm.Type[]" + "'", str23, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.asm.Type[]" + "'", str27, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.mockito.asm.Type[]" + "'", str28, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.lang.Object" + "'", str33, "java.lang.Object");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Ljava/lang/Object;" + "'", str35, "Ljava/lang/Object;");
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        java.lang.Object[] objArray46 = null;
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray46);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 9);
        org.mockito.cglib.core.Signature signature50 = methodInfo49.getSignature();
        org.mockito.asm.Type[] typeArray51 = methodInfo49.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertNotNull(typeArray51);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setName("org.mockito.asm.Type");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.lang.String str31 = type30.toString();
        org.mockito.asm.Type type32 = type30.getElementType();
        java.lang.String str33 = type32.getDescriptor();
        int int35 = type32.getOpcode((int) ' ');
        java.lang.String str36 = type32.getDescriptor();
        int int38 = type32.getOpcode((int) (byte) 10);
        propertyDescriptor3.setValue("Lntint(III)Lorg.mockito.asm.Type[];", (java.lang.Object) int38);
        propertyDescriptor3.setName("org/mockito/cglib/core/DefaultNamingPolicy");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str31, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str33, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36 + "'", int35 == 36);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str36, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 14 + "'", int38 == 14);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        int int29 = classInfo25.getModifiers();
        org.mockito.asm.Type type30 = classInfo25.getType();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1041 + "'", int29 == 1041);
        org.junit.Assert.assertNotNull(type30);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(III)I; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator5, 7, 6 };
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        java.lang.Class<?> wildcardClass8 = generator6.getClass();
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.Object obj11 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass8);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type14 = type13.getElementType();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(III)I]");
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        int int20 = type18.getOpcode(5);
        java.lang.String str21 = type18.getDescriptor();
        int int23 = type18.getOpcode(0);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        generator29.setStyle((int) (byte) 1);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator38, 7, 6 };
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator29.setClasses(classArray44);
        java.lang.Class<?> wildcardClass47 = generator29.getClass();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        boolean boolean55 = generator53.getUseCache();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type58, type59, type61 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray62);
        generator53.setDelegates((java.lang.Object[]) classArray64);
        java.lang.reflect.Constructor constructor66 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass47, classArray64);
        org.mockito.asm.Type[] typeArray67 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor66);
        java.lang.String str68 = org.mockito.asm.Type.getConstructorDescriptor(constructor66);
        org.mockito.cglib.core.MethodInfo methodInfo69 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor66);
        java.lang.String str70 = methodInfo69.toString();
        org.mockito.asm.Type[] typeArray71 = methodInfo69.getExceptionTypes();
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray71);
        org.mockito.cglib.core.Signature signature74 = new org.mockito.cglib.core.Signature("Z", type14, typeArray71);
        java.lang.reflect.Method method76 = null;
        java.lang.reflect.Method method77 = null;
        java.beans.PropertyDescriptor propertyDescriptor78 = new java.beans.PropertyDescriptor("int", method76, method77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor78.setValue("", (java.lang.Object) generator80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator80.getStrategy();
        java.lang.reflect.Method method84 = null;
        java.lang.reflect.Method method85 = null;
        java.beans.PropertyDescriptor propertyDescriptor86 = new java.beans.PropertyDescriptor("int", method84, method85);
        org.mockito.cglib.proxy.Mixin.Generator generator88 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor86.setValue("", (java.lang.Object) generator88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator88.getNamingPolicy();
        generator80.setNamingPolicy(namingPolicy90);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator80.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator80.getNamingPolicy();
        boolean boolean94 = generator80.getUseCache();
        boolean boolean95 = signature74.equals((java.lang.Object) generator80);
        java.lang.String str96 = signature74.getDescriptor();
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str9, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str12, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lava.beans.PropertyDescriptor[name=int;" + "'", str21, "Lava.beans.PropertyDescriptor[name=int;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "int" + "'", str57, "int");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "int" + "'", str60, "int");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(III)I" + "'", str63, "(III)I");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(constructor66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "()V" + "'", str68, "()V");
        org.junit.Assert.assertNotNull(methodInfo69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<init>()V" + "'", str70, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "()Lava.beans.PropertyDescriptor[name=int;" + "'", str72, "()Lava.beans.PropertyDescriptor[name=int;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "()Ljava.beans.PropertyDescriptor[name=(III)I];" + "'", str73, "()Ljava.beans.PropertyDescriptor[name=(III)I];");
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "()Lg/mockito/cglib/proxy/Mixin$Generator;" + "'", str96, "()Lg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        generator19.setStyle((int) (byte) 1);
        generator19.setUseCache(true);
        boolean boolean25 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator33.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator33.setClassLoader(classLoader38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator33.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator33.getStrategy();
        generator5.setStrategy(generatorStrategy42);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator49.getNamingPolicy();
        generator49.setUseCache(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("int", method57, method58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor59.setValue("", (java.lang.Object) generator61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator61.getStrategy();
        java.lang.Object[] objArray66 = new java.lang.Object[] { generator61, 7, 6 };
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray67);
        generator49.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator49.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator49.getStrategy();
        generator5.setStrategy(generatorStrategy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator5.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str28, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str30, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator5.getStrategy();
        boolean boolean19 = generator5.getAttemptLoad();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray34);
        generator25.setClasses(classArray36);
        generator25.setAttemptLoad(false);
        generator25.setUseCache(true);
        generator25.setUseCache(true);
        generator25.setUseCache(false);
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator25.getStrategy();
        generator5.setStrategy(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type19 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        int int25 = type23.getOpcode(1);
        java.lang.String str26 = type23.getInternalName();
        boolean boolean27 = classInfo10.equals((java.lang.Object) str26);
        org.mockito.asm.Type type28 = classInfo10.getSuperType();
        org.mockito.asm.Type type29 = classInfo10.getType();
        java.lang.String str30 = classInfo10.toString();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("va/lang/Object", "()I");
        org.mockito.asm.Type[] typeArray34 = signature33.getArgumentTypes();
        boolean boolean35 = classInfo10.equals((java.lang.Object) signature33);
        org.mockito.asm.Type type36 = classInfo10.getType();
        org.mockito.asm.Type type37 = classInfo10.getSuperType();
        java.lang.String str38 = classInfo10.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(III)I" + "'", str21, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str26, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type[]" + "'", str30, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.mockito.asm.Type[]" + "'", str38, "org.mockito.asm.Type[]");
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("char");
        propertyDescriptor3.setName("L)L(III)[Lorg/mockito/asm/Type;");
        java.lang.Object obj13 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class org.mockito.cglib.proxy.Mixin$Generator]]");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator5.setStrategy(generatorStrategy12);
        java.lang.Object[] objArray14 = null;
        generator5.setDelegates(objArray14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        boolean boolean23 = generator21.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        generator21.setUseCache(false);
        generator21.setAttemptLoad(false);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("int", method31, method32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor33.setValue("", (java.lang.Object) generator35);
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor42.setValue("", (java.lang.Object) generator44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator52.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator35.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy58);
        boolean boolean60 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator21.getStrategy();
        generator5.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator5.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor12.setReadMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor12.getWriteMethod();
        java.lang.reflect.Method method16 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setName("(III)I");
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        java.util.Enumeration<java.lang.String> strEnumeration20 = propertyDescriptor12.attributeNames();
        boolean boolean21 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor12.getPropertyType();
        java.lang.String str23 = propertyDescriptor12.toString();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertNotNull(strEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor[name=(III)I]" + "'", str23, "java.beans.PropertyDescriptor[name=(III)I]");
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lava.beans.PropertyDescriptor[name=int;Lorg/mockito/cglib/core/ReflectUtils$3;", method1, method2);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class org.mockito.cglib.proxy.Mixin$Generator]]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setUseCache(false);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        generator6.setStrategy(generatorStrategy17);
        generator6.setUseCache(false);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator6.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        generator37.setStyle((int) (byte) 1);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator46, 7, 6 };
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator37.setClasses(classArray52);
        generator29.setClasses(classArray52);
        java.lang.ClassLoader classLoader56 = null;
        generator29.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = generator29.getClassLoader();
        generator6.setClassLoader(classLoader58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; propertyEditorClass=class [Lorg.mockito.asm.Type;]", classLoader58);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        propertyDescriptor17.setExpert(true);
        java.lang.String str23 = propertyDescriptor17.getDisplayName();
        propertyDescriptor17.setShortDescription("org.mockito.asm.Type[]");
        java.lang.String str26 = propertyDescriptor17.getShortDescription();
        propertyDescriptor3.setValue("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Lorg/mockito/asm/Type;", (java.lang.Object) propertyDescriptor17);
        java.lang.String str28 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type[] typeArray6 = signature2.getArgumentTypes();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) typeArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray15);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray15);
        boolean boolean21 = signature2.equals((java.lang.Object) typeArray15);
        java.lang.String str22 = signature2.toString();
        java.lang.String str23 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(III)I" + "'", str3, "(III)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(III)I" + "'", str4, "(III)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int(III)I" + "'", str5, "int(III)I");
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)F" + "'", str20, "(III)F");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int(III)I" + "'", str22, "int(III)I");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(III)I" + "'", str23, "(III)I");
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        generator5.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass14 = generator5.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) typeArray25);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray25);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method32 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass14, "(III)S", classArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: (III)S");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str16, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(III)I" + "'", str26, "(III)I");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type3, type4, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        int int9 = type1.getSize();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type12, type13, type15 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray16);
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray16);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        java.lang.reflect.Method method27 = null;
        propertyDescriptor23.setReadMethod(method27);
        boolean boolean29 = propertyDescriptor23.isHidden();
        propertyDescriptor23.setShortDescription("hi!");
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("int", method37, method38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor39.setValue("", (java.lang.Object) generator41);
        java.lang.reflect.Method method43 = null;
        propertyDescriptor39.setReadMethod(method43);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        java.lang.reflect.Method method52 = null;
        propertyDescriptor48.setReadMethod(method52);
        boolean boolean54 = propertyDescriptor48.isHidden();
        propertyDescriptor48.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = new java.beans.PropertyDescriptor[] { propertyDescriptor23, propertyDescriptor35, propertyDescriptor39, propertyDescriptor48 };
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, false, false);
        java.lang.Class<?> wildcardClass61 = propertyDescriptorArray57.getClass();
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type[] typeArray63 = classInfo62.getInterfaces();
        org.mockito.cglib.core.Signature signature64 = new org.mockito.cglib.core.Signature("char", type1, typeArray63);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)I" + "'", str8, "(III)I");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(III)I" + "'", str17, "(III)I");
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(III)I" + "'", str19, "(III)I");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(typeArray63);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        boolean boolean19 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strEnumeration23);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        boolean boolean14 = classInfo10.equals((java.lang.Object) 1L);
        int int15 = classInfo10.getModifiers();
        org.mockito.asm.Type type16 = classInfo10.getType();
        org.mockito.asm.Type type17 = type16.getElementType();
        java.lang.String str18 = type16.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str18, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        generator15.setStyle((int) (byte) 1);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator24, 7, 6 };
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator15.setClasses(classArray30);
        java.lang.Class<?> wildcardClass33 = generator15.getClass();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("int", method35, method36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor37.setValue("", (java.lang.Object) generator39);
        boolean boolean41 = generator39.getUseCache();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type44, type45, type47 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray48);
        generator39.setDelegates((java.lang.Object[]) classArray50);
        java.lang.reflect.Constructor constructor52 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass33, classArray50);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor52);
        boolean boolean54 = classInfo9.equals((java.lang.Object) constructor52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type57, type58, type60 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray61);
        java.lang.Class<?> wildcardClass63 = typeArray61.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass63);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.String str69 = type68.getClassName();
        int int70 = type68.getSort();
        java.lang.ClassLoader classLoader71 = null;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type74, type75, type77 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) typeArray78);
        boolean boolean82 = type68.equals((java.lang.Object) typeArray78);
        int int83 = type68.getSort();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getReturnType("(III)I");
        boolean boolean87 = type84.equals((java.lang.Object) "(III)I");
        org.mockito.asm.Type[] typeArray89 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type84, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor52, (java.lang.Object[]) typeArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(III)I" + "'", str49, "(III)I");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(constructor52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "int" + "'", str59, "int");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(III)I" + "'", str62, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str66, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.mockito.asm.Type[]" + "'", str69, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "int" + "'", str73, "int");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "int" + "'", str76, "int");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(III)I" + "'", str79, "(III)I");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(III)V" + "'", str90, "(III)V");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str91, "(III)[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("java/lang/Object");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        propertyDescriptor6.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        java.lang.String str20 = classInfo19.toString();
        org.mockito.asm.Type type21 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray22 = classInfo19.getInterfaces();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor6.createPropertyEditor((java.lang.Object) classInfo19);
        java.lang.String str24 = classInfo19.toString();
        java.lang.String str25 = classInfo19.toString();
        org.mockito.asm.Type type26 = classInfo19.getType();
        org.mockito.asm.Type[] typeArray27 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=int; propertyEditorClass=class [Lorg.mockito.asm.Type;]", type2, typeArray27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=; expert; values={hi!=F}](III)[Lorg/mockito/asm/Type;");
        java.lang.String str31 = type30.toString();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("int", method33, method34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor35.setValue("", (java.lang.Object) generator37);
        generator37.setStyle((int) (byte) 1);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator46, 7, 6 };
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator37.setClasses(classArray52);
        java.lang.Class<?> wildcardClass55 = generator37.getClass();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("int", method57, method58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor59.setValue("", (java.lang.Object) generator61);
        boolean boolean63 = generator61.getUseCache();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str68 = type67.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type66, type67, type69 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray70);
        generator61.setDelegates((java.lang.Object[]) classArray72);
        java.lang.reflect.Constructor constructor74 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass55, classArray72);
        org.mockito.asm.Type[] typeArray75 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74, (int) (short) 1);
        org.mockito.cglib.core.Signature signature78 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74);
        int int80 = methodInfo79.getModifiers();
        org.mockito.cglib.core.Signature signature81 = methodInfo79.getSignature();
        org.mockito.asm.Type[] typeArray82 = signature81.getArgumentTypes();
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray82);
        boolean boolean84 = signature28.equals((java.lang.Object) type30);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.mockito.asm.Type[]" + "'", str20, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.Type[]" + "'", str24, "org.mockito.asm.Type[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.Type[]" + "'", str25, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lava.beans.PropertyDescriptor[name=;" + "'", str31, "Lava.beans.PropertyDescriptor[name=;");
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "int" + "'", str65, "int");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "int" + "'", str68, "int");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(III)I" + "'", str71, "(III)I");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(constructor74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(signature78);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(signature81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "()Lava.beans.PropertyDescriptor[name=;" + "'", str83, "()Lava.beans.PropertyDescriptor[name=;");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        boolean boolean8 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 1, (byte) 10 };
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        generator10.setUseCache(true);
        boolean boolean16 = generator10.getUseCache();
        generator10.setUseCache(false);
        boolean boolean19 = generator10.getUseCache();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type24, type25, type27 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type35, type36, type38 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray39);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray39);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray39);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray39);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        generator10.setClasses(classArray44);
        boolean boolean47 = generator10.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = generator10.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class49 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=V(III)Lint;; values={<init>()V=Lorg/mockito/cglib/proxy/Mixin$Generator;}]", byteArray4, classLoader48);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "int" + "'", str23, "int");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(III)I" + "'", str29, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)I" + "'", str40, "(III)I");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str42, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str43, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader48);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getSuperType();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        boolean boolean22 = generator20.getUseCache();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type25, type26, type28 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray29);
        generator20.setDelegates((java.lang.Object[]) classArray31);
        boolean boolean33 = classInfo10.equals((java.lang.Object) classArray31);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(III)I" + "'", str30, "(III)I");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        int int59 = methodInfo45.getModifiers();
        org.mockito.asm.Type[] typeArray60 = methodInfo45.getExceptionTypes();
        org.mockito.asm.Type[] typeArray61 = methodInfo45.getExceptionTypes();
        org.mockito.cglib.core.Signature signature62 = methodInfo45.getSignature();
        java.lang.String str63 = methodInfo45.toString();
        org.mockito.cglib.core.Signature signature64 = methodInfo45.getSignature();
        org.mockito.asm.Type type65 = signature64.getReturnType();
        java.lang.String str66 = signature64.toString();
        java.lang.String str67 = signature64.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(signature62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<init>()V" + "'", str63, "<init>()V");
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<init>()V" + "'", str66, "<init>()V");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<init>()V" + "'", str67, "<init>()V");
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method14 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type16 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray17);
        java.lang.String str21 = type10.getDescriptor();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        generator27.setStyle((int) (byte) 1);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        java.lang.Object[] objArray41 = new java.lang.Object[] { generator36, 7, 6 };
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator27.setClasses(classArray42);
        java.lang.Class<?> wildcardClass45 = generator27.getClass();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("int", method47, method48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor49.setValue("", (java.lang.Object) generator51);
        boolean boolean53 = generator51.getUseCache();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type56, type57, type59 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray60);
        generator51.setDelegates((java.lang.Object[]) classArray62);
        java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass45, classArray62);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        org.mockito.cglib.core.MethodInfo methodInfo67 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor64, 3);
        org.mockito.cglib.core.Signature signature68 = methodInfo67.getSignature();
        org.mockito.asm.Type type69 = signature68.getReturnType();
        boolean boolean71 = signature68.equals((java.lang.Object) "int(III)I");
        org.mockito.asm.Type[] typeArray72 = signature68.getArgumentTypes();
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray72);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(III)I" + "'", str18, "(III)I");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str20, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str21, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "int" + "'", str58, "int");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(III)I" + "'", str61, "(III)I");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(constructor64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "()V" + "'", str65, "()V");
        org.junit.Assert.assertNotNull(methodInfo67);
        org.junit.Assert.assertNotNull(signature68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "()[Lorg/mockito/asm/Type;" + "'", str73, "()[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        boolean boolean12 = generator5.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(false);
        generator13.setUseCache(false);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        generator23.setStyle((int) (byte) 1);
        generator23.setUseCache(true);
        boolean boolean29 = generator23.getUseCache();
        generator23.setUseCache(false);
        boolean boolean32 = generator23.getUseCache();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        generator46.setStyle((int) (byte) 1);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator55, 7, 6 };
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator46.setClasses(classArray61);
        generator38.setClasses(classArray61);
        java.lang.ClassLoader classLoader65 = null;
        generator38.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = generator38.getClassLoader();
        generator23.setClassLoader(classLoader67);
        generator13.setClassLoader(classLoader67);
        generator5.setClassLoader(classLoader67);
        boolean boolean71 = generator5.getUseCache();
        java.lang.ClassLoader classLoader72 = generator5.getClassLoader();
        java.lang.reflect.Method method74 = null;
        java.lang.reflect.Method method75 = null;
        java.beans.PropertyDescriptor propertyDescriptor76 = new java.beans.PropertyDescriptor("int", method74, method75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor76.setValue("", (java.lang.Object) generator78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator78.getNamingPolicy();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str85 = type84.getClassName();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] { type83, type84, type86 };
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray87);
        generator78.setClasses(classArray89);
        int int91 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "int" + "'", str82, "int");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "int" + "'", str85, "int");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(III)I" + "'", str88, "(III)I");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type17 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.beans.PropertyEditor propertyEditor22 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptorArray21);
        java.lang.Class<?> wildcardClass23 = propertyDescriptorArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.util.List list27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list28 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass23, list27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "int" + "'", str11, "int");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(III)I" + "'", str19, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNull(propertyEditor22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str26, "[Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java/util/Collections$EmptyEnumeration(III)F");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        generator48.setClasses(classArray58);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray58);
        org.mockito.cglib.core.Signature signature61 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60, 1053);
        org.mockito.asm.Type[] typeArray64 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor60);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor60);
        java.lang.String str66 = org.mockito.asm.Type.getConstructorDescriptor(constructor60);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(signature61);
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "()V" + "'", str65, "()V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "()V" + "'", str66, "()V");
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        generator53.setUseCache(false);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("int", method71, method72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor73.setValue("", (java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        java.lang.reflect.Method method79 = null;
        java.lang.reflect.Method method80 = null;
        java.beans.PropertyDescriptor propertyDescriptor81 = new java.beans.PropertyDescriptor("int", method79, method80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor81.setValue("", (java.lang.Object) generator83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator83.getNamingPolicy();
        generator75.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator75.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy87);
        generator53.setNamingPolicy(namingPolicy87);
        generator53.setAttemptLoad(true);
        generator53.setUseCache(true);
        java.lang.Class<?> wildcardClass94 = generator53.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        java.lang.Class<?> wildcardClass52 = generator34.getClass();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        boolean boolean60 = generator58.getUseCache();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type63, type64, type66 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray67);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass52, classArray69);
        org.mockito.asm.Type[] typeArray72 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray73 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        java.lang.String str74 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        java.lang.String str76 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        boolean boolean78 = classInfo25.equals((java.lang.Object) methodInfo77);
        org.mockito.asm.Type type79 = classInfo25.getSuperType();
        org.mockito.asm.Type type80 = classInfo25.getSuperType();
        int int81 = type80.getSize();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "int" + "'", str65, "int");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(III)I" + "'", str68, "(III)I");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()V" + "'", str74, "()V");
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()V" + "'", str76, "()V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = methodInfo46.getExceptionTypes();
        org.mockito.cglib.core.Signature signature48 = methodInfo46.getSignature();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type54 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass57);
        java.lang.String str60 = classInfo59.toString();
        org.mockito.asm.Type type61 = classInfo59.getSuperType();
        org.mockito.asm.Type[] typeArray62 = classInfo59.getInterfaces();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str64 = type63.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str67 = type66.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type65, type66, type68 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray69);
        java.lang.Class<?> wildcardClass71 = typeArray69.getClass();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        int int74 = type72.getOpcode(1);
        java.lang.String str75 = type72.getInternalName();
        boolean boolean76 = classInfo59.equals((java.lang.Object) str75);
        org.mockito.asm.Type type77 = classInfo59.getSuperType();
        int int78 = type77.getSize();
        boolean boolean79 = methodInfo46.equals((java.lang.Object) type77);
        org.mockito.cglib.core.Signature signature80 = methodInfo46.getSignature();
        java.lang.String str81 = signature80.getDescriptor();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "int" + "'", str50, "int");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(III)I" + "'", str56, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.mockito.asm.Type[]" + "'", str60, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "int" + "'", str64, "int");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "int" + "'", str67, "int");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(III)I" + "'", str70, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str75, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(signature80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "()V" + "'", str81, "()V");
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("()Lava.beans.PropertyDescriptor[name=Lorg/mockito/cglib/core/ReflectUtils$4;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        java.lang.Object[] objArray46 = null;
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray46);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 9);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) -1);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type type53 = signature52.getReturnType();
        org.mockito.asm.Type type54 = signature52.getReturnType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/lang/reflect/Constructor;", "Lava.beans.PropertyDescriptor[name=;");
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.cglib.core.Signature signature45 = methodInfo44.getSignature();
        org.mockito.asm.Type[] typeArray46 = methodInfo44.getExceptionTypes();
        int int47 = methodInfo44.getModifiers();
        int int48 = methodInfo44.getModifiers();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        java.lang.Class<?> wildcardClass57 = generator54.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass57);
        boolean boolean61 = methodInfo44.equals((java.lang.Object) propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()C", method1, method2);
        propertyDescriptor3.setConstrained(false);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V(III)Lint;", method1, method2);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("()[Lorg/mockito/asm/Type;");
        propertyDescriptor3.setHidden(true);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator14.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator5.getNamingPolicy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator34.getNamingPolicy();
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator34.setClassLoader(classLoader39);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator54.getStrategy();
        generator46.setStrategy(generatorStrategy56);
        generator34.setStrategy(generatorStrategy56);
        generator5.setStrategy(generatorStrategy56);
        generator5.setAttemptLoad(true);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("intint");
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType("(III)Lorg/mockito/asm/Type;");
        org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str70 = signature69.getName();
        org.mockito.asm.Type[] typeArray71 = signature69.getArgumentTypes();
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray71);
        org.mockito.cglib.core.Signature signature73 = new org.mockito.cglib.core.Signature("org.mockito.cglib.proxy.Mixin$Generator", type64, typeArray71);
        generator5.setDelegates((java.lang.Object[]) typeArray71);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "int" + "'", str70, "int");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(III)LIII)Lorg/mockito/asm/Type;" + "'", str72, "(III)LIII)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        boolean boolean8 = generator6.getUseCache();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray15);
        generator6.setDelegates((java.lang.Object[]) classArray17);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        generator24.setUseCache(true);
        boolean boolean30 = generator24.getUseCache();
        generator24.setUseCache(false);
        boolean boolean33 = generator24.getUseCache();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("int", method35, method36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor37.setValue("", (java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator39.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        generator47.setStyle((int) (byte) 1);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator56.getStrategy();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator56, 7, 6 };
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator47.setClasses(classArray62);
        generator39.setClasses(classArray62);
        java.lang.ClassLoader classLoader66 = null;
        generator39.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = generator39.getClassLoader();
        generator24.setClassLoader(classLoader68);
        generator6.setClassLoader(classLoader68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type73, type74, type76 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray77);
        java.lang.Class<?> wildcardClass79 = typeArray77.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray80 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass79);
        org.mockito.cglib.core.ClassInfo classInfo81 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = classInfo81.getSuperType();
        int int83 = classInfo81.getModifiers();
        org.mockito.asm.Type type84 = classInfo81.getType();
        org.mockito.asm.Type type85 = classInfo81.getType();
        org.mockito.asm.Type[] typeArray86 = classInfo81.getInterfaces();
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) typeArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor88 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; shortDescription=(III)I; values={hi!=F}]", classLoader68);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=int; shortDescription=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "int" + "'", str72, "int");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "int" + "'", str75, "int");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(III)I" + "'", str78, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(propertyDescriptorArray80);
        org.junit.Assert.assertNotNull(classInfo81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1041 + "'", int83 == 1041);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator5.getStrategy();
        generator5.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        int int46 = methodInfo45.getModifiers();
        java.lang.String str47 = methodInfo45.toString();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo45.getClassInfo();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        generator54.setUseCache(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator66, 7, 6 };
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray72);
        generator54.setClasses(classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator54.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator54.getNamingPolicy();
        boolean boolean79 = methodInfo45.equals((java.lang.Object) generator54);
        org.mockito.cglib.core.ClassInfo classInfo80 = methodInfo45.getClassInfo();
        org.mockito.asm.Type[] typeArray81 = classInfo80.getInterfaces();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classInfo80);
        org.junit.Assert.assertNotNull(typeArray81);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        int int14 = classInfo10.getModifiers();
        org.mockito.asm.Type type15 = classInfo10.getType();
        int int16 = classInfo10.getModifiers();
        org.mockito.asm.Type type17 = classInfo10.getType();
        org.mockito.asm.Type type18 = classInfo10.getSuperType();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        java.lang.String str26 = propertyDescriptor22.getShortDescription();
        java.lang.String str27 = propertyDescriptor22.getName();
        propertyDescriptor22.setBound(false);
        propertyDescriptor22.setShortDescription("int(III)I");
        propertyDescriptor22.setHidden(true);
        java.util.Enumeration<java.lang.String> strEnumeration34 = propertyDescriptor22.attributeNames();
        boolean boolean35 = classInfo10.equals((java.lang.Object) strEnumeration34);
        org.mockito.asm.Type type36 = classInfo10.getSuperType();
        org.mockito.asm.Type type37 = classInfo10.getSuperType();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        propertyDescriptor41.setBound(true);
        propertyDescriptor41.setPreferred(false);
        propertyDescriptor41.setShortDescription("()Lorg/mockito/cglib/proxy/Mixin$Generator;");
        boolean boolean48 = classInfo10.equals((java.lang.Object) "()Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1041 + "'", int14 == 1041);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1041 + "'", int16 == 1041);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "int" + "'", str26, "int");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "int" + "'", str27, "int");
        org.junit.Assert.assertNotNull(strEnumeration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo49.getClassInfo();
        org.mockito.asm.Type[] typeArray51 = methodInfo49.getExceptionTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) typeArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.asm.Type[] typeArray55 = methodInfo54.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(typeArray55);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()L<init>()V;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(III)I");
        boolean boolean3 = type0.equals((java.lang.Object) "(III)I");
        java.lang.ClassLoader classLoader4 = null;
        org.mockito.asm.Type[] typeArray6 = org.mockito.asm.Type.getArgumentTypes("(III)I");
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, (java.lang.Object[]) typeArray6);
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        generator14.setStyle((int) (byte) 1);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.Object[] objArray28 = new java.lang.Object[] { generator23, 7, 6 };
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator14.setClasses(classArray29);
        java.lang.Class<?> wildcardClass32 = generator14.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        boolean boolean40 = generator38.getUseCache();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type43, type44, type46 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray47);
        generator38.setDelegates((java.lang.Object[]) classArray49);
        java.lang.reflect.Constructor constructor51 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass32, classArray49);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor51);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor51);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor51);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor51);
        org.mockito.cglib.core.Signature signature56 = methodInfo55.getSignature();
        org.mockito.asm.Type[] typeArray57 = methodInfo55.getExceptionTypes();
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray57);
        java.lang.String str59 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(III)V" + "'", str8, "(III)V");
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "int" + "'", str42, "int");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "int" + "'", str45, "int");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(III)I" + "'", str48, "(III)I");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(constructor51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(signature56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "()V" + "'", str58, "()V");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "V" + "'", str59, "V");
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.cglib.core.Signature signature45 = methodInfo44.getSignature();
        org.mockito.asm.Type[] typeArray46 = methodInfo44.getExceptionTypes();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        generator60.setStyle((int) (byte) 1);
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("int", method65, method66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor67.setValue("", (java.lang.Object) generator69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator69, 7, 6 };
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator60.setClasses(classArray75);
        generator52.setClasses(classArray75);
        generator52.setUseCache(true);
        boolean boolean81 = methodInfo44.equals((java.lang.Object) generator52);
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("int", method83, method84);
        java.lang.reflect.Method method86 = null;
        propertyDescriptor85.setReadMethod(method86);
        propertyDescriptor85.setExpert(false);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor85.setValue("hi!", (java.lang.Object) type91);
        propertyDescriptor85.setBound(false);
        boolean boolean95 = methodInfo44.equals((java.lang.Object) false);
        org.mockito.cglib.core.Signature signature96 = methodInfo44.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo97 = methodInfo44.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(signature96);
        org.junit.Assert.assertNotNull(classInfo97);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        generator6.setStyle((int) (byte) 1);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator15, 7, 6 };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator6.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator6.getStrategy();
        java.lang.ClassLoader classLoader25 = generator6.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor26 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; expert; bound]", classLoader25);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=int; values={hi!=F}]]", "Lava.beans.PropertyDescriptor[name=int;");
        java.lang.String str3 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=int; values={hi!=F}]]Lava.beans.PropertyDescriptor[name=int;" + "'", str3, "java.beans.PropertyDescriptor[name=int; shortDescription=java.beans.PropertyDescriptor[name=int; values={hi!=F}]]Lava.beans.PropertyDescriptor[name=int;");
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.Object obj28 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str24, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        int int47 = methodInfo46.getModifiers();
        java.lang.Object obj48 = null;
        boolean boolean49 = methodInfo46.equals(obj48);
        org.mockito.cglib.core.Signature signature50 = methodInfo46.getSignature();
        java.lang.String str51 = methodInfo46.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>()V" + "'", str51, "<init>()V");
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("<init>", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        propertyDescriptor3.setShortDescription("Ljava/lang/Cloneable");
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<init>" + "'", str4, "<init>");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<init>" + "'", str10, "<init>");
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("(III)I");
        propertyDescriptor3.setShortDescription("Lint;");
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean14 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setUseCache(false);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        generator21.setStrategy(generatorStrategy32);
        generator21.setUseCache(false);
        generator21.setAttemptLoad(false);
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator21);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str43 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "int" + "'", str7, "int");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNull(propertyEditor38);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setName("org.mockito.asm.Type[]");
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        java.lang.String str18 = propertyDescriptor3.getName();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.mockito.asm.Type[]" + "'", str18, "org.mockito.asm.Type[]");
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("hi!");
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor19.setReadMethod(method23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        java.lang.reflect.Method method32 = null;
        propertyDescriptor28.setReadMethod(method32);
        boolean boolean34 = propertyDescriptor28.isHidden();
        propertyDescriptor28.setShortDescription("hi!");
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] { propertyDescriptor3, propertyDescriptor15, propertyDescriptor19, propertyDescriptor28 };
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.lang.Class<?> wildcardClass41 = propertyDescriptorArray37.getClass();
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass41);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, false);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray47);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str42, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        propertyDescriptor3.setBound(true);
        boolean boolean21 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.Object obj24 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray26 = org.mockito.asm.Type.getArgumentTypes("(III)V");
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray26);
        java.lang.reflect.Constructor constructor28 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray27);
        org.mockito.cglib.core.MethodInfo methodInfo29 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor28);
        org.mockito.cglib.core.ClassInfo classInfo30 = methodInfo29.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(constructor28);
        org.junit.Assert.assertNotNull(methodInfo29);
        org.junit.Assert.assertNotNull(classInfo30);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.ClassLoader classLoader1 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type4, type5, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, (java.lang.Object[]) typeArray8);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray8);
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray8);
        int int14 = type0.getSize();
        java.lang.String str15 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "int" + "'", str3, "int");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(III)I" + "'", str9, "(III)I");
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(III)F" + "'", str13, "(III)F");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/lang/Object;", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("int", method7, method8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor9.setValue("", (java.lang.Object) generator11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator11, 7, 6 };
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type26 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray38);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray38);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray38);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = mixin18.newInstance((java.lang.Object[]) strArray44);
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) mixin18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ljava/lang/Object;" + "'", str4, "Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "int" + "'", str22, "int");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "int" + "'", str25, "int");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(III)I" + "'", str28, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str41, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str42, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNull(propertyEditor46);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = methodInfo44.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo46 = methodInfo44.getClassInfo();
        java.lang.String str47 = classInfo46.toString();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        propertyDescriptor51.setExpert(true);
        propertyDescriptor51.setBound(false);
        java.lang.Object obj60 = propertyDescriptor51.getValue("V");
        boolean boolean61 = classInfo46.equals((java.lang.Object) propertyDescriptor51);
        java.lang.reflect.Method method62 = null;
        propertyDescriptor51.setWriteMethod(method62);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str47, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lint;");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lint;" + "'", str2, "Lint;");
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str46 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 56);
        org.mockito.asm.Type[] typeArray51 = methodInfo50.getExceptionTypes();
        java.lang.String str52 = methodInfo50.toString();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "()V" + "'", str46, "()V");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>()V" + "'", str52, "<init>()V");
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getSuperType();
        int int12 = classInfo10.getModifiers();
        org.mockito.asm.Type type13 = classInfo10.getType();
        org.mockito.asm.Type type14 = classInfo10.getType();
        int int15 = classInfo10.getModifiers();
        int int16 = classInfo10.getModifiers();
        int int17 = classInfo10.getModifiers();
        org.mockito.asm.Type type18 = classInfo10.getSuperType();
        int int20 = type18.getOpcode(22);
        int int21 = type18.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1041 + "'", int16 == 1041);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1041 + "'", int17 == 1041);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26 + "'", int20 == 26);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=V(III)Lint;; shortDescription=java.beans.PropertyDescriptor[name=(III)Lorg/mockito/asm/Type;; shortDescription=]; preferred; expert; constrained]", "org/mockito/cglib/core/DefaultNamingPolicy");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=V(III)Lint;; shortDescription=java.beans.PropertyDescriptor[name=(III)Lorg/mockito/asm/Type;; shortDescription=]; preferred; expert; constrained]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(III)I]");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type32 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.lang.String str38 = classInfo37.toString();
        org.mockito.asm.Type type39 = classInfo37.getSuperType();
        org.mockito.asm.Type type40 = classInfo37.getSuperType();
        org.mockito.asm.Type type41 = classInfo37.getType();
        org.mockito.asm.Type type42 = classInfo37.getType();
        org.mockito.asm.Type type43 = classInfo37.getSuperType();
        org.mockito.asm.Type type44 = classInfo37.getType();
        java.lang.String str45 = classInfo37.toString();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo37);
        org.mockito.asm.Type type47 = classInfo37.getType();
        org.mockito.asm.Type type48 = classInfo37.getType();
        java.lang.String str49 = classInfo37.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "int" + "'", str31, "int");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(III)I" + "'", str34, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.mockito.asm.Type[]" + "'", str38, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.mockito.asm.Type[]" + "'", str45, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.mockito.asm.Type[]" + "'", str49, "org.mockito.asm.Type[]");
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator5, 7, 6 };
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class<?> wildcardClass15 = classArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("");
        propertyDescriptor3.setConstrained(true);
        boolean boolean18 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=; expert; values={hi!=F}](III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSort();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("int", method13, method14);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor15.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor15.getName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        propertyDescriptor15.setValue("I", (java.lang.Object) propertyDescriptorArray29);
        propertyDescriptor15.setHidden(false);
        boolean boolean33 = type10.equals((java.lang.Object) propertyDescriptor15);
        java.lang.String str34 = propertyDescriptor15.getDisplayName();
        java.lang.reflect.Method method35 = null;
        propertyDescriptor15.setReadMethod(method35);
        java.lang.String str37 = propertyDescriptor15.getDisplayName();
        java.lang.String str38 = propertyDescriptor15.getName();
        java.lang.String str39 = propertyDescriptor15.getShortDescription();
        propertyDescriptor15.setConstrained(true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "int" + "'", str18, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "int" + "'", str34, "int");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "int" + "'", str37, "int");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "int" + "'", str39, "int");
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        propertyDescriptor3.setValue("I", (java.lang.Object) propertyDescriptorArray17);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, false, true);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        java.lang.Class<?> wildcardClass25 = methodArray24.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("Lorg/mockito/cglib/core/ReflectUtils$3;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()[Ljava/beans/PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        generator5.setUseCache(true);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        java.lang.Object[] objArray38 = new java.lang.Object[] { generator33, 7, 6 };
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator24.setClasses(classArray39);
        generator16.setClasses(classArray39);
        java.lang.ClassLoader classLoader43 = null;
        generator16.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator16.getStrategy();
        generator5.setStrategy(generatorStrategy45);
        generator5.setUseCache(false);
        generator5.setUseCache(false);
        boolean boolean51 = generator5.getAttemptLoad();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("int", method53, method54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor55.setValue("", (java.lang.Object) generator57);
        boolean boolean59 = generator57.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        generator57.setUseCache(false);
        generator57.setAttemptLoad(false);
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("int", method67, method68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor69.setValue("", (java.lang.Object) generator71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator71.getStrategy();
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("int", method75, method76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor77.setValue("", (java.lang.Object) generator79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator71.setStrategy(generatorStrategy81);
        generator57.setStrategy(generatorStrategy81);
        generator5.setStrategy(generatorStrategy81);
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo48.getClassInfo();
        java.lang.String str50 = methodInfo48.toString();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        java.lang.String str62 = classInfo61.toString();
        org.mockito.asm.Type type63 = classInfo61.getSuperType();
        org.mockito.asm.Type type64 = classInfo61.getSuperType();
        org.mockito.asm.Type type65 = classInfo61.getType();
        boolean boolean66 = methodInfo48.equals((java.lang.Object) type65);
        java.lang.String str67 = methodInfo48.toString();
        org.mockito.cglib.core.Signature signature68 = methodInfo48.getSignature();
        org.mockito.asm.Type type69 = signature68.getReturnType();
        org.mockito.cglib.core.Signature signature72 = new org.mockito.cglib.core.Signature("int", "(III)I");
        java.lang.String str73 = signature72.getName();
        org.mockito.asm.Type[] typeArray74 = signature72.getArgumentTypes();
        boolean boolean75 = type69.equals((java.lang.Object) signature72);
        org.mockito.asm.Type type76 = signature72.getReturnType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.Type[]" + "'", str62, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<init>()V" + "'", str67, "<init>()V");
        org.junit.Assert.assertNotNull(signature68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "int" + "'", str73, "int");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type76);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        org.mockito.asm.Type type14 = classInfo12.getType();
        org.mockito.asm.Type[] typeArray15 = classInfo12.getInterfaces();
        java.lang.String str16 = classInfo12.toString();
        org.mockito.asm.Type[] typeArray17 = classInfo12.getInterfaces();
        org.mockito.asm.Type type18 = classInfo12.getType();
        int int20 = type18.getOpcode((int) '4');
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type[]" + "'", str16, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 56 + "'", int20 == 56);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()LV;", method1, method2);
        propertyDescriptor3.setConstrained(true);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        java.lang.Class<?> wildcardClass9 = generator6.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str11 = type10.getClassName();
        int int12 = type10.getDimensions();
        org.mockito.asm.Type type13 = type10.getElementType();
        int int15 = type10.getOpcode(18);
        java.lang.String str16 = type10.getInternalName();
        org.mockito.asm.Type[] typeArray18 = org.mockito.asm.Type.getArgumentTypes("()Lava.beans.PropertyDescriptor[name=int;");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor)L(III)[Lorg/mockito/asm/Type", type10, typeArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor)L(III)[Lorg/mockito/asm/Type' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str11, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str16, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(typeArray18);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setName("(III)S");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isExpert();
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNull(method22);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator5.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        int int46 = methodInfo45.getModifiers();
        org.mockito.cglib.core.Signature signature47 = methodInfo45.getSignature();
        java.lang.String str48 = methodInfo45.toString();
        org.mockito.cglib.core.Signature signature49 = methodInfo45.getSignature();
        java.lang.String str50 = methodInfo45.toString();
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo45.getClassInfo();
        org.mockito.cglib.core.Signature signature52 = methodInfo45.getSignature();
        int int53 = methodInfo45.getModifiers();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>()V" + "'", str48, "<init>()V");
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        propertyDescriptor3.setValue("I", (java.lang.Object) propertyDescriptorArray17);
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setWriteMethod(method22);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("int", method12, method13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor14.setValue("", (java.lang.Object) generator16);
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator33.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator25.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("int", "(III)I");
        org.mockito.asm.Type type42 = signature41.getReturnType();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("int", method44, method45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor46.setValue("", (java.lang.Object) generator48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator48, 7, 6 };
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        boolean boolean56 = signature41.equals((java.lang.Object) classArray54);
        java.lang.String str57 = signature41.getDescriptor();
        org.mockito.asm.Type[] typeArray58 = signature41.getArgumentTypes();
        generator16.setDelegates((java.lang.Object[]) typeArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator16.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor61 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator16.getStrategy();
        generator16.setUseCache(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNull(propertyEditor61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("I");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=int; displayName=(III)F; expert; values={hi!=F}; constrained]");
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(strEnumeration8);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type33, type34, type36 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray37);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray37);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray37);
        generator5.setDelegates((java.lang.Object[]) typeArray37);
        boolean boolean44 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator5.getStrategy();
        boolean boolean46 = generator5.getUseCache();
        boolean boolean47 = generator5.getAttemptLoad();
        boolean boolean48 = generator5.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "int" + "'", str21, "int");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "int" + "'", str24, "int");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(III)I" + "'", str27, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "int" + "'", str35, "int");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(III)I" + "'", str38, "(III)I");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str40, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str41, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        generator10.setUseCache(true);
        boolean boolean16 = generator10.getUseCache();
        generator10.setUseCache(false);
        boolean boolean19 = generator10.getUseCache();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("int", method21, method22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor23.setValue("", (java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("int", method29, method30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor31.setValue("", (java.lang.Object) generator33);
        generator33.setStyle((int) (byte) 1);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator42, 7, 6 };
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator33.setClasses(classArray48);
        generator25.setClasses(classArray48);
        java.lang.ClassLoader classLoader52 = null;
        generator25.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = generator25.getClassLoader();
        generator10.setClassLoader(classLoader54);
        generator0.setClassLoader(classLoader54);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
        boolean boolean60 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass7 = generator5.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.Object obj10 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass7, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str8, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str11, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("org.mockito.asm.Type[]");
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("Lorg/mockito/cglib/core/ReflectUtils$3;");
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("int", method17, method18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor19.setValue("", (java.lang.Object) generator21);
        generator21.setStyle((int) (byte) 1);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator30, 7, 6 };
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator21.setClasses(classArray36);
        java.lang.Class<?> wildcardClass39 = generator21.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo42 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        java.beans.PropertyEditor propertyEditor43 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass39);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("int", method45, method46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor47.setValue("", (java.lang.Object) generator49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type56 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.reflect.Constructor constructor62 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass39, classArray59);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str40, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertNull(propertyEditor43);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "int" + "'", str52, "int");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "int" + "'", str55, "int");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(III)I" + "'", str58, "(III)I");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(constructor62);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass8, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str11, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo47 = methodInfo46.getClassInfo();
        int int48 = classInfo47.getModifiers();
        org.mockito.asm.Type type49 = classInfo47.getSuperType();
        java.lang.String str50 = classInfo47.toString();
        java.lang.String str51 = classInfo47.toString();
        boolean boolean53 = classInfo47.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str50, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str51, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setDisplayName("(III)V");
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(true);
        boolean boolean13 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=int; shortDescription=long]");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        boolean boolean14 = classInfo10.equals((java.lang.Object) 1L);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("int", method16, method17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor18.setValue("", (java.lang.Object) generator20);
        generator20.setStyle((int) (byte) 1);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator29, 7, 6 };
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator20.setClasses(classArray35);
        java.lang.Class<?> wildcardClass38 = generator20.getClass();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("int", method40, method41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor42.setValue("", (java.lang.Object) generator44);
        boolean boolean46 = generator44.getUseCache();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type52 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray53);
        generator44.setDelegates((java.lang.Object[]) classArray55);
        java.lang.reflect.Constructor constructor57 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass38, classArray55);
        org.mockito.asm.Type[] typeArray58 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo60 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57, (int) (short) 1);
        org.mockito.cglib.core.Signature signature61 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.Signature signature63 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.Signature signature64 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.mockito.asm.Type[] typeArray65 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        java.lang.String str66 = org.mockito.asm.Type.getConstructorDescriptor(constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo67 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        boolean boolean68 = classInfo10.equals((java.lang.Object) constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo69 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.Signature signature70 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor57);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "int" + "'", str48, "int");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(III)I" + "'", str54, "(III)I");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(constructor57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(methodInfo60);
        org.junit.Assert.assertNotNull(signature61);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertNotNull(signature63);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "()V" + "'", str66, "()V");
        org.junit.Assert.assertNotNull(methodInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(methodInfo69);
        org.junit.Assert.assertNotNull(signature70);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = methodInfo46.toString();
        org.mockito.asm.Type[] typeArray48 = methodInfo46.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo46.getClassInfo();
        org.mockito.cglib.core.Signature signature50 = methodInfo46.getSignature();
        org.mockito.asm.Type[] typeArray51 = methodInfo46.getExceptionTypes();
        org.mockito.asm.Type[] typeArray52 = methodInfo46.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = type9.getElementType();
        org.mockito.asm.Type type11 = type9.getElementType();
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("int", method14, method15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor16.setValue("", (java.lang.Object) generator18);
        generator18.setStyle((int) (byte) 1);
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator27, 7, 6 };
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator18.setClasses(classArray33);
        java.lang.Class<?> wildcardClass36 = generator18.getClass();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("int", method38, method39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor40.setValue("", (java.lang.Object) generator42);
        boolean boolean44 = generator42.getUseCache();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type47, type48, type50 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray51);
        generator42.setDelegates((java.lang.Object[]) classArray53);
        java.lang.reflect.Constructor constructor55 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass36, classArray53);
        org.mockito.asm.Type[] typeArray56 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor55);
        org.mockito.asm.Type[] typeArray57 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor55);
        java.lang.String str58 = org.mockito.asm.Type.getConstructorDescriptor(constructor55);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor55);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor55, 4);
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo61.getClassInfo();
        java.lang.String str63 = methodInfo61.toString();
        org.mockito.cglib.core.ClassInfo classInfo64 = methodInfo61.getClassInfo();
        org.mockito.asm.Type[] typeArray65 = classInfo64.getInterfaces();
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray65);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "int" + "'", str46, "int");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "int" + "'", str49, "int");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(III)I" + "'", str52, "(III)I");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(constructor55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "()V" + "'", str58, "()V");
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<init>()V" + "'", str63, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str66, "()Lg/mockito/asm/Type;");
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) propertyDescriptorArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor6.setValue("", (java.lang.Object) generator8);
        boolean boolean10 = generator8.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        generator8.setUseCache(false);
        generator8.setAttemptLoad(false);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("int", method27, method28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor29.setValue("", (java.lang.Object) generator31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("int", method35, method36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor37.setValue("", (java.lang.Object) generator39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator39.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator31.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator22.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy45);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("int", method48, method49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor50.setValue("", (java.lang.Object) generator52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("int", method56, method57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor58.setValue("", (java.lang.Object) generator60);
        generator60.setStyle((int) (byte) 1);
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("int", method65, method66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor67.setValue("", (java.lang.Object) generator69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator69, 7, 6 };
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator60.setClasses(classArray75);
        generator52.setClasses(classArray75);
        java.lang.ClassLoader classLoader79 = null;
        generator52.setClassLoader(classLoader79);
        java.lang.ClassLoader classLoader81 = generator52.getClassLoader();
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("int", method83, method84);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor85.setValue("", (java.lang.Object) generator87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator87.getStrategy();
        java.lang.Object[] objArray92 = new java.lang.Object[] { generator87, 7, 6 };
        java.lang.Class[] classArray93 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        int int95 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray93);
        generator8.setClassLoader(classLoader81);
        java.lang.ClassLoader classLoader98 = generator8.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class99 = org.mockito.cglib.core.ReflectUtils.defineClass("hi!", byteArray2, classLoader98);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classLoader98);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setShortDescription("");
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("ava.beans.PropertyDescriptor[name=int");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        propertyDescriptor3.setValue("hi!", (java.lang.Object) type9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("(III)I");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type20 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str26 = classInfo25.toString();
        org.mockito.asm.Type type27 = classInfo25.getSuperType();
        propertyDescriptor3.setValue("I", (java.lang.Object) classInfo25);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        generator34.setStyle((int) (byte) 1);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator43, 7, 6 };
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator34.setClasses(classArray49);
        java.lang.Class<?> wildcardClass52 = generator34.getClass();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        boolean boolean60 = generator58.getUseCache();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str65 = type64.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type63, type64, type66 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray67);
        generator58.setDelegates((java.lang.Object[]) classArray69);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass52, classArray69);
        org.mockito.asm.Type[] typeArray72 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray73 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        java.lang.String str74 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        java.lang.String str76 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        boolean boolean78 = classInfo25.equals((java.lang.Object) methodInfo77);
        java.lang.String str79 = classInfo25.toString();
        org.mockito.asm.Type type80 = classInfo25.getType();
        int int81 = classInfo25.getModifiers();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "int" + "'", str16, "int");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(III)I" + "'", str22, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type[]" + "'", str26, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "int" + "'", str62, "int");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "int" + "'", str65, "int");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(III)I" + "'", str68, "(III)I");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()V" + "'", str74, "()V");
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()V" + "'", str76, "()V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.asm.Type[]" + "'", str79, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1041 + "'", int81 == 1041);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(III)I; propertyEditorClass=class [Lorg.mockito.asm.Type;]");
        boolean boolean12 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type47 = classInfo46.getSuperType();
        org.mockito.asm.Type type48 = classInfo46.getType();
        java.lang.String str49 = type48.toString();
        int int51 = type48.getOpcode(26);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str44, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str45, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str49, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 30 + "'", int51 == 30);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 10);
        org.mockito.cglib.core.ClassInfo classInfo53 = methodInfo52.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(classInfo53);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.Signature signature46 = methodInfo45.getSignature();
        org.mockito.asm.Type[] typeArray47 = methodInfo45.getExceptionTypes();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("int", method49, method50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor51.setValue("", (java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        boolean boolean58 = methodInfo45.equals((java.lang.Object) generator53);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator53.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator53.getNamingPolicy();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; constrained]");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("int", method4, method5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor6.setValue("", (java.lang.Object) generator8);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor6.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor6.isHidden();
        propertyDescriptor6.setExpert(false);
        java.lang.String str15 = propertyDescriptor6.getShortDescription();
        boolean boolean16 = propertyDescriptor6.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor6.attributeNames();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor6.setReadMethod(method18);
        java.lang.String str20 = propertyDescriptor6.getDisplayName();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.Class<?> wildcardClass24 = generator21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(false);
        generator26.setUseCache(false);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("int", method32, method33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor34.setValue("", (java.lang.Object) generator36);
        boolean boolean38 = generator36.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        generator36.setUseCache(false);
        generator36.setAttemptLoad(false);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("int", method46, method47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor48.setValue("", (java.lang.Object) generator50);
        generator50.setStyle((int) (byte) 1);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor57.setValue("", (java.lang.Object) generator59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator59.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy61);
        generator36.setNamingPolicy(namingPolicy61);
        generator26.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray65 = new java.lang.Class[] {};
        java.lang.String[] strArray66 = org.mockito.cglib.core.ReflectUtils.getNames(classArray65);
        generator26.setClasses(classArray65);
        java.lang.reflect.Constructor constructor68 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass24, classArray65);
        java.beans.PropertyEditor propertyEditor69 = propertyDescriptor6.createPropertyEditor((java.lang.Object) constructor68);
        org.mockito.cglib.core.MethodInfo methodInfo71 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor68, 102);
        org.mockito.asm.Type[] typeArray72 = methodInfo71.getExceptionTypes();
        org.mockito.cglib.core.Signature signature73 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=int; displayName=ava.beans.PropertyDescriptor[name=int; shortDescription=; values={hi!=F}]", type2, typeArray72);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "int" + "'", str15, "int");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "int" + "'", str20, "int");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(constructor68);
        org.junit.Assert.assertNull(propertyEditor69);
        org.junit.Assert.assertNotNull(methodInfo71);
        org.junit.Assert.assertNotNull(typeArray72);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "()V" + "'", str49, "()V");
        org.junit.Assert.assertNotNull(methodInfo50);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "int(III)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("int", method6, method7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor8.setValue("", (java.lang.Object) generator10);
        generator10.setStyle((int) (byte) 1);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("int", method15, method16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor17.setValue("", (java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator19, 7, 6 };
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator10.setClasses(classArray25);
        java.lang.Class<?> wildcardClass28 = generator10.getClass();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("int", method30, method31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor32.setValue("", (java.lang.Object) generator34);
        boolean boolean36 = generator34.getUseCache();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type42 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray43);
        generator34.setDelegates((java.lang.Object[]) classArray45);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass28, classArray45);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray52 = methodInfo50.getExceptionTypes();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("int", method54, method55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor56.setValue("", (java.lang.Object) generator58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator58.getNamingPolicy();
        generator58.setUseCache(true);
        boolean boolean63 = methodInfo50.equals((java.lang.Object) generator58);
        java.lang.Class<?> wildcardClass64 = generator58.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        boolean boolean66 = signature2.equals((java.lang.Object) wildcardClass64);
        java.lang.String str67 = signature2.getName();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("int", method69, method70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor71.setValue("", (java.lang.Object) generator73);
        java.lang.reflect.Method method75 = null;
        propertyDescriptor71.setReadMethod(method75);
        boolean boolean77 = propertyDescriptor71.isHidden();
        propertyDescriptor71.setExpert(false);
        java.lang.String str80 = propertyDescriptor71.getShortDescription();
        boolean boolean81 = propertyDescriptor71.isPreferred();
        propertyDescriptor71.setDisplayName("java.beans.PropertyDescriptor[name=int; values={hi!=F}]");
        boolean boolean84 = signature2.equals((java.lang.Object) propertyDescriptor71);
        java.lang.String str85 = signature2.getName();
        java.lang.String str86 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "int(III)I" + "'", str3, "int(III)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "int" + "'", str38, "int");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "int" + "'", str41, "int");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(III)I" + "'", str44, "(III)I");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "int" + "'", str80, "int");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo49.getClassInfo();
        org.mockito.asm.Type[] typeArray51 = methodInfo49.getExceptionTypes();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type57 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray58.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        boolean boolean66 = methodInfo49.equals((java.lang.Object) propertyDescriptorArray65);
        java.lang.String str67 = methodInfo49.toString();
        java.lang.String str68 = methodInfo49.toString();
        org.mockito.cglib.core.ClassInfo classInfo69 = methodInfo49.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "int" + "'", str53, "int");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)I" + "'", str59, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<init>()V" + "'", str67, "<init>()V");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "<init>()V" + "'", str68, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo69);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (byte) 1);
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo49.getClassInfo();
        org.mockito.asm.Type type51 = classInfo50.getType();
        org.mockito.asm.Type type52 = type51.getElementType();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        int int14 = classInfo10.getModifiers();
        org.mockito.asm.Type type15 = classInfo10.getType();
        int int16 = classInfo10.getModifiers();
        org.mockito.asm.Type type17 = classInfo10.getType();
        org.mockito.asm.Type type18 = classInfo10.getSuperType();
        org.mockito.asm.Type type19 = type18.getElementType();
        org.mockito.asm.Type type20 = type19.getElementType();
        int int21 = type19.getDimensions();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("int", method23, method24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor25.setValue("", (java.lang.Object) generator27);
        generator27.setStyle((int) (byte) 1);
        generator27.setUseCache(true);
        boolean boolean33 = generator27.getUseCache();
        generator27.setUseCache(false);
        boolean boolean36 = generator27.getUseCache();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("(III)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type41, type42, type44 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray45.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray56);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray56);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray56);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        generator27.setClasses(classArray61);
        java.lang.ClassLoader classLoader64 = generator27.getClassLoader();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type67, type68, type70 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray71);
        java.lang.Class<?> wildcardClass73 = typeArray71.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray74 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass73);
        org.mockito.cglib.core.ClassInfo classInfo75 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass73);
        org.mockito.cglib.core.ClassInfo classInfo76 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass73);
        org.mockito.cglib.core.ClassInfo classInfo77 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type78 = classInfo77.getSuperType();
        org.mockito.asm.Type type79 = classInfo77.getType();
        org.mockito.asm.Type[] typeArray80 = classInfo77.getInterfaces();
        org.mockito.asm.Type[] typeArray81 = classInfo77.getInterfaces();
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) typeArray81);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray81);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1041 + "'", int14 == 1041);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1041 + "'", int16 == 1041);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "int" + "'", str40, "int");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "int" + "'", str43, "int");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(III)I" + "'", str46, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str59, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(III)[Lorg/mockito/asm/Type;" + "'", str60, "(III)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "int" + "'", str66, "int");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "int" + "'", str69, "int");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(III)I" + "'", str72, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(propertyDescriptorArray74);
        org.junit.Assert.assertNotNull(classInfo75);
        org.junit.Assert.assertNotNull(classInfo76);
        org.junit.Assert.assertNotNull(classInfo77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lva/lang/Object;" + "'", str83, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)Lva/lang/Object;");
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("int", method18, method19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor20.setValue("", (java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("int", method26, method27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor28.setValue("", (java.lang.Object) generator30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator30.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator22.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy36);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("int", method39, method40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor41.setValue("", (java.lang.Object) generator43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator43.setClassLoader(classLoader48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type55 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray56);
        java.lang.Class<?> wildcardClass58 = typeArray56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = classInfo60.getSuperType();
        int int62 = classInfo60.getModifiers();
        org.mockito.asm.Type type63 = classInfo60.getType();
        org.mockito.asm.Type type64 = classInfo60.getSuperType();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("int", method66, method67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor68.setValue("", (java.lang.Object) generator70);
        boolean boolean72 = generator70.getUseCache();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type75, type76, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray79);
        generator70.setDelegates((java.lang.Object[]) classArray81);
        boolean boolean83 = classInfo60.equals((java.lang.Object) classArray81);
        java.lang.String[] strArray84 = org.mockito.cglib.core.ReflectUtils.getNames(classArray81);
        generator43.setClasses(classArray81);
        generator5.setClasses(classArray81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator5.getStrategy();
        java.lang.Object[] objArray88 = null;
        generator5.setDelegates(objArray88);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "int" + "'", str51, "int");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "int" + "'", str54, "int");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(III)I" + "'", str57, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1041 + "'", int62 == 1041);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(III)I" + "'", str80, "(III)I");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.lang.Object obj11 = null;
        boolean boolean12 = classInfo9.equals(obj11);
        org.mockito.asm.Type type13 = classInfo9.getType();
        java.lang.String str14 = classInfo9.toString();
        org.mockito.asm.Type type15 = classInfo9.getType();
        org.mockito.asm.Type[] typeArray16 = classInfo9.getInterfaces();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.mockito.asm.Type[]" + "'", str14, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type33 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int44 = type43.getSize();
        int int46 = type43.getOpcode(36);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str24, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str25, "org/mockito/cglib/proxy/Mixin$Generator");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "int" + "'", str29, "int");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "int" + "'", str32, "int");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(III)I" + "'", str35, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 40 + "'", int46 == 40);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("int");
        boolean boolean22 = propertyDescriptor3.isExpert();
        boolean boolean23 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        propertyDescriptor3.setConstrained(true);
        boolean boolean20 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(III)I]", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("Lint;<init>");
        propertyDescriptor3.setValue("org.mockito.asm.Type", (java.lang.Object) "Lint;<init>");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lava.beans.PropertyDescriptor[name=int;Lorg/mockito/cglib/core/ReflectUtils$3;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        boolean boolean7 = generator5.getUseCache();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setDelegates((java.lang.Object[]) classArray16);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("int", method19, method20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor21.setValue("", (java.lang.Object) generator23);
        generator23.setStyle((int) (byte) 1);
        generator23.setUseCache(true);
        boolean boolean29 = generator23.getUseCache();
        generator23.setUseCache(false);
        boolean boolean32 = generator23.getUseCache();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("int", method34, method35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor36.setValue("", (java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("int", method42, method43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor44.setValue("", (java.lang.Object) generator46);
        generator46.setStyle((int) (byte) 1);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("int", method51, method52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor53.setValue("", (java.lang.Object) generator55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator55, 7, 6 };
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator46.setClasses(classArray61);
        generator38.setClasses(classArray61);
        java.lang.ClassLoader classLoader65 = null;
        generator38.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = generator38.getClassLoader();
        generator23.setClassLoader(classLoader67);
        generator5.setClassLoader(classLoader67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator5.getStrategy();
        boolean boolean71 = generator5.getAttemptLoad();
        java.lang.reflect.Method method73 = null;
        java.lang.reflect.Method method74 = null;
        java.beans.PropertyDescriptor propertyDescriptor75 = new java.beans.PropertyDescriptor("int", method73, method74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor75.setValue("", (java.lang.Object) generator77);
        generator77.setStyle((int) (byte) 1);
        java.lang.reflect.Method method82 = null;
        java.lang.reflect.Method method83 = null;
        java.beans.PropertyDescriptor propertyDescriptor84 = new java.beans.PropertyDescriptor("int", method82, method83);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor84.setValue("", (java.lang.Object) generator86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator86.getStrategy();
        java.lang.Object[] objArray91 = new java.lang.Object[] { generator86, 7, 6 };
        java.lang.Class[] classArray92 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        generator77.setClasses(classArray92);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator77.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 4);
        int int49 = methodInfo48.getModifiers();
        org.mockito.cglib.core.Signature signature50 = methodInfo48.getSignature();
        java.lang.String str51 = signature50.toString();
        org.mockito.asm.Type[] typeArray52 = signature50.getArgumentTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(signature50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>()V" + "'", str51, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray52);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        int int47 = methodInfo46.getModifiers();
        org.mockito.asm.Type[] typeArray48 = methodInfo46.getExceptionTypes();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(typeArray48);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj12 = propertyDescriptor3.getValue("(III)[Lorg/mockito/asm/Type;");
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        java.lang.String str16 = propertyDescriptor3.getName();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(III)I" + "'", str13, "(III)I");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(III)I" + "'", str17, "(III)I");
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        generator5.setUseCache(true);
        generator5.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader21 = null;
        generator5.setClassLoader(classLoader21);
        generator5.setUseCache(true);
        boolean boolean25 = generator5.getUseCache();
        boolean boolean26 = generator5.getAttemptLoad();
        boolean boolean27 = generator5.getUseCache();
        boolean boolean28 = generator5.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("int", method11, method12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor13.setValue("", (java.lang.Object) generator15);
        propertyDescriptor13.setExpert(true);
        java.lang.String str19 = propertyDescriptor13.getDisplayName();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor13.getClass();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "int" + "'", str19, "int");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.Object obj13 = propertyDescriptor3.getValue("(III)LIII)Lorg/mockito/asm/Type;");
        boolean boolean14 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("()Lava.beans.PropertyDescriptor[name=int;");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.cglib.core.ReflectUtils$3");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setBound(true);
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("java/lang/Object");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strEnumeration16);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, 3);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray47 = methodInfo46.getExceptionTypes();
        int int48 = methodInfo46.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo46.getClassInfo();
        java.lang.Object obj50 = null;
        boolean boolean51 = methodInfo46.equals(obj50);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(III)I", method1, method2);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(III)I; preferred]");
        propertyDescriptor3.setName("(III)I");
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 100);
        org.mockito.cglib.core.Signature signature45 = methodInfo44.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo46 = methodInfo44.getClassInfo();
        org.mockito.asm.Type[] typeArray47 = methodInfo44.getExceptionTypes();
        org.mockito.asm.Type[] typeArray48 = methodInfo44.getExceptionTypes();
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray48);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("int", method9, method10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor11.setValue("", (java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy15);
        generator5.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator5.getNamingPolicy();
        generator5.setUseCache(false);
        boolean boolean22 = generator5.getAttemptLoad();
        generator5.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 18");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.Object obj13 = propertyDescriptor3.getValue("(III)LIII)Lorg/mockito/asm/Type;");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "int" + "'", str14, "int");
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = methodInfo46.toString();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo46.getClassInfo();
        org.mockito.asm.Type[] typeArray49 = methodInfo46.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo46.getClassInfo();
        java.lang.String str51 = methodInfo46.toString();
        org.mockito.cglib.core.ClassInfo classInfo52 = methodInfo46.getClassInfo();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>()V" + "'", str51, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo52);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("int", method8, method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor10.setReadMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setShortDescription("");
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj23 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=int; bound]");
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setWriteMethod(method24);
        propertyDescriptor3.setBound(false);
        java.lang.String str28 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method29 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "int" + "'", str28, "int");
        org.junit.Assert.assertNull(method29);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray14);
        generator5.setClasses(classArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin18 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "int" + "'", str9, "int");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(III)I" + "'", str15, "(III)I");
        org.junit.Assert.assertNotNull(classArray16);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(III)Ljava/lang/Object;");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ljava/lang/Object;" + "'", str2, "Ljava/lang/Object;");
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("LLint;;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        int int12 = classInfo10.getModifiers();
        java.lang.String str13 = classInfo10.toString();
        org.mockito.asm.Type type14 = classInfo10.getSuperType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type[]" + "'", str11, "org.mockito.asm.Type[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type[]" + "'", str13, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=int; bound]");
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setName("org.mockito.asm.Type");
        propertyDescriptor3.setName("V(III)Lint;");
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("int");
        java.lang.String str17 = type16.getInternalName();
        java.lang.String str18 = type16.getDescriptor();
        int int19 = type16.getSize();
        java.lang.String str20 = type16.getDescriptor();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str20);
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method25 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method26 = null;
        propertyDescriptor3.setReadMethod(method26);
        propertyDescriptor3.setConstrained(false);
        java.lang.String str30 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "V(III)Lint;" + "'", str14, "V(III)Lint;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "int" + "'", str17, "int");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lint;" + "'", str18, "Lint;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lint;" + "'", str20, "Lint;");
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "V(III)Lint;" + "'", str30, "V(III)Lint;");
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        generator5.setStyle(2);
        generator5.setUseCache(true);
        generator5.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 19");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("int", method2, method3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor4.setValue("", (java.lang.Object) generator6);
        boolean boolean8 = generator6.getUseCache();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type11, type12, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray15);
        generator6.setDelegates((java.lang.Object[]) classArray17);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("int", method20, method21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor22.setValue("", (java.lang.Object) generator24);
        generator24.setStyle((int) (byte) 1);
        generator24.setUseCache(true);
        boolean boolean30 = generator24.getUseCache();
        generator24.setUseCache(false);
        boolean boolean33 = generator24.getUseCache();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("int", method35, method36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor37.setValue("", (java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator39.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("int", method43, method44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor45.setValue("", (java.lang.Object) generator47);
        generator47.setStyle((int) (byte) 1);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("int", method52, method53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor54.setValue("", (java.lang.Object) generator56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator56.getStrategy();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator56, 7, 6 };
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator47.setClasses(classArray62);
        generator39.setClasses(classArray62);
        java.lang.ClassLoader classLoader66 = null;
        generator39.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = generator39.getClassLoader();
        generator24.setClassLoader(classLoader68);
        generator6.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader71 = generator6.getClassLoader();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type75, type76, type78 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray79);
        java.lang.Class<?> wildcardClass81 = typeArray79.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.ClassInfo classInfo83 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass81);
        java.lang.String str84 = classInfo83.toString();
        org.mockito.asm.Type type85 = classInfo83.getSuperType();
        org.mockito.asm.Type type86 = type85.getElementType();
        int int87 = type86.getSize();
        java.lang.String str88 = type86.getInternalName();
        org.mockito.asm.Type[] typeArray90 = org.mockito.asm.Type.getArgumentTypes("(III)V");
        org.mockito.cglib.core.Signature signature91 = new org.mockito.cglib.core.Signature("org.mockito.asm.Type[]", type86, typeArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) typeArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method93 = org.mockito.cglib.core.ReflectUtils.findMethod("()Ljava/lang/Object;", classLoader71);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "int" + "'", str10, "int");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "int" + "'", str13, "int");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "int" + "'", str74, "int");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "int" + "'", str77, "int");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(III)I" + "'", str80, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
        org.junit.Assert.assertNotNull(classInfo83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.mockito.asm.Type[]" + "'", str84, "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "va/lang/Object" + "'", str88, "va/lang/Object");
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int27 = type25.getOpcode(104);
        java.lang.Class<?> wildcardClass28 = type25.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 108 + "'", int27 == 108);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.Object obj24 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("int", method28, method29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor30.setValue("", (java.lang.Object) generator32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator32, 7, 6 };
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray38);
        int int42 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method43 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass23, "()LV;", classArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ()LV;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        generator5.setStyle((int) (byte) 1);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("int", method10, method11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor12.setValue("", (java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.Object[] objArray19 = new java.lang.Object[] { generator14, 7, 6 };
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator5.setClasses(classArray20);
        java.lang.Class<?> wildcardClass23 = generator5.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("int", method25, method26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor27.setValue("", (java.lang.Object) generator29);
        boolean boolean31 = generator29.getUseCache();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type34, type35, type37 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray38);
        generator29.setDelegates((java.lang.Object[]) classArray40);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass23, classArray40);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 1);
        int int46 = methodInfo45.getModifiers();
        java.lang.String str47 = methodInfo45.toString();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo45.getClassInfo();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("int", method50, method51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor52.setValue("", (java.lang.Object) generator54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        generator54.setUseCache(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("int", method62, method63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor64.setValue("", (java.lang.Object) generator66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator66, 7, 6 };
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray72);
        generator54.setClasses(classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator54.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator54.getNamingPolicy();
        boolean boolean79 = methodInfo45.equals((java.lang.Object) generator54);
        // The following exception was thrown during execution in test generation
        try {
            generator54.setStyle(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 39");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "int" + "'", str33, "int");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "int" + "'", str36, "int");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(III)I" + "'", str39, "(III)I");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("(III)I");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setBound(true);
        boolean boolean16 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str19 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.beans.PropertyDescriptor[name=(III)I; preferred; expert; bound]" + "'", str19, "java.beans.PropertyDescriptor[name=(III)I; preferred; expert; bound]");
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("int", method1, method2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        propertyDescriptor3.setValue("", (java.lang.Object) generator5);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setName("(III)I");
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setReadMethod(method18);
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "int" + "'", str12, "int");
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(III)I" + "'", str16, "(III)I");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(method20);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type5 };
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.lang.Object obj11 = null;
        boolean boolean12 = classInfo9.equals(obj11);
        org.mockito.asm.Type type13 = classInfo9.getType();
        org.mockito.asm.Type type14 = classInfo9.getSuperType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "int" + "'", str1, "int");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "int" + "'", str4, "int");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(III)I" + "'", str7, "(III)I");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant7, readableInstant8, periodType9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        mutablePeriod10.set(durationFieldType11, 2);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        int int23 = dateTime22.getMinuteOfDay();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod10, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime26 = property25.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime27 = property25.getDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra(7);
        org.joda.time.DateTime dateTime31 = dateTime27.minusMillis((int) (byte) -1);
        int int32 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        mutableDateTime34.addSeconds((int) (short) -1);
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = mutableInterval44.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.halfdayOfDay();
        org.joda.time.DurationField durationField48 = chronology45.halfdays();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) 13, chronology45);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 2, chronology45);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod50.toMutablePeriod();
        mutableDateTime34.add((org.joda.time.ReadablePeriod) mutablePeriod50);
        boolean boolean53 = dateTime27.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        java.lang.Object obj56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval(obj56, chronology57);
        org.joda.time.MutableInterval mutableInterval59 = interval58.toMutableInterval();
        org.joda.time.Chronology chronology60 = mutableInterval59.getChronology();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.halfdayOfDay();
        org.joda.time.DurationField durationField63 = chronology60.halfdays();
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) 13, chronology60);
        mutableDateTime64.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.year();
        int int68 = mutableDateTime64.getCenturyOfEra();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        org.joda.time.MutableInterval mutableInterval72 = interval71.toMutableInterval();
        java.lang.Object obj74 = null;
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Interval interval76 = new org.joda.time.Interval(obj74, chronology75);
        org.joda.time.MutableInterval mutableInterval77 = interval76.toMutableInterval();
        org.joda.time.Chronology chronology78 = mutableInterval77.getChronology();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) (short) 0, chronology78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = localDate79.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.Interval interval82 = interval71.withStart((org.joda.time.ReadableInstant) dateTime81);
        int int83 = dateTime81.getWeekyear();
        boolean boolean84 = mutableDateTime64.isBefore((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean85 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime81);
        int int86 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime88 = dateTime27.minusSeconds((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 19 + "'", int68 == 19);
        org.junit.Assert.assertNotNull(mutableInterval72);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.Period period8 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period10 = period8.multipliedBy(0);
        org.joda.time.LocalTime localTime11 = localTime6.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.LocalTime localTime13 = localTime6.plusMinutes(99);
        int int14 = localTime6.getSecondOfMinute();
        org.joda.time.LocalTime localTime16 = localTime6.plusMillis(57600);
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology23.halfdays();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 13, chronology23);
        java.lang.String str28 = mutableDateTime27.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.property(dateTimeFieldType29);
        org.joda.time.MutableDateTime mutableDateTime31 = property30.roundFloor();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfMonth();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.monthOfYear();
        org.joda.time.Period period34 = new org.joda.time.Period();
        org.joda.time.Period period36 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = period36.getFieldType((int) (short) 1);
        org.joda.time.Period period39 = period34.minus((org.joda.time.ReadablePeriod) period36);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period39);
        mutableDateTime31.addSeconds(53);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime31.year();
        mutableDateTime31.addWeekyears(51);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        mutableDateTime31.set(dateTimeFieldType46, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = localTime16.get(dateTimeFieldType46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str28, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(11);
        org.joda.time.Period period3 = period1.minusSeconds(1964);
        org.joda.time.Period period5 = period1.plusHours(521);
        org.joda.time.Period period7 = period5.plusMinutes(0);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 9, 70919999999L);
        org.joda.time.Period period14 = period12.minusSeconds(78);
        org.joda.time.PeriodType periodType15 = period12.getPeriodType();
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra(822);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-31536000000L), (long) 32772, chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1055055318L, 1645514250675L, periodType15, chronology27);
        org.joda.time.Chronology chronology30 = chronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((java.lang.Object) 0, chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1970-06-04T00:00:00.017");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("1970-01-01T00:00:00.013Z");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("1970-01-01T00:00:00.013Z");
        boolean boolean6 = timeZone5.observesDaylightTime();
        boolean boolean7 = timeZone3.hasSameRules(timeZone5);
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str9 = timeZone3.getID();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 15);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone21);
        org.joda.time.LocalTime localTime24 = localTime22.withMillisOfDay(15);
        org.joda.time.LocalTime localTime26 = localTime24.withHourOfDay(0);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfDay();
        org.joda.time.LocalTime localTime28 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        boolean boolean31 = dateTimeField29.isLeap((long) 1439);
        java.util.Locale locale34 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        int int36 = dateTimeField29.getMaximumTextLength(locale34);
        java.lang.String str37 = locale19.getDisplayLanguage(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter18.withLocale(locale34);
        java.lang.String str39 = timeZone3.getDisplayName(locale34);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "thu jan 01 00:00:00 utc 1970");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "thu jan 01 00:00:00 utc 1970" + "'", str37, "thu jan 01 00:00:00 utc 1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Greenwich Mean Time" + "'", str39, "Greenwich Mean Time");
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(1969);
        org.joda.time.Period period3 = period1.withYears(36);
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        int int13 = dateTime12.getMinuteOfDay();
        int int14 = dateTime12.getYearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime12.withYearOfEra(32770);
        org.joda.time.DateTime dateTime18 = dateTime12.minusSeconds(1439);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.minuteOfDay();
        mutableDateTime21.setSecondOfDay((int) (short) 10);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.minuteOfHour();
        mutableDateTime21.addMonths((int) (byte) 10);
        java.lang.Object obj28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval(obj28, chronology29);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Chronology chronology37 = mutableInterval36.getChronology();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.Interval interval41 = interval30.withStart((org.joda.time.ReadableInstant) dateTime40);
        java.lang.Object obj43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval(obj43, chronology44);
        org.joda.time.MutableInterval mutableInterval46 = interval45.toMutableInterval();
        org.joda.time.Chronology chronology47 = mutableInterval46.getChronology();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        boolean boolean51 = interval41.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.years();
        mutablePeriod55.set(durationFieldType56, 2);
        java.lang.Object obj60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval(obj60, chronology61);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        org.joda.time.Chronology chronology64 = mutableInterval63.getChronology();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 0, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = localDate65.toDateTimeAtMidnight(dateTimeZone66);
        int int68 = dateTime67.getMinuteOfDay();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod55, (org.joda.time.ReadableInstant) dateTime67);
        int int70 = dateTime67.getMinuteOfHour();
        int int71 = dateTime67.getMillisOfSecond();
        boolean boolean72 = interval41.equals((java.lang.Object) dateTime67);
        org.joda.time.Interval interval74 = interval41.withStartMillis((-1L));
        org.joda.time.Duration duration75 = interval74.toDuration();
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration75);
        boolean boolean77 = mutableDateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime78 = mutableDateTime21.toDateTime();
        org.joda.time.Interval interval79 = interval19.withEnd((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Period period80 = interval79.toPeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 11, dateTimeZone3);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(dateTimeZone3);
        int int6 = timeOfDay5.getSecondOfMinute();
        org.joda.time.Chronology chronology7 = timeOfDay5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 43, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1866239999999941L), chronology7);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone13);
        org.joda.time.LocalTime localTime16 = localTime14.withMillisOfDay(15);
        org.joda.time.LocalTime localTime18 = localTime14.plusSeconds(15);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        int int21 = timeZone19.getOffset((long) 51);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19);
        int int23 = calendar22.getWeekYear();
        calendar22.roll((int) (short) 0, false);
        int int27 = calendar22.getMinimalDaysInFirstWeek();
        calendar22.setLenient(true);
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromCalendarFields(calendar22);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.plusMillis(17);
        int int33 = localTime14.compareTo((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay30.minusMinutes(32772);
        org.joda.time.TimeOfDay.Property property36 = timeOfDay30.secondOfMinute();
        org.joda.time.Period period38 = org.joda.time.Period.months(1);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay30.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = period38.withSeconds(37);
        org.joda.time.Period period43 = period38.minusWeeks(22);
        org.joda.time.LocalTime localTime44 = localTime10.plus((org.joda.time.ReadablePeriod) period38);
        java.lang.String str45 = localTime10.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-125940760647400,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=32,MILLISECOND=600,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "00:00:00.059" + "'", str45, "00:00:00.059");
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        mutableDateTime10.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.year();
        mutableDateTime10.setHourOfDay(1);
        mutableDateTime10.setYear((int) '4');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.yearOfEra();
        java.lang.String str19 = mutableDateTime10.toString();
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Chronology chronology25 = mutableInterval24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.DateTime dateTime27 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate29 = localDate26.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.Interval interval43 = interval32.withStart((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = localDate26.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTime dateTime52 = localDate51.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate54 = localDate51.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval(obj55, chronology56);
        org.joda.time.MutableInterval mutableInterval58 = interval57.toMutableInterval();
        java.lang.Object obj60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval(obj60, chronology61);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        org.joda.time.Chronology chronology64 = mutableInterval63.getChronology();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 0, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = localDate65.toDateTimeAtMidnight(dateTimeZone66);
        org.joda.time.Interval interval68 = interval57.withStart((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = localDate51.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = localDate26.isEqual((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.LocalDate.Property property71 = localDate51.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight74 = localDate51.toDateMidnight(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minusYears(6);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight74.minus((long) 10);
        org.joda.time.DateMidnight.Property property79 = dateMidnight74.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight81 = property79.addToCopy((long) 70);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight81.withDayOfYear(70);
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) dateMidnight81);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight((long) 10, dateTimeZone89);
        org.joda.time.MutableDateTime mutableDateTime91 = new org.joda.time.MutableDateTime((long) 2022, dateTimeZone89);
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight((long) 13, dateTimeZone89);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight92.minusWeeks(0);
        org.joda.time.MutableDateTime mutableDateTime95 = dateMidnight94.toMutableDateTime();
        boolean boolean96 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) dateMidnight94);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setWeekOfWeekyear(4507234);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4507234 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0052-01-04T01:11:19.007+81:11:18.994" + "'", str19, "0052-01-04T01:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(mutableDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1439L);
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.minusYears(32770);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.minusYears(10);
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj9, chronology10);
        org.joda.time.MutableInterval mutableInterval12 = interval11.toMutableInterval();
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DurationField durationField16 = chronology13.halfdays();
        long long17 = durationField16.getUnitMillis();
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Chronology chronology22 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        java.lang.String str25 = durationField24.getName();
        long long28 = durationField24.add((long) 5, 0L);
        int int29 = durationField16.compareTo(durationField24);
        long long31 = durationField24.getValueAsLong((long) (short) 1);
        long long34 = durationField24.getMillis(8, (long) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType35 = durationField24.getType();
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Chronology chronology41 = mutableInterval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.halfdayOfDay();
        org.joda.time.DurationField durationField44 = chronology41.halfdays();
        boolean boolean45 = durationFieldType35.isSupported(chronology41);
        org.joda.time.DateTime dateTime47 = dateTime7.withFieldAdded(durationFieldType35, 26197);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = dateTime7.isBefore(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 11, dateTimeZone51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property54 = dateTime52.property(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime7.withField(dateTimeFieldType53, 992);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 992 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 43200000L + "'", long17 == 43200000L);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyears" + "'", str25, "weekyears");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 5L + "'", long28 == 5L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 252806400000L + "'", long34 == 252806400000L);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 11, dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay6 = property4.addWrapFieldToCopy(78);
        int int7 = property4.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property4.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period12 = period10.multipliedBy(0);
        org.joda.time.LocalTime localTime13 = localTime8.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay1.plusHours(15);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withHourOfDay(3);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay18.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = property21.setCopy("2022-02-22T07:21:54.336Z/2022-02-22T07:21:54.336Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:21:54.336Z/2022-02-22T07:21:54.336Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        int int12 = localTime8.size();
        org.joda.time.LocalTime localTime14 = localTime8.minusHours(24);
        org.joda.time.LocalTime.Property property15 = localTime8.minuteOfHour();
        int int16 = localTime8.getMinuteOfHour();
        org.joda.time.DateTime dateTime17 = localTime8.toDateTimeToday();
        int int18 = dateTime17.getYearOfEra();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime10.toMutableDateTime();
        mutableDateTime12.addMinutes(229);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str11, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfDay(15);
        org.joda.time.LocalTime localTime7 = localTime5.withHourOfDay(0);
        org.joda.time.LocalTime localTime9 = localTime5.withHourOfDay(0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((-62135596800007L), chronology10);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.monthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime15 = dateMidnight14.toDateTime();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusMonths(2187);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(10);
        org.joda.time.LocalTime.Property property13 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.Period period17 = org.joda.time.Period.hours(26182);
        boolean boolean18 = localTime14.equals((java.lang.Object) period17);
        org.joda.time.LocalTime localTime20 = localTime14.plusMillis((-1645514232));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = localTime20.withSecondOfMinute(28852010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28852010 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) -1);
        org.joda.time.LocalTime localTime13 = property7.roundHalfCeilingCopy();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = property7.getAsShortText(locale14);
        java.util.Set<java.lang.Character> charSet18 = locale14.getExtensionKeys();
        java.util.Locale locale19 = locale14.stripExtensions();
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str16, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "15" + "'", str17, "15");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        java.io.IOException iOException1 = new java.io.IOException("usa");
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime10 = property9.getLocalTime();
        org.joda.time.LocalTime localTime12 = property9.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime14 = property9.addCopy((long) (byte) -1);
        org.joda.time.LocalTime localTime15 = property9.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((long) 97, chronology16);
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 26353, chronology18);
        mutablePeriod19.addMinutes(52);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getMinuteOfDay();
        int int35 = dateTime33.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime33.getZone();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime22.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond(15);
        org.joda.time.DateTime.Property property41 = dateTime40.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        org.joda.time.DurationField durationField43 = dateTimeField42.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = dateTimeField42.set((long) 324, "2022-02-25T16:31:28.839+81:11:18.994/2022-02-25T16:31:28.839+81:11:18.994");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-25T16:31:28.839+81:11:18.994/2022-02-25T16:31:28.839+81:11:18.994\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNull(durationField43);
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.LocalTime localTime10 = localTime6.withHourOfDay(0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((-62135596800007L), chronology11);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology11);
        org.joda.time.Period period16 = org.joda.time.Period.millis((-518399999));
        org.joda.time.Period period17 = period16.toPeriod();
        long long20 = chronology11.add((org.joda.time.ReadablePeriod) period16, (-31536000007L), 0);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 805, chronology11);
        mutablePeriod21.setPeriod((long) (short) 0, (long) (-51));
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-31536000007L) + "'", long20 == (-31536000007L));
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight.Property property59 = dateMidnight54.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight61 = property59.addToCopy((long) 70);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.withDayOfYear(70);
        boolean boolean65 = dateMidnight61.isBefore(0L);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight61.withCenturyOfEra(32772);
        org.joda.time.YearMonthDay yearMonthDay68 = dateMidnight67.toYearMonthDay();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        org.joda.time.MutableInterval mutableInterval72 = interval71.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant73 = null;
        boolean boolean74 = interval71.isBefore(readableInstant73);
        org.joda.time.Chronology chronology75 = interval71.getChronology();
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay68.withChronologyRetainFields(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay76.withChronologyRetainFields(chronology77);
        int int79 = yearMonthDay78.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(mutableInterval72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay12.dayOfMonth();
        java.util.Locale locale25 = new java.util.Locale("hi!", "");
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.Interval interval40 = interval29.withStart((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTime39);
        int int42 = property22.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int43 = property22.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay44 = property22.getYearMonthDay();
        int int45 = yearMonthDay44.getDayOfMonth();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 25 + "'", int45 == 25);
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.withHours((int) '4');
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 13, chronology10);
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfMonth();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime18.setDayOfMonth(10);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Chronology chronology29 = mutableInterval28.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology29.halfdays();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 13, chronology29);
        java.lang.String str34 = mutableDateTime33.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.property(dateTimeFieldType35);
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundFloor();
        mutableDateTime37.addMillis(1969);
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) mutableDateTime37);
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        org.joda.time.Chronology chronology46 = mutableInterval45.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.halfdayOfDay();
        org.joda.time.DurationField durationField49 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.yearOfEra();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = dateTimeField51.getAsShortText((long) (short) 100, locale53);
        long long57 = dateTimeField51.set((long) 53, (int) ' ');
        mutableDateTime18.setRounding(dateTimeField51);
        long long60 = dateTimeField51.roundHalfFloor(54L);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str15, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str34, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970" + "'", str54, "1970");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-61157375999947L) + "'", long57 == (-61157375999947L));
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-292278994L) + "'", long60 == (-292278994L));
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = locale2.hasExtensions();
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale2.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("years", strMap8);
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet13);
        java.lang.String[] strArray26 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone30);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay(15);
        org.joda.time.LocalTime localTime35 = localTime33.withHourOfDay(0);
        org.joda.time.LocalTime localTime37 = localTime33.withHourOfDay(0);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        int int39 = localTime37.getMillisOfSecond();
        org.joda.time.LocalTime localTime41 = localTime37.minusMinutes(10);
        boolean boolean42 = strSet27.remove((java.lang.Object) localTime41);
        java.lang.String[] strArray44 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        boolean boolean47 = strSet27.retainAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean48 = strSet13.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("months");
        java.util.Locale.Builder builder53 = builder49.setVariant("");
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.util.Locale.Builder builder57 = builder53.setLocale(locale54);
        boolean boolean58 = strSet27.contains((java.lang.Object) locale54);
        java.lang.String str59 = locale6.getDisplayName(locale54);
        java.util.Locale.setDefault(locale54);
        java.lang.String str61 = locale54.getScript();
        java.lang.String str62 = locale2.getDisplayCountry(locale54);
        java.lang.String str63 = locale0.getDisplayName(locale54);
        java.util.Set<java.lang.String> strSet64 = locale54.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream65 = strSet64.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream66 = strSet64.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinese" + "'", str5, "Chinese");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 15 + "'", int39 == 15);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str56, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u6587" + "'", str59, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e2d\u570b" + "'", str62, "\u4e2d\u570b");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str63, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strStream65);
        org.junit.Assert.assertNotNull(strStream66);
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = interval2.isBefore(readableInstant4);
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        boolean boolean9 = dateTimeField7.isLeap(0L);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        int int10 = dateTime9.getMinuteOfDay();
        int int11 = dateTime9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) 59, chronology19);
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(70);
        org.joda.time.LocalDate localDate11 = localDate6.withMonthOfYear(2);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        int int13 = localDate11.getCenturyOfEra();
        int int14 = localDate11.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate11.minusWeeks(26909);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate11.getFieldType(36000010);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 36000010");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.LocalTime localTime5 = localTime2.minusMillis(26182);
        org.joda.time.LocalTime localTime7 = localTime5.plusHours((int) (byte) -1);
        org.joda.time.ReadablePartial readablePartial8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localTime7.compareTo(readablePartial8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(10);
        org.joda.time.LocalTime.Property property13 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.withMinimumValue();
        org.joda.time.DurationField durationField16 = property13.getRangeDurationField();
        org.joda.time.LocalTime localTime18 = property13.addCopy(52);
        org.joda.time.LocalTime localTime20 = property13.addWrapFieldToCopy(17);
        org.joda.time.LocalTime localTime21 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime23 = property13.setCopy("72");
        org.joda.time.LocalTime localTime24 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundCeiling();
        int int16 = mutableDateTime15.getDayOfWeek();
        org.joda.time.Period period18 = org.joda.time.Period.parse("P0Y");
        mutableDateTime15.add((org.joda.time.ReadablePeriod) period18);
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        org.joda.time.Chronology chronology27 = mutableInterval26.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra(822);
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-31536000000L), (long) 32772, chronology31);
        org.joda.time.Period period33 = period18.withFields((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        int int35 = mutablePeriod32.get(durationFieldType34);
        int int36 = mutablePeriod32.getMinutes();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str11, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1969, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        java.lang.String str10 = chronology5.toString();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.LocalTime localTime13 = localTime11.plusMillis(26473335);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+81:11:18.994]" + "'", str10, "ISOChronology[+81:11:18.994]");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 13, chronology8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) ' ', chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 19, chronology8);
        mutablePeriod15.setWeeks(1900);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.Chronology chronology21 = dateTimeFormatter20.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter23.getZone();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight26.withDurationAdded(readableDuration29, 100);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withDurationAdded((-53635L), (int) 'u');
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.minusMonths(0);
        org.joda.time.Duration duration37 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        mutablePeriod15.setPeriod(300, (-4838399), 9562, 2067, 906, 84540015, 40, 27433877);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(duration37);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(540, 10942740);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 540 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition((long) (short) -1);
        java.lang.String str5 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1645514165374L, dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+81:11:18.994" + "'", str5, "+81:11:18.994");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+81:11:18.994" + "'", str7, "+81:11:18.994");
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property9.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMinutes((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone14);
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay(15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone19);
        org.joda.time.LocalTime localTime22 = localTime20.withMillisOfDay(15);
        org.joda.time.LocalTime localTime24 = localTime22.withHourOfDay(0);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfDay();
        org.joda.time.Period period26 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone28);
        org.joda.time.LocalTime localTime31 = localTime29.withMillisOfDay(15);
        org.joda.time.LocalTime.Property property32 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime34 = property32.addCopy(5);
        org.joda.time.LocalTime localTime36 = localTime34.minusMillis(50400000);
        org.joda.time.LocalTime localTime38 = localTime34.withMinuteOfHour(14);
        org.joda.time.LocalTime localTime40 = localTime34.minusMillis((-70919999));
        org.joda.time.LocalTime localTime42 = localTime34.minusMillis(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int44 = localTime34.get(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType43.getDurationType();
        org.joda.time.LocalTime.Property property46 = localTime24.property(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType43.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int48 = timeOfDay10.get(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 851 + "'", int44 == 851);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationFieldType47);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = interval2.isBefore(readableInstant4);
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(15);
        org.joda.time.LocalTime.Property property12 = localTime9.hourOfDay();
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) localTime9, (long) 22);
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        boolean boolean17 = localTime9.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 11, dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(dateTimeZone20);
        int int23 = timeOfDay22.getSecondOfMinute();
        org.joda.time.Chronology chronology24 = timeOfDay22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 43, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.era();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType16.getField(chronology24);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType16.getRangeDurationType();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[9, 11, 19, 16]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNull(durationFieldType29);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 100, 100L);
        mutablePeriod2.clear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 10, dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 2022, dateTimeZone7);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Chronology chronology29 = mutableInterval28.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate33 = localDate30.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval(obj34, chronology35);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Chronology chronology43 = mutableInterval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.Interval interval47 = interval36.withStart((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = localDate30.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        java.lang.Object obj50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval(obj50, chronology51);
        org.joda.time.MutableInterval mutableInterval53 = interval52.toMutableInterval();
        org.joda.time.Chronology chronology54 = mutableInterval53.getChronology();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 0, chronology54);
        org.joda.time.DateTime dateTime56 = localDate55.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate58 = localDate55.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval(obj59, chronology60);
        org.joda.time.MutableInterval mutableInterval62 = interval61.toMutableInterval();
        java.lang.Object obj64 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval(obj64, chronology65);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.Chronology chronology68 = mutableInterval67.getChronology();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (short) 0, chronology68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.Interval interval72 = interval61.withStart((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = localDate55.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate.Property property75 = localDate55.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight78 = localDate55.toDateMidnight(dateTimeZone77);
        boolean boolean79 = interval23.contains((org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.Duration duration80 = interval23.toDuration();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableDuration) duration80);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration80);
        mutablePeriod2.addMillis(26257);
        mutablePeriod2.setSeconds(64);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateMidnight78);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(duration80);
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusMinutes((int) (short) -1);
        int int9 = localDateTime8.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(15);
        org.joda.time.LocalTime localTime16 = localTime14.withHourOfDay(0);
        org.joda.time.LocalTime localTime18 = localTime14.withHourOfDay(0);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.LocalTime localTime21 = localTime18.plusMinutes(1);
        org.joda.time.LocalTime localTime23 = localTime18.plusMillis(0);
        int int24 = localTime23.size();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone26);
        org.joda.time.LocalTime localTime29 = localTime27.withMillisOfDay(15);
        org.joda.time.LocalTime localTime31 = localTime29.withHourOfDay(0);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfDay();
        org.joda.time.LocalTime localTime33 = property32.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay38 = property37.withMaximumValue();
        int[] intArray39 = timeOfDay38.getValues();
        java.lang.String str41 = timeOfDay38.toString("1439");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = timeOfDay38.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay38.withHourOfDay((int) (short) 10);
        int int45 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay44);
        boolean boolean46 = localTime23.isBefore((org.joda.time.ReadablePartial) timeOfDay44);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = localDateTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay44);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 59, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1439" + "'", str41, "1439");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 24 + "'", int45 == 24);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 100, dateTimeZone3);
        long long7 = dateTimeZone3.convertLocalToUTC(60L, false);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withYearOfEra(26442999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withMonthOfYear(59464);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59464 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 61L + "'", long7 == 61L);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        org.joda.time.Period period8 = new org.joda.time.Period(13, 1969, 0, 32770, 32772, 1969, 100, 3);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology15.halfdays();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 13, chronology15);
        java.lang.String str20 = mutableDateTime19.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.property(dateTimeFieldType21);
        org.joda.time.Duration duration23 = period8.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.millisOfDay();
        mutableDateTime19.addMinutes(292278993);
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Chronology chronology33 = mutableInterval32.getChronology();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.halfdayOfDay();
        org.joda.time.DurationField durationField36 = chronology33.halfdays();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 13, chronology33);
        org.joda.time.DurationField durationField38 = chronology33.years();
        mutableDateTime19.setChronology(chronology33);
        boolean boolean41 = mutableDateTime19.isBefore(15893539200013L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str20, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime2.plusSeconds(15);
        org.joda.time.Period period8 = org.joda.time.Period.hours((int) (byte) 1);
        int int9 = period8.getMinutes();
        org.joda.time.Period period11 = period8.withMonths((int) '4');
        org.joda.time.LocalTime localTime13 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 1970);
        org.joda.time.Period period14 = period11.toPeriod();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        java.util.Date date6 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date6);
        int int8 = date6.getTimezoneOffset();
        date6.setHours(26283);
        int int11 = date6.getMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Jan 03 03:11:10 GMT 1973");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1969, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(15);
        org.joda.time.LocalTime localTime16 = localTime14.withHourOfDay(0);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.joda.time.LocalTime localTime21 = property17.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime22 = property17.roundHalfCeilingCopy();
        org.joda.time.Period period24 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period26 = period24.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period29 = period24.withFieldAdded(durationFieldType27, (int) (byte) 10);
        org.joda.time.LocalTime localTime30 = localTime22.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.LocalTime localTime31 = localTime9.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.LocalTime localTime33 = localTime31.plusMinutes(36);
        org.joda.time.LocalTime localTime35 = localTime33.minusMillis(6);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay12 = property9.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay12.minuteOfHour();
        org.joda.time.LocalTime localTime16 = timeOfDay12.toLocalTime();
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = property17.addNoWrapToCopy((-192597));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 11, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks(10022);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) 10, dateTimeZone10);
        java.lang.String str12 = dateTimeZone10.toString();
        int int14 = dateTimeZone10.getStandardOffset((long) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((-1630713600018L), dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime5.toDateTime(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.001" + "'", str12, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(59, 15, 32770);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(13, (-70919999), 13, 27);
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusHours((int) (byte) 10);
        int[] intArray13 = timeOfDay12.getValues();
        java.util.Calendar.Builder builder14 = builder0.setFields(intArray13);
        java.util.Calendar calendar15 = builder14.build();
        java.util.Calendar calendar16 = builder14.build();
        java.util.Calendar.Builder builder20 = builder14.setDate(18, 36, 71);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(117, 26291, 59460);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("00:00:00.010");
        java.util.Calendar.Builder builder27 = builder20.setTimeZone(timeZone26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = timeZone26.getDisplayName(false, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 31");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-65382289127000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=103,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=1,SECOND=13,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-65382289127000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=103,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=1,SECOND=13,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(59, 15, 32770);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(59, 59, (-1));
        java.util.Locale locale11 = java.util.Locale.getDefault();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone13);
        org.joda.time.LocalTime localTime16 = localTime14.withMillisOfDay(15);
        org.joda.time.LocalTime localTime18 = localTime16.withHourOfDay(0);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfDay();
        org.joda.time.LocalTime localTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        boolean boolean23 = dateTimeField21.isLeap((long) 1439);
        java.util.Locale locale26 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        int int28 = dateTimeField21.getMaximumTextLength(locale26);
        java.lang.String str29 = locale11.getDisplayLanguage(locale26);
        java.util.Calendar.Builder builder30 = builder6.setLocale(locale26);
        java.util.Calendar.Builder builder34 = builder30.setTimeOfDay(40, 26191, 26283);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar35 = builder34.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        int int12 = localTime8.size();
        org.joda.time.LocalTime localTime14 = localTime8.minusHours(24);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime8.minus(readablePeriod15);
        org.joda.time.LocalTime localTime18 = localTime16.minusSeconds(23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localTime16.getFieldTypes();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight.Property property61 = dateMidnight58.year();
        org.joda.time.DateMidnight dateMidnight62 = property61.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight63 = property61.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight64 = property61.getDateMidnight();
        int int65 = dateMidnight64.getWeekyear();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight64.withDurationAdded(1645514284943L, 59443);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight68);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getMinuteOfDay();
        int int35 = dateTime33.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime33.getZone();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime22.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond(15);
        org.joda.time.DateTime.Property property41 = dateTime40.secondOfDay();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime42.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfDay(15);
        org.joda.time.LocalTime localTime7 = localTime5.withHourOfDay(0);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.Chronology chronology11 = localTime9.getChronology();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1417L), chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property13.getDateTime();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale18 = builder17.build();
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = property13.setCopy("Property[hourOfDay]", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[hourOfDay]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfDay(15);
        org.joda.time.LocalTime localTime7 = localTime5.withHourOfDay(0);
        org.joda.time.LocalTime localTime9 = localTime5.withHourOfDay(0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((-62135596800007L), chronology10);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusHours(1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay18 = property16.addToCopy(26258864);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusSeconds(0);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusSeconds(59626351);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 7, (-1L), periodType4);
        int int7 = mutablePeriod6.size();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology15.halfdays();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 13, chronology15);
        mutablePeriod6.add((long) 53, chronology15);
        org.joda.time.Period period22 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period24 = period22.multipliedBy(0);
        int int25 = period22.getMonths();
        org.joda.time.Period period27 = period22.plusYears(0);
        org.joda.time.Duration duration28 = period27.toStandardDuration();
        mutablePeriod6.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int33 = mutableDateTime30.get(dateTimeFieldType32);
        int int34 = mutableDateTime30.getEra();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) mutableDateTime30);
        boolean boolean37 = interval35.isBefore(3787165965891L);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withDefaultYear(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.parse("weekyearOfCentury", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.LocalTime localTime4 = dateTime3.toLocalTime();
        int int5 = dateTime3.getMillisOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime3.toGregorianCalendar();
        gregorianCalendar6.set(3600, 521, 3, 25, (int) 'u');
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Chronology chronology22 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.TimeOfDay timeOfDay25 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology22);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay28 = property26.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay29 = property26.withMaximumValue();
        int int30 = property26.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField31 = property26.getField();
        int int32 = property26.getMaximumValue();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        int int34 = property26.getMaximumShortTextLength(locale33);
        java.util.Locale locale37 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet39 = locale37.getExtensionKeys();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale37);
        java.lang.String str41 = locale37.getScript();
        java.lang.String str42 = locale33.getDisplayScript(locale37);
        java.lang.String str43 = locale15.getDisplayScript(locale37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap44 = gregorianCalendar6.getDisplayNames(4, 59492917, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50400000 + "'", int5 == 50400000);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514555375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=35,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        boolean boolean4 = interval2.contains((-1L));
        org.joda.time.DateTime dateTime5 = interval2.getEnd();
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight7 = dateTime5.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology15.weekyears();
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology15);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.weekyearOfCentury();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 50400000, chronology15);
        org.joda.time.DateTime dateTime24 = dateTime22.withYear(26257);
        int int25 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property26 = dateTime24.era();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 11, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property4 = dateTime2.property(dateTimeFieldType3);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        java.lang.String str8 = dateTimeFieldType7.getName();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) durationFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfDay" + "'", str8, "millisOfDay");
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("hourOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hourOfDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronolgy();
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology16 = mutableInterval15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology16.halfdays();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 13, chronology16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) ' ', chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 19, chronology16);
        org.joda.time.DurationField durationField24 = chronology16.hours();
        org.joda.time.DurationField durationField25 = chronology16.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withChronology(chronology16);
        boolean boolean27 = dateTimeFormatter26.isOffsetParsed();
        java.lang.Object obj28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval(obj28, chronology29);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Chronology chronology37 = mutableInterval36.getChronology();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.Interval interval41 = interval30.withStart((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime40.getWeekyear();
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.Chronology chronology46 = chronology43.withZone(dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter26.withChronology(chronology43);
        java.util.Locale locale48 = dateTimeFormatter26.getLocale();
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((long) 8);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.minusMonths(19);
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        long long57 = dateTimeZone54.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay50.toDateMidnight(dateTimeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        java.lang.String str62 = dateTimeZone54.getShortName(42940800000L);
        int int64 = dateTimeZone54.getStandardOffset(39139200000L);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter26.withZone(dateTimeZone54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime68 = dateTimeFormatter26.parseLocalTime("1969-12-31T00:00:00.000-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight59);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+81:11:18.994" + "'", str62, "+81:11:18.994");
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278994 + "'", int64 == 292278994);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis(1645488000010L);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMillis((-1969));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(12223149);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime13 = property7.addCopy(6);
        org.joda.time.LocalTime localTime14 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.getLocalTime();
        org.joda.time.LocalTime localTime16 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTimeISO();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight63 = property62.roundCeilingCopy();
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.minuteOfDay();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 100, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC(60L, false);
        java.lang.String str8 = dateTimeZone2.getShortName((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 61L + "'", long6 == 61L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-00:00:00.001" + "'", str8, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) -1, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(28);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(15);
        org.joda.time.LocalTime localTime13 = localTime11.withHourOfDay(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("2022-02-22T07:15:47.976Z/2022-02-22T07:15:47.976Z");
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.lang.String str22 = locale18.getDisplayCountry(locale19);
        java.util.Set<java.lang.Character> charSet23 = locale19.getExtensionKeys();
        java.lang.String str24 = property16.getAsShortText(locale19);
        java.lang.String str25 = locale19.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = localDateTime3.toString("1970-01-01T00:00:00.020+00:00:00.007", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str21, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Taiwan" + "'", str25, "Taiwan");
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant5, readableInstant6, periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        mutablePeriod8.set(durationFieldType9, 2);
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(obj13, chronology14);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        org.joda.time.Chronology chronology17 = mutableInterval16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getMinuteOfDay();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = property23.getDateTime();
        mutablePeriod3.setPeriod(readableInstant4, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period28 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period30 = period28.multipliedBy(0);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period33 = period28.withFieldAdded(durationFieldType31, 2);
        int int34 = period33.getMinutes();
        boolean boolean35 = dateTime25.equals((java.lang.Object) period33);
        int int36 = dateTime25.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant37, readableInstant38, periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        mutablePeriod40.set(durationFieldType41, 2);
        java.lang.Object obj45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval(obj45, chronology46);
        org.joda.time.MutableInterval mutableInterval48 = interval47.toMutableInterval();
        org.joda.time.Chronology chronology49 = mutableInterval48.getChronology();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 0, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        int int53 = dateTime52.getMinuteOfDay();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod40, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfWeek();
        org.joda.time.DateTime dateTime56 = property55.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime57 = property55.getDateTime();
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra(7);
        boolean boolean60 = dateTime59.isBeforeNow();
        org.joda.time.Chronology chronology61 = dateTime59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime25.toMutableDateTime(chronology61);
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(chronology61);
        org.joda.time.DurationField durationField64 = chronology61.minutes();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(durationField64);
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        java.lang.String[] strArray11 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone15);
        org.joda.time.LocalTime localTime18 = localTime16.withMillisOfDay(15);
        org.joda.time.LocalTime localTime20 = localTime18.withHourOfDay(0);
        org.joda.time.LocalTime localTime22 = localTime18.withHourOfDay(0);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        int int24 = localTime22.getMillisOfSecond();
        org.joda.time.LocalTime localTime26 = localTime22.minusMinutes(10);
        boolean boolean27 = strSet12.remove((java.lang.Object) localTime26);
        java.lang.String[] strArray29 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        boolean boolean32 = strSet12.retainAll((java.util.Collection<java.lang.String>) strList30);
        java.util.Iterator<java.lang.String> strItor33 = strSet12.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator34 = strSet12.spliterator();
        boolean boolean35 = strSet12.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator36 = strSet12.spliterator();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strSpliterator36);
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (short) 0, 0, (int) (byte) 10, 32770);
        org.joda.time.Period period6 = period4.withMonths((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            int int8 = period4.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(302400036L);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime0.setZone(dateTimeZone3);
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone3);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.monthOfYear();
        java.util.Locale locale11 = new java.util.Locale("1970-01-05T00:00:00.000", "", "2022-02-22T07:18:21.139+00:00:00.007/2022-02-22T07:18:21.139+00:00:00.007");
        int int12 = property7.getMaximumShortTextLength(locale11);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(locale11.toString(), "1970-01-05t00:00:00.000__2022-02-22T07:18:21.139+00:00:00.007/2022-02-22T07:18:21.139+00:00:00.007");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        java.lang.String str8 = localTime6.toString();
        org.joda.time.LocalTime localTime10 = localTime6.plusMinutes(59487633);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.015" + "'", str8, "00:00:00.015");
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        java.util.Date date1 = new java.util.Date(1645514219627L);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:16:59 GMT 2022");
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((java.lang.Object) dateTimeFieldType0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int51 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate localDate53 = localDate31.plusYears(10);
        org.joda.time.LocalDate.Property property54 = localDate53.era();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = property54.getAsText(locale57);
        org.joda.time.LocalDate localDate60 = property54.withMaximumValue();
        org.joda.time.LocalDate localDate61 = property54.getLocalDate();
        org.joda.time.DateTimeField dateTimeField62 = property54.getField();
        long long64 = dateTimeField62.roundHalfEven(432000000L);
        org.joda.time.tz.NameProvider nameProvider65 = org.joda.time.DateTimeZone.getNameProvider();
        java.lang.Object obj68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval(obj68, chronology69);
        org.joda.time.MutableInterval mutableInterval71 = interval70.toMutableInterval();
        org.joda.time.Chronology chronology72 = mutableInterval71.getChronology();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (short) 0, chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.halfdayOfDay();
        org.joda.time.DurationField durationField75 = chronology72.halfdays();
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) 13, chronology72);
        mutableDateTime76.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime76.year();
        mutableDateTime76.setHourOfDay(1);
        mutableDateTime76.setYear((int) '4');
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime76.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime86 = property84.add((long) 4);
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.lang.String str88 = locale87.getDisplayVariant();
        java.lang.String str89 = property84.getAsShortText(locale87);
        java.lang.String str92 = nameProvider65.getShortName(locale87, "TWN", "1970-01-01T00:00:00.013Z");
        int int93 = dateTimeField62.getMaximumTextLength(locale87);
        java.lang.String str94 = locale87.getISO3Country();
        java.lang.String str95 = locale87.toLanguageTag();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str58, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u516c\u5143" + "'", str59, "\u516c\u5143");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-62135596800000L) + "'", long64 == (-62135596800000L));
        org.junit.Assert.assertNotNull(nameProvider65);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(locale87);
// flaky:         org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "56" + "'", str89, "56");
        org.junit.Assert.assertNull(str92);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "und" + "'", str95, "und");
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology15.halfdays();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 13, chronology15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) ' ', chronology15);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100, 3, 7, 10, 5, 51, chronology15);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) '#', (long) 52, chronology15);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfDay();
        long long27 = dateTimeField25.roundCeiling(252773321006L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 252773321006L + "'", long27 == 252773321006L);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("years", strMap11);
        java.util.Locale locale15 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strSet16);
        java.lang.String[] strArray29 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone33);
        org.joda.time.LocalTime localTime36 = localTime34.withMillisOfDay(15);
        org.joda.time.LocalTime localTime38 = localTime36.withHourOfDay(0);
        org.joda.time.LocalTime localTime40 = localTime36.withHourOfDay(0);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        int int42 = localTime40.getMillisOfSecond();
        org.joda.time.LocalTime localTime44 = localTime40.minusMinutes(10);
        boolean boolean45 = strSet30.remove((java.lang.Object) localTime44);
        java.lang.String[] strArray47 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        boolean boolean50 = strSet30.retainAll((java.util.Collection<java.lang.String>) strList48);
        boolean boolean51 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet16, filteringMode52);
        java.util.Set<java.lang.String> strSet54 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet55 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String[] strArray69 = new java.lang.String[] { "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "months", "yearOfCentury", "halfdays", "2022-02-22T07:15:47.976Z/2022-02-22T07:15:47.976Z", "weekyears", "2022-02-22T07:15:49.448Z/2022-02-22T07:15:49.448Z", "yearOfCentury", "Years", "secondOfDay", "weekyears", "months", "secondOfDay" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        boolean boolean72 = strSet55.removeAll((java.util.Collection<java.lang.String>) strList70);
        boolean boolean73 = strSet54.addAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray74 = strSet55.toArray();
        strSet55.clear();
        boolean boolean76 = strSet16.remove((java.lang.Object) strSet55);
        java.lang.String str77 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet16);
        org.joda.time.tz.Provider provider78 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone80 = provider78.getZone("secondOfDay");
        org.joda.time.DateTimeZone.setProvider(provider78);
        org.joda.time.DateTimeZone dateTimeZone83 = provider78.getZone("2022-02-22T07:16:05.673+00:00:00.007/2022-02-22T07:16:05.673+00:00:00.007");
        java.util.Set<java.lang.String> strSet84 = provider78.getAvailableIDs();
        java.util.Set<java.lang.String> strSet85 = provider78.getAvailableIDs();
        boolean boolean86 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet85);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode52.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNull(dateTimeZone80);
        org.junit.Assert.assertNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(57, (-1419242), 32400);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1419242 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1645514165374L, chronology1);
        org.joda.time.LocalTime.Property property3 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(16);
        org.joda.time.LocalTime localTime6 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        int int12 = dateTimeField10.getMaximumValue((long) 11);
        int int14 = dateTimeField10.getLeapAmount((long) '#');
        mutableDateTime1.setRounding(dateTimeField10);
        int int16 = mutableDateTime1.getMinuteOfHour();
        int int17 = mutableDateTime1.getYearOfEra();
        int int18 = mutableDateTime1.getCenturyOfEra();
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.halfdayOfDay();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.clockhourOfDay();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((-518399999));
        int int34 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTime.Property property35 = dateTime31.minuteOfDay();
        org.joda.time.DateTime dateTime36 = property35.getDateTime();
        boolean boolean37 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        boolean boolean39 = mutableDateTime38.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minus((long) 13);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.halfdayOfDay();
        org.joda.time.DurationField durationField53 = chronology50.halfdays();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 13, chronology50);
        java.lang.String str55 = mutableDateTime54.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.property(dateTimeFieldType56);
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime59 = property57.roundCeiling();
        int int60 = mutableDateTime59.getDayOfWeek();
        org.joda.time.Period period62 = org.joda.time.Period.parse("P0Y");
        mutableDateTime59.add((org.joda.time.ReadablePeriod) period62);
        int int64 = period62.getMinutes();
        org.joda.time.Duration duration65 = period62.toStandardDuration();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight43.withDurationAdded((org.joda.time.ReadableDuration) duration65, 2055);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration65, (-10));
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration65);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 55 + "'", int34 == 55);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str55, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((java.lang.Object) 851);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 13, chronology8);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 2, chronology8);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField16.getType();
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.halfdayOfDay();
        int int28 = dateTimeField26.getMaximumValue((long) 11);
        boolean boolean30 = dateTimeField26.isLeap((-1L));
        int int31 = dateTimeField26.getMaximumValue();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        int int35 = dateTimeField26.getMaximumShortTextLength(locale32);
        java.util.Locale locale36 = locale32.stripExtensions();
        java.lang.String str37 = dateTimeField16.getAsText(15646077180000L, locale36);
        java.lang.String str38 = locale0.getDisplayVariant(locale36);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("halfdays");
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.Object obj43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval(obj43, chronology44);
        org.joda.time.MutableInterval mutableInterval46 = interval45.toMutableInterval();
        org.joda.time.Chronology chronology47 = mutableInterval46.getChronology();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        int int51 = dateTime50.getMinuteOfDay();
        int int52 = dateTime50.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime50.getZone();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        java.lang.Object obj56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval(obj56, chronology57);
        org.joda.time.MutableInterval mutableInterval59 = interval58.toMutableInterval();
        org.joda.time.Chronology chronology60 = mutableInterval59.getChronology();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay54.withChronologyRetainFields(chronology60);
        org.joda.time.YearMonthDay.Property property64 = yearMonthDay54.dayOfMonth();
        java.lang.String str65 = property64.getAsText();
        org.joda.time.YearMonthDay yearMonthDay66 = property64.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay68 = property64.addToCopy(43);
        org.joda.time.YearMonthDay yearMonthDay70 = property64.addWrapFieldToCopy(2040);
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str73 = property64.getAsText(locale71);
        java.lang.String str74 = locale71.getDisplayLanguage();
        java.lang.String str75 = locale41.getDisplayScript(locale71);
        boolean boolean76 = locale71.hasExtensions();
        java.lang.String str77 = locale0.getDisplayCountry(locale71);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str34, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "297" + "'", str37, "297");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "halfdays");
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "25" + "'", str65, "25");
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "25" + "'", str73, "25");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Chinese" + "'", str74, "Chinese");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u6cd5\u56fd" + "'", str77, "\u6cd5\u56fd");
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.Interval interval13 = interval2.withStart((org.joda.time.ReadableInstant) dateTime12);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        boolean boolean23 = interval13.isBefore((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Chronology chronology29 = mutableInterval28.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        java.lang.Object obj34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval(obj34, chronology35);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Chronology chronology38 = mutableInterval37.getChronology();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDate39.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType45 = periodType44.withSecondsRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate39, periodType45);
        org.joda.time.DateTime dateTime47 = localDate30.toDateTimeAtStartOfDay();
        boolean boolean48 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime22.minusMillis(822);
        org.joda.time.DateTime dateTime52 = dateTime22.withMonthOfYear(1);
        org.joda.time.DateTime dateTime54 = dateTime22.minus((-40003537003198561L));
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone56);
        long long59 = dateTimeZone56.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone56);
        long long63 = dateTimeZone56.convertUTCToLocal((long) 53);
        org.joda.time.DateTime dateTime64 = dateTime22.withZone(dateTimeZone56);
        int int65 = dateTime22.getMillisOfDay();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 292279047L + "'", long63 == 292279047L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(32769, 25, 26353, (-70919999));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(100L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) 10, dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 2022, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) 100L, dateTimeZone9);
        org.joda.time.Interval interval13 = dateMidnight12.toInterval();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1980);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withPivotYear((int) (short) 10);
        java.lang.Appendable appendable14 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(1645514165374L, chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.secondOfMinute();
        int int19 = property18.getMinimumValueOverall();
        org.joda.time.LocalTime localTime21 = property18.setCopy((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(appendable14, (org.joda.time.ReadablePartial) localTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusDays((int) 'x');
        int int13 = localDateTime7.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withMinuteOfHour(59496);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59496 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = localTime2.toString("15", locale9);
        org.joda.time.LocalTime.Property property11 = localTime2.millisOfSecond();
        int int12 = localTime2.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime2.plusSeconds(205);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds(86399);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "15" + "'", str10, "15");
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        java.io.IOException iOException2 = new java.io.IOException("hi!");
        java.io.IOException iOException4 = new java.io.IOException("Jan 1, 1970 12:00:00 AM");
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException8 = new java.io.IOException("Chinese (China)");
        java.io.IOException iOException9 = new java.io.IOException("Coordinated Universal Time", (java.lang.Throwable) iOException8);
        iOException2.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("2050-01-05T00:00:00.000+00:00:00.007", (java.lang.Throwable) iOException2);
        java.io.IOException iOException13 = new java.io.IOException("1 Oct 1997 00:00:00 GMT");
        iOException2.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException13);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 13, chronology7);
        mutableDateTime11.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.year();
        org.joda.time.Period period16 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period18 = period16.multipliedBy(0);
        int int19 = period16.getMonths();
        org.joda.time.Period period21 = period16.plusYears(0);
        org.joda.time.Duration duration22 = period21.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, readableInstant23, periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        org.joda.time.PeriodType periodType32 = periodType30.withWeeksRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadableDuration) duration22, periodType30);
        org.joda.time.PeriodType periodType34 = periodType30.withYearsRemoved();
        java.lang.String str35 = periodType34.getName();
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        org.joda.time.Chronology chronology40 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 360000, periodType34, chronology40);
        org.joda.time.DurationField durationField45 = chronology40.halfdays();
        org.joda.time.DurationField durationField46 = chronology40.years();
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "YearsNoYears" + "'", str35, "YearsNoYears");
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1645514265152L);
        java.lang.String str2 = localTime1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "16:29:04.146" + "'", str2, "16:29:04.146");
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology6);
        org.joda.time.DurationField durationField10 = chronology6.months();
        org.joda.time.DurationField durationField11 = chronology6.halfdays();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 1980, chronology6);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.secondOfMinute();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(10);
        org.joda.time.LocalTime.Property property13 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.withMinimumValue();
        org.joda.time.DurationField durationField16 = property13.getRangeDurationField();
        org.joda.time.LocalTime localTime18 = property13.addCopy(52);
        org.joda.time.LocalTime localTime20 = property13.addWrapFieldToCopy(17);
        org.joda.time.LocalTime localTime21 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime23 = property13.addCopy((long) (-292275054));
        org.joda.time.LocalTime localTime24 = property13.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = property13.setCopy("10:00:00.015");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"10:00:00.015\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 7, (-1L), periodType65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight60.minus((org.joda.time.ReadablePeriod) mutablePeriod67);
        int int69 = dateMidnight68.getCenturyOfEra();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 19 + "'", int69 == 19);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(10);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = localTime12.equals((java.lang.Object) timeZone13);
        java.lang.String str15 = timeZone13.getID();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GMT" + "'", str15, "GMT");
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMonths(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withDurationAdded((long) 13, 0);
        org.joda.time.DateMidnight.Property property64 = dateMidnight60.yearOfCentury();
        org.joda.time.DateMidnight.Property property65 = dateMidnight60.year();
        org.joda.time.DurationField durationField66 = property65.getDurationField();
        org.joda.time.DateMidnight dateMidnight67 = property65.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plusWeeks(40);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(51078994, 1000, 57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51078994 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale12);
        int int15 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalTime localTime17 = property7.addCopy((long) 4);
        org.joda.time.DateTimeField dateTimeField18 = property7.getField();
        long long20 = dateTimeField18.roundCeiling((-410313600007L));
        long long23 = dateTimeField18.set((long) 59466, 625);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-410313600007L) + "'", long20 == (-410313600007L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 625L + "'", long23 == 625L);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds(10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 3600);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 984);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.parse("1970-12-01", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis(10);
        int[] intArray11 = localTime8.getValues();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 7, (-1L), periodType18);
        org.joda.time.format.PeriodFormatter periodFormatter21 = null;
        java.lang.String str22 = mutablePeriod20.toString(periodFormatter21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.years();
        mutablePeriod20.add(durationFieldType23, 6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = localTime13.withFieldAdded(durationFieldType23, 775);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 15]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P0Y" + "'", str22, "P0Y");
        org.junit.Assert.assertNotNull(durationFieldType23);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.LocalTime localTime10 = localTime6.withHourOfDay(0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        int int12 = localTime10.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime10.minusMinutes(10);
        org.joda.time.LocalTime.Property property15 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundCeilingCopy();
        int int17 = property1.compareTo((org.joda.time.ReadablePartial) localTime16);
        int int18 = property1.get();
        java.util.Locale locale19 = null;
        int int20 = property1.getMaximumShortTextLength(locale19);
        org.joda.time.DurationField durationField21 = property1.getDurationField();
        org.joda.time.DurationField durationField22 = property1.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay23 = property1.withMaximumValue();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.secondOfMinute();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay12.dayOfMonth();
        int int23 = property22.get();
        org.joda.time.DurationField durationField24 = property22.getDurationField();
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology55 = mutableInterval54.getChronology();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        org.joda.time.DateTime dateTime57 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate59 = localDate56.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval(obj60, chronology61);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        java.lang.Object obj65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval(obj65, chronology66);
        org.joda.time.MutableInterval mutableInterval68 = interval67.toMutableInterval();
        org.joda.time.Chronology chronology69 = mutableInterval68.getChronology();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) (short) 0, chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = localDate70.toDateTimeAtMidnight(dateTimeZone71);
        org.joda.time.Interval interval73 = interval62.withStart((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = localDate56.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate.Property property76 = localDate56.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight79 = localDate56.toDateMidnight(dateTimeZone78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.plus(readableDuration80);
        int int82 = property22.compareTo((org.joda.time.ReadableInstant) dateMidnight81);
        int int83 = property22.getMinimumValueOverall();
        org.joda.time.tz.NameProvider nameProvider84 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale85 = java.util.Locale.CHINA;
        java.lang.String str88 = nameProvider84.getShortName(locale85, "months", "months");
        java.util.Set<java.lang.Character> charSet89 = locale85.getExtensionKeys();
        java.lang.String str90 = property22.getAsText(locale85);
        org.joda.time.YearMonthDay yearMonthDay92 = property22.addWrapFieldToCopy(363);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay94 = property22.setCopy((-995));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -995 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 25 + "'", int23 == 25);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(nameProvider84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_CN");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(charSet89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "25" + "'", str90, "25");
        org.junit.Assert.assertNotNull(yearMonthDay92);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        java.lang.String str12 = timeOfDay11.toString();
        int int13 = timeOfDay11.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay11.minuteOfHour();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay11.secondOfMinute();
        org.joda.time.DateTime dateTime16 = timeOfDay11.toDateTimeToday();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay11.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay19 = property17.addNoWrapToCopy(33139005);
        org.joda.time.TimeOfDay timeOfDay21 = property17.addWrapFieldToCopy(1918);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = property17.setCopy(2720);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2720 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "T00:00:00.010" + "'", str12, "T00:00:00.010");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        java.lang.String str8 = localTime6.toString();
        org.joda.time.LocalTime localTime10 = localTime6.withMillisOfDay(9);
        org.joda.time.LocalTime localTime12 = localTime6.withMillisOfDay(34);
        org.joda.time.LocalTime.Property property13 = localTime6.hourOfDay();
        org.joda.time.LocalTime.Property property14 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime15.withHourOfDay(1380);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1380 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.015" + "'", str8, "00:00:00.015");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addWrapFieldToCopy(13);
        org.joda.time.LocalTime localTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.addCopy(25200020);
        org.joda.time.LocalTime localTime17 = property7.addNoWrapToCopy(26449);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:0...\" is malformed at \"/1970-01-01T00:00:00.059+00:00:0...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1645514165374L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(0);
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        int int14 = dateTime13.getMinuteOfDay();
        int int15 = dateTime13.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.util.Locale locale19 = new java.util.Locale("years");
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = dateTimeZone16.getName(2022L, locale19);
        java.lang.String str23 = dateTimeZone16.getNameKey(92234367067114000L);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property27 = localTime4.property(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals(locale19.toString(), "years");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+81:11:18.994" + "'", str21, "+81:11:18.994");
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 26279);
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(408);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone6);
        org.joda.time.LocalTime localTime9 = localTime7.withMillisOfDay(15);
        org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(0);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.Chronology chronology15 = localTime13.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 13, periodType4, chronology15);
        org.joda.time.DurationField durationField17 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfEra();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int51 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate localDate53 = localDate31.plusYears(10);
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        java.lang.Object obj58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval(obj58, chronology59);
        org.joda.time.MutableInterval mutableInterval61 = interval60.toMutableInterval();
        org.joda.time.Chronology chronology62 = mutableInterval61.getChronology();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (short) 0, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.halfdayOfDay();
        org.joda.time.DurationField durationField65 = chronology62.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.yearOfCentury();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology62);
        org.joda.time.Period period69 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period71 = period69.withHours((int) '4');
        long long74 = chronology62.add((org.joda.time.ReadablePeriod) period69, (long) (byte) -1, 1970);
        org.joda.time.Period period76 = period69.plusWeeks(10);
        org.joda.time.Period period77 = period69.toPeriod();
        org.joda.time.PeriodType periodType78 = period69.getPeriodType();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 25, periodType78);
        org.joda.time.LocalDate localDate80 = localDate55.plus((org.joda.time.ReadablePeriod) period79);
        int int81 = localDate80.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate83 = localDate80.withYearOfCentury(1974);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1974 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 70919999999L + "'", long74 == 70919999999L);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay12.plusYears(0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        mutablePeriod27.set(durationFieldType28, 2);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        int int40 = dateTime39.getMinuteOfDay();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.years();
        mutablePeriod45.set(durationFieldType46, 2);
        int int49 = mutablePeriod27.indexOf(durationFieldType46);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay12.withFieldAdded(durationFieldType46, 45);
        int int52 = yearMonthDay51.getYear();
        java.lang.String str53 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((java.lang.Object) str53);
        java.lang.Object obj58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval(obj58, chronology59);
        org.joda.time.MutableInterval mutableInterval61 = interval60.toMutableInterval();
        org.joda.time.Chronology chronology62 = mutableInterval61.getChronology();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (short) 0, chronology62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) (short) -1, chronology62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, chronology62);
        java.lang.Object obj66 = mutablePeriod65.clone();
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay54.plus((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int68 = yearMonthDay67.getDayOfMonth();
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2067 + "'", int52 == 2067);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2067-02-25" + "'", str53, "2067-02-25");
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 25 + "'", int68 == 25);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime2.plusSeconds(15);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        int int9 = timeZone7.getOffset((long) 51);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        int int11 = calendar10.getWeekYear();
        calendar10.roll((int) (short) 0, false);
        int int15 = calendar10.getMinimalDaysInFirstWeek();
        calendar10.setLenient(true);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromCalendarFields(calendar10);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.plusMillis(17);
        int int21 = localTime2.compareTo((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay18.minusMinutes(32772);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay18.secondOfMinute();
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = interval29.isBefore(readableInstant31);
        org.joda.time.Chronology chronology33 = interval29.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekyearOfCentury();
        org.joda.time.DurationField durationField36 = dateTimeField35.getDurationField();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = dateTimeField35.getAsShortText((long) 70, locale38);
        java.lang.String str40 = locale25.getDisplayCountry(locale38);
        int int41 = property24.getMaximumTextLength(locale25);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3860312 + "'", int9 == 3860312);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-125940760642114,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=26,SECOND=58,MILLISECOND=198,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "70" + "'", str39, "70");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "United States" + "'", str40, "United States");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusYears(22);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay14.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = property15.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.withYear(22);
        int[] intArray19 = yearMonthDay18.getValues();
        java.lang.Object obj22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval(obj22, chronology23);
        org.joda.time.MutableInterval mutableInterval25 = interval24.toMutableInterval();
        org.joda.time.Chronology chronology26 = mutableInterval25.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) -1, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.weekyear();
        org.joda.time.Period period32 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period34 = period32.multipliedBy(0);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period37 = period32.withFieldAdded(durationFieldType35, 2);
        org.joda.time.Period period39 = period32.minusMinutes(13);
        int[] intArray42 = chronology26.get((org.joda.time.ReadablePeriod) period32, 15L, (long) (short) 10);
        org.joda.time.Chronology chronology43 = chronology26.withUTC();
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay18.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[22, 2, 25]");
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, -5]");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:15:52.426Z/2022-02-22T07:15:52.426Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        int int6 = timeZone4.getOffset((long) 51);
        timeZone4.setRawOffset(18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.parse("years", strMap10);
        java.util.Locale locale14 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray28 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone32);
        org.joda.time.LocalTime localTime35 = localTime33.withMillisOfDay(15);
        org.joda.time.LocalTime localTime37 = localTime35.withHourOfDay(0);
        org.joda.time.LocalTime localTime39 = localTime35.withHourOfDay(0);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        int int41 = localTime39.getMillisOfSecond();
        org.joda.time.LocalTime localTime43 = localTime39.minusMinutes(10);
        boolean boolean44 = strSet29.remove((java.lang.Object) localTime43);
        java.lang.String[] strArray46 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = strSet29.retainAll((java.util.Collection<java.lang.String>) strList47);
        boolean boolean50 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder51.setVariant("months");
        java.util.Locale.Builder builder55 = builder51.setVariant("");
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.util.Locale.Builder builder59 = builder55.setLocale(locale56);
        boolean boolean60 = strSet29.contains((java.lang.Object) locale56);
        java.util.Locale locale61 = locale56.stripExtensions();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone4, locale56);
        java.lang.String str63 = timeZone1.getDisplayName(locale56);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3860312 + "'", int6 == 3860312);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 15 + "'", int41 == 15);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str58, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1645514557957,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=18,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=37,MILLISECOND=975,ZONE_OFFSET=18,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u6642\u9593" + "'", str63, "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("years", strMap1);
        java.lang.String[] strArray14 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone18);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfDay(15);
        org.joda.time.LocalTime localTime23 = localTime21.withHourOfDay(0);
        org.joda.time.LocalTime localTime25 = localTime21.withHourOfDay(0);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        int int27 = localTime25.getMillisOfSecond();
        org.joda.time.LocalTime localTime29 = localTime25.minusMinutes(10);
        boolean boolean30 = strSet15.remove((java.lang.Object) localTime29);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale43 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.lang.String str50 = nameProvider46.getShortName(locale47, "months", "months");
        java.util.Locale locale51 = java.util.Locale.CHINA;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.util.Locale locale56 = new java.util.Locale("hi!", "");
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category57, locale60);
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.util.Locale locale64 = java.util.Locale.CHINA;
        boolean boolean65 = locale64.hasExtensions();
        java.util.Locale locale68 = new java.util.Locale("hi!", "");
        java.util.Locale locale71 = new java.util.Locale("hi!", "");
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = locale68.getDisplayCountry(locale71);
        java.util.Locale locale74 = java.util.Locale.CHINA;
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale40, locale43, locale45, locale47, locale51, locale53, locale56, locale60, locale63, locale64, locale71, locale74 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale.FilteringMode filteringMode78 = null;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList76, filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale locale81 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Set<java.lang.String> strSet82 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray83 = strSet82.toArray();
        java.lang.Object[] objArray84 = strSet82.toArray();
        java.util.Iterator<java.lang.String> strItor85 = strSet82.iterator();
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet82);
        java.lang.Object obj87 = null;
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Interval interval89 = new org.joda.time.Interval(obj87, chronology88);
        org.joda.time.MutableInterval mutableInterval90 = interval89.toMutableInterval();
        org.joda.time.Chronology chronology91 = mutableInterval90.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = chronology91.millisOfSecond();
        org.joda.time.DurationField durationField93 = chronology91.halfdays();
        org.joda.time.MutableDateTime mutableDateTime94 = org.joda.time.MutableDateTime.now(chronology91);
        int int95 = mutableDateTime94.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property96 = mutableDateTime94.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = strSet82.contains((java.lang.Object) property96);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.joda.time.MutableDateTime$Property cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertEquals(locale71.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(strItor85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 5 + "'", int95 == 5);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.LocalTime localTime10 = localTime6.withHourOfDay(0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        int int12 = localTime10.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime10.minusMinutes(10);
        org.joda.time.LocalTime.Property property15 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundCeilingCopy();
        int int17 = property1.compareTo((org.joda.time.ReadablePartial) localTime16);
        int int18 = property1.get();
        int int19 = property1.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField20 = property1.getField();
        org.joda.time.TimeOfDay timeOfDay21 = property1.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withSecondOfMinute((-7200052));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7200052 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay12.plusYears(0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        mutablePeriod27.set(durationFieldType28, 2);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        int int40 = dateTime39.getMinuteOfDay();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.years();
        mutablePeriod45.set(durationFieldType46, 2);
        int int49 = mutablePeriod27.indexOf(durationFieldType46);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay12.withFieldAdded(durationFieldType46, 45);
        int int52 = yearMonthDay51.getYear();
        java.lang.String str53 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((java.lang.Object) str53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withYear(8);
        org.joda.time.LocalDate localDate57 = yearMonthDay54.toLocalDate();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        java.lang.Object obj60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval(obj60, chronology61);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        org.joda.time.Chronology chronology64 = mutableInterval63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.minuteOfDay();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) 1969, chronology64);
        boolean boolean68 = durationFieldType58.isSupported(chronology64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay54.withFieldAdded(durationFieldType58, 315);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2067 + "'", int52 == 2067);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2067-02-25" + "'", str53, "2067-02-25");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology7);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.millisOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period(292278994L, 28799371L, chronology7);
        org.joda.time.Period period15 = period13.minusWeeks(6232);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("months");
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.util.Locale.Builder builder8 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder8.setLanguage("");
        java.util.Locale locale11 = builder8.build();
        java.util.Locale.Builder builder13 = builder8.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setRegion("18");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 18 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str7, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "_TW");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        java.util.Date date3 = new java.util.Date((int) (short) 1, 6, 1439);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        java.util.Date date10 = localDateTime8.toDate();
        int int11 = date10.getSeconds();
        int int12 = date10.getDate();
        date10.setTime((long) 8);
        date10.setSeconds(8);
        int int17 = date10.getSeconds();
        boolean boolean18 = date3.after(date10);
        date3.setSeconds(315);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jun 08 00:05:15 GMT 1905");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 01:04:08 GMT 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(6425345, 6, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6425345 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfMinute();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        org.joda.time.DurationField durationField10 = property8.getDurationField();
        long long13 = durationField10.getMillis(26242, (long) 26279);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 26242000L + "'", long13 == 26242000L);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1476932645575320000L);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(70);
        org.joda.time.LocalDate localDate11 = localDate6.withMonthOfYear(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int13 = localDate6.get(dateTimeFieldType12);
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DurationField durationField23 = chronology20.halfdays();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 13, chronology20);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getMinuteOfDay();
        int int35 = dateTime33.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime33.getZone();
        mutableDateTime24.setZone(dateTimeZone36);
        long long39 = dateTimeZone36.previousTransition((long) 1439);
        java.util.Locale locale43 = new java.util.Locale("hi!", "");
        java.util.Locale locale46 = new java.util.Locale("hi!", "");
        java.lang.String str47 = locale46.getISO3Country();
        java.lang.String str48 = locale43.getDisplayCountry(locale46);
        java.lang.String str49 = dateTimeZone36.getShortName((long) (short) 0, locale43);
        java.lang.String str51 = dateTimeZone36.getNameKey((long) 2000);
        java.lang.String str53 = dateTimeZone36.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(dateTimeZone36);
        org.joda.time.DateTime dateTime56 = localDate6.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1439L + "'", long39 == 1439L);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+81:11:18.994" + "'", str49, "+81:11:18.994");
// flaky:         org.junit.Assert.assertNull(str51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+81:11:18.994" + "'", str53, "+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1970);
        int int6 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter5.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withDefaultYear(32772);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(1900);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.parse("1970-01-01T00:00:00.013Z", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("months");
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.util.Locale.Builder builder8 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder8.setLanguage("");
        java.util.Locale locale11 = builder8.build();
        java.util.Locale.Builder builder12 = builder8.clear();
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder14 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("2022-02-22T07:22:18.429+00:00:00.015/2022-02-22T07:22:18.429+00:00:00.015");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:22:18.429+00:00:00.015/2022-02-22T07:22:18.429+00:00:00.015 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str7, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "_TW");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(353, 53, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 353 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 11, dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(dateTimeZone2);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusMillis(1969);
        org.joda.time.LocalTime localTime8 = timeOfDay7.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        long long15 = dateTimeZone12.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone12);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 310, (long) 32770, dateTimeZone12);
        int int20 = dateTimeZone12.getOffset(826224105598L);
        org.joda.time.DateTime dateTime21 = localTime8.toDateTimeToday(dateTimeZone12);
        boolean boolean22 = dateTimeZone12.isFixed();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (short) -1, dateTimeZone12);
        mutableDateTime23.addMinutes(33070004);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setDayOfMonth(797279);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 797279 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278994 + "'", int20 == 292278994);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) -1);
        org.joda.time.LocalTime localTime13 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.addWrapFieldToCopy(100);
        org.joda.time.LocalTime localTime17 = property7.addCopy(32772);
        org.joda.time.LocalTime localTime19 = property7.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        java.util.Date date3 = new java.util.Date((int) (byte) 10, (int) (byte) 100, 0);
        int int4 = date3.getYear();
        date3.setDate(13);
        int int7 = date3.getDate();
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromDateFields(date3);
        int int9 = yearMonthDay8.getMonthOfYear();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate25, periodType31);
        org.joda.time.DateTime dateTime33 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds(52);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        mutablePeriod39.addMonths(0);
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        java.lang.Object obj47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval(obj47, chronology48);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.Chronology chronology51 = mutableInterval50.getChronology();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (short) 0, chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.Interval interval55 = interval44.withStart((org.joda.time.ReadableInstant) dateTime54);
        java.lang.Object obj57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval(obj57, chronology58);
        org.joda.time.MutableInterval mutableInterval60 = interval59.toMutableInterval();
        org.joda.time.Chronology chronology61 = mutableInterval60.getChronology();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 0, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTimeAtMidnight(dateTimeZone63);
        boolean boolean65 = interval55.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant66, readableInstant67, periodType68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.years();
        mutablePeriod69.set(durationFieldType70, 2);
        java.lang.Object obj74 = null;
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Interval interval76 = new org.joda.time.Interval(obj74, chronology75);
        org.joda.time.MutableInterval mutableInterval77 = interval76.toMutableInterval();
        org.joda.time.Chronology chronology78 = mutableInterval77.getChronology();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) (short) 0, chronology78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = localDate79.toDateTimeAtMidnight(dateTimeZone80);
        int int82 = dateTime81.getMinuteOfDay();
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod69, (org.joda.time.ReadableInstant) dateTime81);
        int int84 = dateTime81.getMinuteOfHour();
        int int85 = dateTime81.getMillisOfSecond();
        boolean boolean86 = interval55.equals((java.lang.Object) dateTime81);
        org.joda.time.Interval interval88 = interval55.withStartMillis((-1L));
        org.joda.time.Duration duration89 = interval88.toDuration();
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration89);
        org.joda.time.DateTime dateTime92 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration89, 1980);
        org.joda.time.DateTime.Property property93 = dateTime33.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone94 = dateTime33.getZone();
        org.joda.time.LocalDate localDate95 = new org.joda.time.LocalDate(dateTimeZone94);
        long long98 = dateTimeZone94.convertLocalToUTC((-1630713600007L), true);
        org.joda.time.DateTime dateTime99 = yearMonthDay8.toDateTimeAtCurrentTime(dateTimeZone94);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 13 00:00:00 GMT 1918");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTimeZone94);
// flaky:         org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-1631005879001L) + "'", long98 == (-1631005879001L));
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.LocalTime.Property property6 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate16, periodType22);
        java.util.Locale locale26 = new java.util.Locale("hi!", "");
        boolean boolean27 = localDate7.equals((java.lang.Object) locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone0, locale26);
        int int30 = calendar28.getActualMaximum(5);
        calendar28.set(4, (int) (short) 0, (-1), 86399999, 1439, (-518399999));
        int int38 = calendar28.getWeekYear();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 1439, (long) 8);
        org.joda.time.Period period43 = period41.plusMinutes(70);
        org.joda.time.Period period45 = period43.plusMonths((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((int) 'a', (int) (byte) -1, 2, 8, (int) (short) -1, 10, 3, 3);
        org.joda.time.Period period55 = period45.plus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.MutablePeriod mutablePeriod56 = period55.toMutablePeriod();
        org.joda.time.Period period58 = period55.plusMillis(59);
        int int59 = period58.getMinutes();
        boolean boolean60 = calendar28.after((java.lang.Object) int59);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=248480344480720,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=9844,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=11,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=1,MILLISECOND=32,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 28 + "'", int30 == 28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9844 + "'", int38 == 9844);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 80 + "'", int59 == 80);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("years", strMap2);
        java.util.Locale locale6 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet7);
        java.lang.String[] strArray20 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone24);
        org.joda.time.LocalTime localTime27 = localTime25.withMillisOfDay(15);
        org.joda.time.LocalTime localTime29 = localTime27.withHourOfDay(0);
        org.joda.time.LocalTime localTime31 = localTime27.withHourOfDay(0);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        int int33 = localTime31.getMillisOfSecond();
        org.joda.time.LocalTime localTime35 = localTime31.minusMinutes(10);
        boolean boolean36 = strSet21.remove((java.lang.Object) localTime35);
        java.lang.String[] strArray38 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        boolean boolean41 = strSet21.retainAll((java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.setVariant("months");
        java.util.Locale.Builder builder47 = builder43.setVariant("");
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.util.Locale.Builder builder51 = builder47.setLocale(locale48);
        boolean boolean52 = strSet21.contains((java.lang.Object) locale48);
        java.lang.String str53 = locale0.getDisplayName(locale48);
        java.lang.String str54 = locale0.toLanguageTag();
        java.lang.String str55 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str50, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u6587" + "'", str53, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ja" + "'", str54, "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay12 = property9.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay12.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = timeOfDay12.withMinuteOfHour((-64));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -64 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime.Property property5 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime7 = property5.addCopy(5);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property9.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay12 = property9.addToCopy(52);
        org.joda.time.TimeOfDay timeOfDay13 = property9.withMinimumValue();
        int int14 = localTime7.compareTo((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.LocalTime localTime16 = localTime7.plusMillis(12);
        int int17 = localTime7.getMillisOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51079004 + "'", int17 == 51079004);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay2 = property1.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(52);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMillis(5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.hourOfDay();
        org.joda.time.LocalTime localTime8 = timeOfDay6.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("months");
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.util.Locale.Builder builder8 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder8.setLanguage("");
        java.util.Locale locale11 = builder8.build();
        java.util.Locale.Builder builder13 = builder8.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder8.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str7, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "_TW");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusDays(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.minusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property14.setCopy("59");
        org.joda.time.LocalDateTime localDateTime17 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMinutes((-16812838));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime4);
        org.joda.time.Chronology chronology6 = localTime2.getChronology();
        org.joda.time.LocalTime localTime8 = localTime2.withSecondOfMinute(24);
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.LocalTime.Property property11 = localTime8.minuteOfHour();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfSecond(100);
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(22);
        int int7 = localTime6.getMillisOfSecond();
        org.joda.time.Period period8 = new org.joda.time.Period();
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = period10.getFieldType((int) (short) 1);
        org.joda.time.Period period13 = period8.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period15 = period13.plusMillis(100);
        org.joda.time.Period period17 = period13.minusDays(2022);
        org.joda.time.Period period19 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType21 = period19.getFieldType((int) (short) 1);
        java.lang.String str22 = durationFieldType21.getName();
        int int23 = period13.indexOf(durationFieldType21);
        boolean boolean24 = localTime6.isSupported(durationFieldType21);
        java.lang.String str25 = durationFieldType21.toString();
        java.lang.String str26 = durationFieldType21.getName();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 78 + "'", int7 == 78);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "months" + "'", str22, "months");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "months" + "'", str25, "months");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "months" + "'", str26, "months");
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime8.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.plus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear(1970);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType24 = periodType23.withHoursRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withDaysRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Chronology chronology33 = mutableInterval32.getChronology();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        int int37 = dateTime36.getMinuteOfDay();
        int int38 = dateTime36.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime36.getZone();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        org.joda.time.Chronology chronology46 = mutableInterval45.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay40.withChronologyRetainFields(chronology46);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(5L, chronology46);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.Period period52 = new org.joda.time.Period((-259200007L), (long) 25, periodType26, chronology46);
        org.joda.time.PeriodType periodType53 = periodType26.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(3787165965796L, periodType53);
        boolean boolean55 = dateTime16.equals((java.lang.Object) periodType53);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate6.property(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = property12.addToCopy(2000);
        org.joda.time.LocalDate localDate15 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate17 = property12.setCopy(37);
        org.joda.time.DateTimeField dateTimeField18 = property12.getField();
        java.lang.Object obj19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra(310);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfCentury(22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear(26313188);
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = interval31.isBefore(readableInstant33);
        org.joda.time.Chronology chronology35 = interval31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone37);
        org.joda.time.LocalTime localTime40 = localTime38.withMillisOfDay(15);
        org.joda.time.LocalTime.Property property41 = localTime38.hourOfDay();
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePartial) localTime38, (long) 22);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray45 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localDateTime27, (-292275054), intArray43, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[9, 11, 19, 16]");
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withDurationAdded((long) 13, 0);
        org.joda.time.DateMidnight.Property property64 = dateMidnight60.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight65 = property64.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.yearOfCentury();
        java.lang.String str67 = dateMidnight65.toString();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.007" + "'", str67, "1970-01-01T00:00:00.000+00:00:00.007");
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.LocalTime.Property property6 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime8 = localTime2.minusMinutes(26517);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.withHours((int) '4');
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 13, chronology10);
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfMonth();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(120L, 24);
        org.joda.time.Period period27 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = period27.getFieldType((int) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime22.withFieldAdded(durationFieldType29, 15);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) '#');
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property42 = dateTime41.secondOfMinute();
        int int43 = property42.getMinimumValueOverall();
        org.joda.time.DateTime dateTime44 = property42.roundCeilingCopy();
        org.joda.time.DateTime dateTime46 = dateTime44.plus((long) 19);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.minus(readableDuration47);
        org.joda.time.DateTime.Property property49 = dateTime44.monthOfYear();
        org.joda.time.DateTime dateTime50 = property49.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean52 = dateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.DateTime.Property property53 = dateTime31.property(dateTimeFieldType51);
        org.joda.time.Period period55 = new org.joda.time.Period(0L);
        org.joda.time.Period period56 = period55.toPeriod();
        org.joda.time.Period period58 = org.joda.time.Period.millis(70);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.months();
        int int60 = period58.indexOf(durationFieldType59);
        org.joda.time.Period period62 = period58.plusSeconds(1969);
        org.joda.time.Period period63 = period55.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period65 = period63.withMinutes(102);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime.Property property67 = dateTime31.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = dateTime31.withMinuteOfHour(1080);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1080 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str15, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        int int8 = property7.getMaximumValue();
        org.joda.time.LocalTime localTime10 = property7.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localTime10.toString("1970-01-01T00:00:00.117");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399999 + "'", int8 == 86399999);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.DateTime dateTime4 = timeOfDay2.toDateTimeToday();
        int int5 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property6 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) 10, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = property12.addWrapFieldToCopy(15);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone16);
        int int18 = localTime17.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localTime17.getFields();
        org.joda.time.LocalTime localTime21 = localTime17.minusHours((int) '#');
        org.joda.time.DateTime dateTime22 = localTime17.toDateTimeToday();
        int int23 = dateTime22.getMinuteOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime26 = property24.addToCopy(86399999);
        org.joda.time.DateTime dateTime27 = property24.roundFloorCopy();
        org.joda.time.DateTime dateTime28 = property24.roundHalfFloorCopy();
        int int29 = dateTime28.getDayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        long long31 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod32.addMillis((-1645514451));
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 551 + "'", int23 == 551);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 25 + "'", int29 == 25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-625L) + "'", long31 == (-625L));
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("\u683c\u6797\u5a01\u6cbb\u6642\u9593");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: ??????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime8 = localTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.LocalDate.Property property9 = localDate6.monthOfYear();
        org.joda.time.LocalDate localDate10 = property9.roundHalfCeilingCopy();
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology16 = mutableInterval15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate17.property(dateTimeFieldType22);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Chronology chronology29 = mutableInterval28.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.halfdayOfDay();
        int int33 = dateTimeField31.getMaximumValue((long) 11);
        boolean boolean35 = dateTimeField31.isLeap((-1L));
        boolean boolean36 = localDate17.equals((java.lang.Object) boolean35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        boolean boolean38 = localDate17.isSupported(durationFieldType37);
        org.joda.time.LocalDate localDate40 = localDate10.withFieldAdded(durationFieldType37, 26245);
        java.lang.Object obj52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval(obj52, chronology53);
        org.joda.time.MutableInterval mutableInterval55 = interval54.toMutableInterval();
        org.joda.time.Chronology chronology56 = mutableInterval55.getChronology();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 0, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.halfdayOfDay();
        org.joda.time.DurationField durationField59 = chronology56.halfdays();
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 13, chronology56);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) ' ', chronology56);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100, 3, 7, 10, 5, 51, chronology56);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) '#', (long) 52, chronology56);
        org.joda.time.DateTimeField dateTimeField64 = chronology56.millisOfDay();
        boolean boolean65 = durationFieldType37.isSupported(chronology56);
        org.joda.time.DateTimeField dateTimeField66 = chronology56.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        boolean boolean12 = calendar3.after((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime14 = property10.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime15 = property10.getLocalDateTime();
        int int16 = localDateTime15.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMillis(7);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withYear(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone24);
        org.joda.time.LocalTime localTime27 = localTime25.withMillisOfDay(15);
        org.joda.time.LocalTime localTime29 = localTime27.withHourOfDay(0);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfDay();
        org.joda.time.LocalTime localTime31 = property30.getLocalTime();
        org.joda.time.LocalTime localTime33 = property30.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime35 = property30.addCopy((long) (byte) -1);
        org.joda.time.LocalTime localTime36 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime38 = property30.addWrapFieldToCopy(100);
        org.joda.time.LocalTime localTime39 = property30.roundCeilingCopy();
        org.joda.time.LocalTime localTime40 = property30.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime42 = property30.addCopy(50);
        org.joda.time.LocalTime localTime44 = property30.addWrapFieldToCopy(3409);
        org.joda.time.LocalTime.Property property45 = localTime44.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localTime44);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3860312 + "'", int2 == 3860312);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514559728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=27,SECOND=0,MILLISECOND=40,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        int int10 = localTime9.getSecondOfMinute();
        int int11 = localTime9.getMillisOfSecond();
        int int12 = localTime9.getMinuteOfHour();
        org.joda.time.LocalTime localTime14 = localTime9.minusHours(8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) localTime9, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 58 + "'", int10 == 58);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 751 + "'", int11 == 751);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33 + "'", int12 == 33);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.setCopy(10);
        org.joda.time.LocalDateTime localDateTime15 = property11.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        org.joda.time.Period period7 = new org.joda.time.Period();
        org.joda.time.Period period9 = period7.plusYears(822);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DurationField durationField17 = chronology15.eras();
        boolean boolean18 = period7.equals((java.lang.Object) chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(33079993, 51681780, 981, 51078994, 26229, 438, (-995), chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51078994 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(36000000, 2720, 26441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime10.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfMonth();
        long long14 = mutableDateTime12.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setMinuteOfHour(439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 439 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str11, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 13L + "'", long14 == 13L);
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(59, 15, 32770);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(13, (-70919999), 13, 27);
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusHours((int) (byte) 10);
        int[] intArray13 = timeOfDay12.getValues();
        java.util.Calendar.Builder builder14 = builder0.setFields(intArray13);
        java.util.Calendar.Builder builder18 = builder14.setWeekDate(2040, 71, (-1800));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 11, dateTimeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        java.util.Calendar.Builder builder23 = builder18.setTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone25);
        org.joda.time.LocalTime localTime28 = localTime26.withMillisOfDay(15);
        org.joda.time.LocalTime localTime30 = localTime28.withHourOfDay(0);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfDay();
        org.joda.time.LocalTime localTime32 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.setVariant("months");
        java.util.Locale locale37 = builder36.build();
        int int38 = dateTimeField33.getMaximumTextLength(locale37);
        java.util.Calendar.Builder builder39 = builder23.setLocale(locale37);
        java.util.Calendar.Builder builder43 = builder39.setTimeOfDay(70, 980, (-1645514232));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder45 = builder43.setCalendarType("2022-02-25T16:31:38.625+81:11:18.994/2022-02-25T16:31:38.625+81:11:18.994");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2022-02-25T16:31:38.625+81:11:18.994/2022-02-25T16:31:38.625+81:11:18.994");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+81:11");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((-11), 2022, 2067, 80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -11 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        java.util.Date date6 = new java.util.Date(15, 13, 15, 10, 1, (int) (byte) -1);
        date6.setSeconds(1969);
        int int9 = date6.getYear();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 15 10:32:49 GMT 1916");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate16, periodType22);
        java.util.Locale locale26 = new java.util.Locale("hi!", "");
        boolean boolean27 = localDate7.equals((java.lang.Object) locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone0, locale26);
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        org.joda.time.Chronology chronology34 = mutableInterval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 0, chronology34);
        org.joda.time.DateTime dateTime36 = localDate35.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate38 = localDate35.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = mutableInterval47.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.Interval interval52 = interval41.withStart((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = localDate35.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        java.lang.Object obj55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval(obj55, chronology56);
        org.joda.time.MutableInterval mutableInterval58 = interval57.toMutableInterval();
        org.joda.time.Chronology chronology59 = mutableInterval58.getChronology();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 0, chronology59);
        org.joda.time.DateTime dateTime61 = localDate60.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate63 = localDate60.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj64 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval(obj64, chronology65);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        org.joda.time.MutableInterval mutableInterval72 = interval71.toMutableInterval();
        org.joda.time.Chronology chronology73 = mutableInterval72.getChronology();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (short) 0, chronology73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = localDate74.toDateTimeAtMidnight(dateTimeZone75);
        org.joda.time.Interval interval77 = interval66.withStart((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime78 = localDate60.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean79 = localDate35.isEqual((org.joda.time.ReadablePartial) localDate60);
        int int80 = localDate60.getDayOfWeek();
        org.joda.time.LocalDate localDate82 = localDate60.plusYears(10);
        org.joda.time.LocalDate.Property property83 = localDate82.era();
        org.joda.time.LocalDate localDate84 = property83.getLocalDate();
        java.util.Locale locale85 = java.util.Locale.ITALY;
        java.lang.String str86 = property83.getAsShortText(locale85);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone0, locale85);
        java.util.TimeZone timeZone88 = java.util.TimeZone.getDefault();
        int int90 = timeZone88.getOffset((long) 51);
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(timeZone88);
        java.util.TimeZone timeZone92 = calendar91.getTimeZone();
        calendar87.setTimeZone(timeZone92);
        java.util.TimeZone timeZone94 = calendar87.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            calendar87.roll(40, 26476);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645514560201,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=27,SECOND=0,MILLISECOND=513,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(mutableInterval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "dopo Cristo" + "'", str86, "dopo Cristo");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1645514560202,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=27,SECOND=0,MILLISECOND=514,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone88);
// flaky:         org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3860312 + "'", int90 == 3860312);
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=1645514560202,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=27,SECOND=0,MILLISECOND=514,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone94);
// flaky:         org.junit.Assert.assertEquals(timeZone94.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(26441, 0, 14, 26502707);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26441 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int4 = calendar3.getWeekYear();
        calendar3.roll((int) (short) 0, false);
        java.time.Instant instant8 = calendar3.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        date9.setTime((long) 1970);
        java.lang.String str12 = date9.toGMTString();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromDateFields(date9);
        date9.setMinutes(1964);
        int int16 = date9.getYear();
        date9.setDate(118);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3860312 + "'", int2 == 3860312);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-125940760639621,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=27,SECOND=0,MILLISECOND=691,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Apr 28 09:44:22 GMT 1970");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1 Jan 1970 00:00:01 GMT" + "'", str12, "1 Jan 1970 00:00:01 GMT");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.DateTimeField dateTimeField12 = property7.getField();
        org.joda.time.LocalTime localTime14 = property7.setCopy(0);
        org.joda.time.DateTimeField dateTimeField15 = property7.getField();
        org.joda.time.LocalTime localTime16 = property7.roundFloorCopy();
        java.util.Locale locale20 = new java.util.Locale("1969-12-31 0:00:02", "10:00:00.000");
        java.lang.String str21 = localTime16.toString("2022-03-14", locale20);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals(locale20.toString(), "1969-12-31 0:00:02_10:00:00.000");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-03-14" + "'", str21, "2022-03-14");
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(70919999999L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusYears(1970);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusDays(37);
        int int6 = yearMonthDay3.getYear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3942 + "'", int6 == 3942);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(26473335, 1962);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26473335 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime13 = property7.addCopy(6);
        org.joda.time.LocalTime localTime14 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime17 = property7.addNoWrapToCopy(35);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addWrapFieldToCopy(13);
        org.joda.time.LocalTime localTime13 = property7.roundCeilingCopy();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTime dateTime21 = localDate20.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        int int23 = property22.getMinimumValueOverall();
        org.joda.time.DateTime dateTime24 = property22.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DurationField durationField26 = property22.getDurationField();
        org.joda.time.DateTime dateTime27 = property22.roundFloorCopy();
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime30 = property28.addWrapFieldToCopy((-6));
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded(31449600042L, 26);
        int int34 = dateTime33.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = property7.getDifference((org.joda.time.ReadableInstant) dateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -628267722083");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', (long) (-1), periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withMinutesRemoved();
        java.lang.Object obj8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj8, chronology9);
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.Chronology chronology12 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfSecond();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology12);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.secondOfMinute();
        org.joda.time.Chronology chronology17 = timeOfDay15.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((-61157375999947L), periodType6, chronology17);
        org.joda.time.PeriodType periodType19 = periodType6.withMinutesRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfFloor();
        mutableDateTime15.setMinuteOfDay((int) (short) 1);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setTime(26356882, 942, 205, (-15));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26356882 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str11, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.multipliedBy(0);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = period1.indexOf(durationFieldType4);
        org.joda.time.Period period7 = period1.minusMinutes((int) (short) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology14 = dateTimeFormatter13.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter13.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusHours((int) (byte) 10);
        int[] intArray21 = timeOfDay20.getValues();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.minusMillis(8);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.minusMillis(11);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay27 = property26.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone29);
        int int31 = localTime30.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localTime30.getFields();
        org.joda.time.LocalTime localTime34 = localTime30.minusHours((int) '#');
        org.joda.time.DateTime dateTime35 = localTime30.toDateTimeToday();
        int int36 = dateTime35.getMinuteOfDay();
        org.joda.time.DateTime.Property property37 = dateTime35.centuryOfEra();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMillis((int) (byte) 0);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '4', (long) '#');
        org.joda.time.DateTime dateTime43 = dateTime39.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        boolean boolean45 = property26.equals((java.lang.Object) dateTime43);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMonths(521);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateTime47, periodType48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime52 = dateTime47.minusDays((-13));
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths(2714);
        java.util.GregorianCalendar gregorianCalendar55 = dateTime52.toGregorianCalendar();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 551 + "'", int36 == 551);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        java.io.IOException iOException2 = new java.io.IOException("2022-02-22T07:17:07.735+00:00:00.007/2022-02-22T07:17:07.735+00:00:00.007");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        int int6 = timeZone4.getOffset((long) 51);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4);
        int int8 = calendar7.getWeekYear();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar7);
        calendar7.set((int) (byte) -1, 0, 100);
        java.io.IOException iOException15 = new java.io.IOException("hi!");
        java.io.IOException iOException17 = new java.io.IOException("Jan 1, 1970 12:00:00 AM");
        iOException15.addSuppressed((java.lang.Throwable) iOException17);
        java.io.IOException iOException20 = new java.io.IOException("hi!");
        iOException17.addSuppressed((java.lang.Throwable) iOException20);
        boolean boolean22 = calendar7.after((java.lang.Object) iOException20);
        iOException2.addSuppressed((java.lang.Throwable) iOException20);
        java.io.IOException iOException24 = new java.io.IOException("1970-08-01T00:00:16.023", (java.lang.Throwable) iOException2);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3860312 + "'", int6 == 3860312);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3860312,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-1,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=27,SECOND=1,MILLISECOND=120,ZONE_OFFSET=3860312,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withMillis((long) 15);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plusYears(100);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfYear();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.weekOfWeekyear();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        org.joda.time.MutableInterval mutableInterval72 = interval71.toMutableInterval();
        org.joda.time.Chronology chronology73 = mutableInterval72.getChronology();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (short) 0, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.halfdayOfDay();
        org.joda.time.DurationField durationField76 = chronology73.halfdays();
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) 13, chronology73);
        mutableDateTime77.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime77.year();
        mutableDateTime77.setDayOfMonth(4);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime77.setZone(dateTimeZone83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate((java.lang.Object) property66, dateTimeZone83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(mutableInterval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay12 = property9.withMaximumValue();
        int int13 = property9.getMinimumValueOverall();
        int int14 = property9.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone16);
        org.joda.time.LocalTime localTime19 = localTime17.withMillisOfDay(15);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone21);
        org.joda.time.LocalTime localTime24 = localTime22.withMillisOfDay(15);
        org.joda.time.LocalTime localTime26 = localTime24.withHourOfDay(0);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfDay();
        org.joda.time.Period period28 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime26);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        boolean boolean30 = property9.equals((java.lang.Object) localTime26);
        org.joda.time.TimeOfDay timeOfDay32 = property9.setCopy(52);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.plus(readablePeriod3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfDay();
        mutableDateTime8.setSecondOfDay((int) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.minuteOfHour();
        mutableDateTime8.add((long) 10);
        org.joda.time.DateTime dateTime15 = localTime4.toDateTime((org.joda.time.ReadableInstant) mutableDateTime8);
        java.lang.Object obj17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval(obj17, chronology18);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Chronology chronology21 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1969, chronology21);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime15.toDateTime(chronology21);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(27);
        org.joda.time.DateTime.Property property29 = dateTime26.monthOfYear();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        mutablePeriod3.set(durationFieldType4, 2);
        java.lang.Object obj8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj8, chronology9);
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.Chronology chronology12 = mutableInterval11.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        int int16 = dateTime15.getMinuteOfDay();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod3, (org.joda.time.ReadableInstant) dateTime15);
        int int18 = dateTime15.getMinuteOfHour();
        org.joda.time.DateTime.Property property19 = dateTime15.centuryOfEra();
        int int20 = property19.get();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = dateTimeField21.getAsText(16, locale23);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Chronology chronology29 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfSecond();
        org.joda.time.DurationField durationField31 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.yearOfCentury();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        int int34 = dateTimeField32.getMaximumShortTextLength(locale33);
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Chronology chronology41 = mutableInterval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType57 = periodType56.withSecondsRemoved();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate51, periodType57);
        java.util.Locale locale61 = new java.util.Locale("hi!", "");
        boolean boolean62 = localDate42.equals((java.lang.Object) locale61);
        java.util.Locale.setDefault(category35, locale61);
        java.util.Locale locale64 = java.util.Locale.getDefault(category35);
        java.lang.String str65 = locale33.getDisplayScript(locale64);
        java.lang.String str66 = locale64.getCountry();
        java.lang.String str67 = locale23.getDisplayName(locale64);
        java.util.Locale.setDefault(locale23);
        java.util.Locale locale69 = locale23.stripExtensions();
        java.lang.String str70 = locale69.getDisplayVariant();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "16" + "'", str24, "16");
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "German (Germany)" + "'", str67, "German (Germany)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addCopy(822);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property11.addCopy(292278993);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfMinute();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) 19);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTime dateTime17 = property15.getDateTime();
        org.joda.time.DateTime dateTime18 = property15.roundCeilingCopy();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getDisplayCountry();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setVariant("months");
        java.util.Locale.Builder builder25 = builder21.setVariant("");
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.util.Locale.Builder builder29 = builder25.setLocale(locale26);
        java.util.Locale.Builder builder31 = builder29.setLanguage("");
        java.util.Locale locale32 = builder29.build();
        java.lang.String str33 = locale19.getDisplayName(locale32);
        java.util.Locale locale34 = locale32.stripExtensions();
        int int35 = property15.getMaximumTextLength(locale32);
        java.lang.String str36 = locale32.getVariant();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str28, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japanese" + "'", str33, "Japanese");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "_TW");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfSecond(13);
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property7.addCopy(3);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime14 = localTime12.plusMillis(3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localTime14.toString("Jan 1, 1997 1:42:00 PM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        org.joda.time.ReadableDuration readableDuration1 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        int int11 = dateTime10.getMinuteOfDay();
        int int12 = dateTime10.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime10.getZone();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        java.lang.String str16 = periodType15.getName();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateTime10, periodType17);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.halfdayOfDay();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology24);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) 32770, chronology24);
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Chronology chronology37 = mutableInterval36.getChronology();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.halfdayOfDay();
        org.joda.time.DurationField durationField40 = chronology37.halfdays();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 13, chronology37);
        java.lang.String str42 = mutableDateTime41.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.property(dateTimeFieldType43);
        int int45 = yearMonthDay30.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay30.plusMonths(310);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        java.lang.String str51 = periodType50.getName();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1969, periodType50);
        int int53 = mutablePeriod52.getMillis();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay30.minus((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) 8);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.minusMonths(19);
        int int59 = yearMonthDay56.getMonthOfYear();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-1800), 10, 576, (int) (short) 100, 25, (int) (byte) -1, (-10), 13);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay56.plus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay30.minus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.YearMonthDay.Property property71 = yearMonthDay70.monthOfYear();
        int int72 = property71.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Years" + "'", str16, "Years");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str42, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Years" + "'", str51, "Years");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMillis(8);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis(11);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMinimumValue();
        org.joda.time.LocalTime localTime10 = timeOfDay9.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.plusMinutes((-113));
        int int13 = timeOfDay9.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(20, (int) (short) 1, 1969, (int) (byte) 1, (int) (short) 100, 0, 15, 13);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period12 = period10.withHours((int) '4');
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        java.lang.String str15 = period14.toString();
        org.joda.time.Period period17 = period14.minusYears(15);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay18.withFieldAdded(durationFieldType21, 2);
        boolean boolean24 = period14.isSupported(durationFieldType21);
        mutablePeriod8.add(durationFieldType21, 99);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod8.copy();
        mutablePeriod8.addYears(26360);
        mutablePeriod8.setYears(280);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT20220H" + "'", str15, "PT20220H");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mutablePeriod27);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, 2);
        int int3 = localTime2.size();
        org.joda.time.LocalTime localTime5 = localTime2.plusHours(35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = localTime5.withMinuteOfHour(9562);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9562 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.LocalTime localTime10 = localTime6.withHourOfDay(0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        int int12 = localTime10.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime10.minusMinutes(10);
        org.joda.time.LocalTime.Property property15 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundCeilingCopy();
        int int17 = property1.compareTo((org.joda.time.ReadablePartial) localTime16);
        java.lang.String str18 = property1.getAsString();
        org.joda.time.TimeOfDay timeOfDay20 = property1.setCopy(51);
        java.lang.String str21 = property1.toString();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[secondOfMinute]" + "'", str21, "Property[secondOfMinute]");
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTimeISO();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight64 = property62.addToCopy((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight65 = property62.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusMonths(45);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight65.minusWeeks((int) 'a');
        int int70 = dateMidnight69.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 364 + "'", int70 == 364);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.LocalTime localTime10 = localTime6.withHourOfDay(0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        int int12 = localTime10.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime10.minusMinutes(10);
        org.joda.time.LocalTime.Property property15 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundCeilingCopy();
        int int17 = property1.compareTo((org.joda.time.ReadablePartial) localTime16);
        int int18 = property1.get();
        int int19 = property1.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField20 = property1.getField();
        org.joda.time.TimeOfDay timeOfDay21 = property1.withMaximumValue();
        java.lang.String str22 = property1.getName();
        org.joda.time.TimeOfDay timeOfDay23 = property1.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusSeconds(805);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "secondOfMinute" + "'", str22, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        java.util.Date date6 = new java.util.Date(215, 790, 36, 333, 3372, 250);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 22 05:16:10 GMT 2180");
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime dateTime9 = dateTime7.withEarlierOffsetAtOverlap();
        int int10 = dateTime7.getMonthOfYear();
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology16 = mutableInterval15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Chronology chronology25 = mutableInterval24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        org.joda.time.Chronology chronology34 = mutableInterval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 0, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate35, periodType41);
        org.joda.time.DateTime dateTime43 = dateTime19.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime.Property property44 = dateTime19.year();
        org.joda.time.DateTime dateTime46 = property44.addWrapFieldToCopy(46);
        org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((int) 'a', (int) (byte) -1, 2, 8, (int) (short) -1, 10, 3, 3);
        mutablePeriod57.setPeriod((long) 8);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = null;
        org.joda.time.format.DateTimeParser dateTimeParser63 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter62, dateTimeParser63);
        org.joda.time.Chronology chronology65 = dateTimeFormatter64.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter64.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology68 = dateTimeFormatter67.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeFormatter67.getZone();
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeZone69);
        org.joda.time.Chronology chronology71 = dateMidnight70.getChronology();
        mutablePeriod57.setPeriod((long) 25200020, 0L, chronology71);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((java.lang.Object) dateTime48, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 551 + "'", int8 == 551);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNull(chronology68);
        org.junit.Assert.assertNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        org.joda.time.Period period4 = new org.joda.time.Period(0, 217, 438, 0);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(15);
        org.joda.time.LocalTime localTime13 = localTime11.withHourOfDay(0);
        org.joda.time.Period period15 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period17 = period15.multipliedBy(0);
        org.joda.time.LocalTime localTime18 = localTime13.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period20 = period17.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay6.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = timeOfDay23.toDateTimeToday(dateTimeZone24);
        long long27 = dateTimeZone24.previousTransition((-1497146384190L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) period4, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1497146384190L) + "'", long27 == (-1497146384190L));
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, 2);
        org.joda.time.Period period4 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period6 = period4.multipliedBy(0);
        int int7 = period4.getMonths();
        org.joda.time.Period period9 = period4.plusYears(0);
        org.joda.time.Duration duration10 = period9.toStandardDuration();
        org.joda.time.Period period12 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType14 = period12.getFieldType((int) (short) 1);
        org.joda.time.Period period16 = period12.minusWeeks((int) (byte) 1);
        int int17 = period16.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        boolean boolean19 = period16.isSupported(durationFieldType18);
        org.joda.time.Period period20 = period9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalTime localTime21 = localTime2.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DurationFieldType[] durationFieldTypeArray22 = period20.getFieldTypes();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.forFields(durationFieldTypeArray22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        mutablePeriod27.set(durationFieldType28, 2);
        boolean boolean31 = periodType23.isSupported(durationFieldType28);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationFieldTypeArray22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        boolean boolean8 = dateTimeFormatter6.isParser();
        java.util.Locale locale9 = dateTimeFormatter6.getLocale();
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(obj13, chronology14);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        org.joda.time.Chronology chronology17 = mutableInterval16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra(822);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-31536000000L), (long) 32772, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.millisOfSecond();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"??????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getMonthOfYear();
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone6);
        org.joda.time.LocalTime localTime9 = localTime7.withMillisOfDay(15);
        org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(0);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.year();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay3.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone20);
        org.joda.time.LocalTime localTime23 = localTime21.withMillisOfDay(15);
        org.joda.time.LocalTime localTime25 = localTime23.withHourOfDay(0);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfDay();
        java.lang.String str27 = localTime25.toString();
        org.joda.time.LocalTime localTime29 = localTime25.withMillisOfDay(9);
        org.joda.time.LocalTime localTime31 = localTime25.withMillisOfDay(34);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withField(dateTimeFieldType35, 2);
        java.lang.String str38 = dateTimeFieldType35.getName();
        org.joda.time.LocalTime localTime40 = localTime31.withField(dateTimeFieldType35, (int) (byte) 10);
        org.joda.time.DateTime.Property property41 = dateTime1.property(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "00:00:00.015" + "'", str27, "00:00:00.015");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "secondOfDay" + "'", str38, "secondOfDay");
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate14 = localDate11.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.Interval interval28 = interval17.withStart((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        java.lang.Object obj31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval(obj31, chronology32);
        org.joda.time.MutableInterval mutableInterval34 = interval33.toMutableInterval();
        org.joda.time.Chronology chronology35 = mutableInterval34.getChronology();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtMidnight(dateTimeZone37);
        int int39 = dateTime38.getMinuteOfDay();
        int int40 = dateTime38.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime27.toDateTime(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) '4', dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZone(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withPivotYear((java.lang.Integer) 35510426);
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder48.setVariant("months");
        java.util.Locale.Builder builder52 = builder48.setVariant("");
        java.util.Locale.Builder builder53 = builder52.clearExtensions();
        java.lang.Object obj55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval(obj55, chronology56);
        org.joda.time.MutableInterval mutableInterval58 = interval57.toMutableInterval();
        org.joda.time.Chronology chronology59 = mutableInterval58.getChronology();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 0, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.halfdayOfDay();
        int int63 = dateTimeField61.getMaximumValue((long) 11);
        boolean boolean65 = dateTimeField61.isLeap((-1L));
        int int66 = dateTimeField61.getMaximumValue();
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.lang.String str69 = locale67.getDisplayCountry(locale68);
        int int70 = dateTimeField61.getMaximumShortTextLength(locale67);
        java.util.Locale locale71 = locale67.stripExtensions();
        java.util.Locale.Builder builder72 = builder53.setLocale(locale67);
        java.util.Locale locale73 = builder53.build();
        java.lang.String str74 = locale73.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter47.withLocale(locale73);
        org.joda.time.format.DateTimePrinter dateTimePrinter76 = dateTimeFormatter75.getPrinter();
        boolean boolean77 = dateTimeFormatter75.isParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str69, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "zho" + "'", str74, "zho");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNull(dateTimePrinter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(822);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        int int10 = localDate8.getYearOfEra();
        org.joda.time.LocalDate localDate12 = localDate8.withCenturyOfEra(117);
        org.joda.time.Interval interval13 = localDate8.toInterval();
        org.joda.time.LocalDate.Property property14 = localDate8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate8.withEra(26536764);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26536764 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 822 + "'", int10 == 822);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfDay(15);
        org.joda.time.LocalTime localTime10 = localTime8.withHourOfDay(0);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.LocalTime localTime15 = property11.addCopy((long) (byte) 1);
        int int16 = localTime15.size();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.withField(dateTimeFieldType20, 2);
        java.lang.String str23 = dateTimeFieldType20.getName();
        int int24 = localTime15.get(dateTimeFieldType20);
        org.joda.time.LocalTime localTime26 = localTime15.plusMinutes(1439);
        org.joda.time.Chronology chronology27 = localTime15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(649, 117, (-5), 4629, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 649 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "secondOfDay" + "'", str23, "secondOfDay");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.withHours((int) '4');
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 13, chronology10);
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfMonth();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime18.setDayOfMonth(10);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Chronology chronology29 = mutableInterval28.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology29.halfdays();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 13, chronology29);
        java.lang.String str34 = mutableDateTime33.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.property(dateTimeFieldType35);
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundFloor();
        mutableDateTime37.addMillis(1969);
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) mutableDateTime37);
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        org.joda.time.Chronology chronology46 = mutableInterval45.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.halfdayOfDay();
        org.joda.time.DurationField durationField49 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.yearOfEra();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = dateTimeField51.getAsShortText((long) (short) 100, locale53);
        long long57 = dateTimeField51.set((long) 53, (int) ' ');
        mutableDateTime18.setRounding(dateTimeField51);
        java.lang.String str60 = dateTimeField51.getAsText((long) 69);
        boolean boolean61 = dateTimeField51.isLenient();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str15, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str34, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970" + "'", str54, "1970");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-61157375999947L) + "'", long57 == (-61157375999947L));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime7.withLaterOffsetAtOverlap();
        int int13 = dateTime7.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 551 + "'", int8 == 551);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 551 + "'", int13 == 551);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(10);
        org.joda.time.LocalTime.Property property13 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property13.addWrapFieldToCopy(16);
        org.joda.time.LocalTime localTime18 = property13.addNoWrapToCopy(19);
        org.joda.time.LocalTime localTime19 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime21 = property13.addCopy(5L);
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = localTime21.getField(0);
        java.lang.String str25 = dateTimeField24.toString();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DateTimeField[hourOfDay]" + "'", str25, "DateTimeField[hourOfDay]");
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.Interval interval13 = interval2.withStart((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime12);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.LocalDate.Property property16 = localDate14.weekOfWeekyear();
        org.joda.time.DateTime dateTime17 = localDate14.toDateTimeAtCurrentTime();
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        int int27 = dateTime26.getMinuteOfDay();
        int int28 = dateTime26.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay30.withChronologyRetainFields(chronology36);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay30.withYear((int) 'x');
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay41.toDateMidnight();
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = mutableInterval47.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property55 = localDate49.property(dateTimeFieldType54);
        boolean boolean56 = yearMonthDay41.isSupported(dateTimeFieldType54);
        org.joda.time.LocalDate.Property property57 = localDate14.property(dateTimeFieldType54);
        org.joda.time.LocalDate localDate58 = property57.roundCeilingCopy();
        int int59 = localDate58.getDayOfYear();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate58.toDateTime(readableInstant60);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(51079004, 27, 26205, 204270, 863980, (-1645514516));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 204270 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale12);
        int int15 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalTime localTime17 = property7.addCopy((long) 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property7.getFieldType();
        org.joda.time.DateTimeField dateTimeField19 = property7.getField();
        org.joda.time.LocalTime localTime20 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime22 = localTime20.plusMinutes(694);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate19, periodType25);
        boolean boolean27 = calendar3.after((java.lang.Object) periodType25);
        int int28 = calendar3.getWeeksInWeekYear();
        calendar3.set(0, (int) (byte) -1, 20, 1, 100, 45);
        java.util.Locale locale38 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet40 = locale38.getExtensionKeys();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale38);
        calendar41.set(4, 45, 117);
        java.util.Date date46 = calendar41.getTime();
        calendar3.setTime(date46);
        calendar3.clear();
        calendar3.set(1, 25, 32769, 32769, 447, 43);
        calendar3.roll(280, 0);
        calendar3.set((-5), 38, 26451, 26517505, 26502707, 4);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-5,MONTH=38,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=26451,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=26517505,MINUTE=26502707,SECOND=4,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-61912831037580,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=25,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=42,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Wed Jan 25 07:22:42 GMT 8");
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.centuryOfEra();
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.DateTime dateTime13 = property10.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 1439, (long) 8);
        org.joda.time.Period period19 = period17.plusMinutes(70);
        org.joda.time.Period period21 = period19.plusMonths((int) (byte) -1);
        org.joda.time.LocalTime localTime22 = localTime14.plus((org.joda.time.ReadablePeriod) period19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 551 + "'", int8 == 551);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "33079004" + "'", str11, "33079004");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate15, periodType21);
        java.util.Locale locale25 = new java.util.Locale("hi!", "");
        boolean boolean26 = localDate6.equals((java.lang.Object) locale25);
        org.joda.time.LocalDate.Property property27 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.roundFloorCopy();
        org.joda.time.LocalDate localDate29 = property27.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate30 = property27.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField31 = property27.getField();
        org.joda.time.LocalDate localDate32 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate33 = property27.withMaximumValue();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = interval6.isBefore(readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        mutablePeriod13.set(durationFieldType14, 2);
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Chronology chronology22 = mutableInterval21.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtMidnight(dateTimeZone24);
        int int26 = dateTime25.getMinuteOfDay();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod13, (org.joda.time.ReadableInstant) dateTime25);
        int int28 = dateTime25.getMinuteOfHour();
        int int29 = dateTime25.getMillisOfSecond();
        boolean boolean30 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property31 = dateTime25.secondOfMinute();
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.halfdayOfDay();
        org.joda.time.DurationField durationField42 = chronology39.halfdays();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 13, chronology39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) ' ', chronology39);
        org.joda.time.DateTimeField dateTimeField45 = chronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology39);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        org.joda.time.Chronology chronology53 = mutableInterval52.getChronology();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 0, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTimeAtMidnight(dateTimeZone55);
        int int57 = dateTime56.getMinuteOfDay();
        int int58 = dateTime56.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime56.getZone();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology62 = chronology39.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime25.toDateTime(dateTimeZone59);
        org.joda.time.DateTime.Property property64 = dateTime25.millisOfDay();
        java.lang.Object obj65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval(obj65, chronology66);
        org.joda.time.MutableInterval mutableInterval68 = interval67.toMutableInterval();
        org.joda.time.Chronology chronology69 = mutableInterval68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.millisOfSecond();
        org.joda.time.DurationField durationField71 = chronology69.weekyears();
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((-5), 521, 41, 26458, chronology69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfDay(15);
        org.joda.time.LocalTime localTime10 = localTime8.withHourOfDay(0);
        org.joda.time.LocalTime localTime12 = localTime10.minusHours((int) (byte) 0);
        int int13 = localTime10.getMinuteOfHour();
        int int14 = localTime10.getMillisOfSecond();
        org.joda.time.LocalTime localTime16 = localTime10.minusMillis(24);
        org.joda.time.LocalTime localTime18 = localTime10.plusMillis(10017);
        org.joda.time.Chronology chronology19 = localTime10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, 2055, 26502707, (-1036830771), chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2055 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.lang.String str5 = calendar3.getCalendarType();
        java.util.Date date6 = calendar3.getTime();
        int int7 = calendar3.getWeekYear();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 292278994 + "'", int2 == 292278994);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514563471,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+81:11:18.994,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=34,SECOND=2,MILLISECOND=465,ZONE_OFFSET=292278994,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+81:11");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gregory" + "'", str5, "gregory");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 25 16:34:02 GMT+81:11 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfSecond(13);
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property7.addCopy(3);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property7.addWrapFieldToCopy(16);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay12.dayOfMonth();
        java.util.Locale locale25 = new java.util.Locale("hi!", "");
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.Interval interval40 = interval29.withStart((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTime39);
        int int42 = property22.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int43 = property22.getMaximumValueOverall();
        int int44 = property22.get();
        int int45 = property22.get();
        org.joda.time.YearMonthDay yearMonthDay46 = property22.getYearMonthDay();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period49 = new org.joda.time.Period(0L, periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.months();
        int int51 = period49.get(durationFieldType50);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay46.minus((org.joda.time.ReadablePeriod) period49);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay52);
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        java.lang.String str11 = dateTimeField10.toString();
        long long14 = dateTimeField10.add((long) 20, 2022);
        int int16 = dateTimeField10.get((long) 39);
        java.util.Locale locale17 = null;
        int int18 = dateTimeField10.getMaximumShortTextLength(locale17);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[millisOfDay]" + "'", str11, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2042L + "'", long14 == 2042L);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(440);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1969, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.addCopy((long) 42);
        org.joda.time.LocalTime localTime14 = property10.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withSecondOfMinute((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        int int13 = localDateTime10.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minusDays(100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.minusMillis((int) (short) 0);
        org.joda.time.Period period29 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period31 = period29.multipliedBy(0);
        int int32 = period29.getMonths();
        org.joda.time.Period period34 = period29.plusYears(0);
        org.joda.time.Duration duration35 = period34.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration35, 11);
        int int38 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime10.plusMillis(26191);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime10.minusMillis(172800);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 1969, dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) 1036801987L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDateTime42.toDateTime(dateTimeZone45);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-2033769600001L), 1645488000005L, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(200070L, dateTimeZone45);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        int int5 = localTime2.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMillisOfDay(15);
        org.joda.time.LocalTime localTime12 = localTime10.withHourOfDay(0);
        org.joda.time.LocalTime localTime14 = localTime10.withHourOfDay(0);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.LocalTime localTime17 = localTime14.plusMinutes(1);
        org.joda.time.LocalTime localTime19 = localTime14.plusMillis(0);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfSecond(822);
        org.joda.time.LocalTime localTime22 = localTime2.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime24 = localTime2.plusMillis(66145375);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.Interval interval13 = interval2.withStart((org.joda.time.ReadableInstant) dateTime12);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        boolean boolean23 = interval13.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        mutablePeriod27.set(durationFieldType28, 2);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        int int40 = dateTime39.getMinuteOfDay();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod27, (org.joda.time.ReadableInstant) dateTime39);
        int int42 = dateTime39.getMinuteOfHour();
        int int43 = dateTime39.getMillisOfSecond();
        boolean boolean44 = interval13.equals((java.lang.Object) dateTime39);
        org.joda.time.Interval interval46 = interval13.withStartMillis((-1L));
        boolean boolean48 = interval13.isAfter((long) 1969);
        org.joda.time.Interval interval49 = interval13.toInterval();
        org.joda.time.Interval interval51 = interval49.withStartMillis(4492799949L);
        org.joda.time.DateTime dateTime52 = interval51.getStart();
        org.joda.time.DateTime.Property property53 = dateTime52.centuryOfEra();
        org.joda.time.DateTime dateTime54 = property53.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        timeZone0.setRawOffset(18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("years", strMap6);
        java.util.Locale locale10 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet11);
        java.lang.String[] strArray24 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone28);
        org.joda.time.LocalTime localTime31 = localTime29.withMillisOfDay(15);
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay(0);
        org.joda.time.LocalTime localTime35 = localTime31.withHourOfDay(0);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        int int37 = localTime35.getMillisOfSecond();
        org.joda.time.LocalTime localTime39 = localTime35.minusMinutes(10);
        boolean boolean40 = strSet25.remove((java.lang.Object) localTime39);
        java.lang.String[] strArray42 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        boolean boolean45 = strSet25.retainAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean46 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.setVariant("months");
        java.util.Locale.Builder builder51 = builder47.setVariant("");
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.util.Locale.Builder builder55 = builder51.setLocale(locale52);
        boolean boolean56 = strSet25.contains((java.lang.Object) locale52);
        java.util.Locale locale57 = locale52.stripExtensions();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone0, locale52);
        java.lang.Class<?> wildcardClass59 = timeZone0.getClass();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 292278994 + "'", int2 == 292278994);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str54, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514563995,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+81:11:18.994,offset=18,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=44,MILLISECOND=13,ZONE_OFFSET=18,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.weekyear();
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.withMillis((long) 2067);
        org.joda.time.DateTime dateTime14 = dateTime7.plusHours(6425345);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(47);
        int int17 = dateTime14.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 61200 + "'", int17 == 61200);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        mutableDateTime1.addSeconds((int) (short) -1);
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        int int14 = dateTime13.getMinuteOfDay();
        int int15 = dateTime13.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        mutableDateTime1.setZoneRetainFields(dateTimeZone16);
        mutableDateTime1.addWeekyears(16);
        mutableDateTime1.addSeconds(51);
        mutableDateTime1.addMillis(31);
        mutableDateTime1.addYears(32769);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.add(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period12 = period10.multipliedBy(0);
        org.joda.time.LocalTime localTime13 = localTime8.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusMinutes(22);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(32769);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(1645488000005L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusSeconds((-431));
        org.joda.time.DateTime dateTime27 = dateTime23.plusDays((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType37 = periodType36.withHoursRemoved();
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Chronology chronology43 = mutableInterval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, periodType36, chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekyearOfCentury();
        mutablePeriod32.setPeriod((long) (byte) -1, (long) 'a', chronology43);
        java.lang.String str48 = chronology43.toString();
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology55 = mutableInterval54.getChronology();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        org.joda.time.DateTime dateTime57 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate59 = localDate56.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval(obj60, chronology61);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        java.lang.Object obj65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval(obj65, chronology66);
        org.joda.time.MutableInterval mutableInterval68 = interval67.toMutableInterval();
        org.joda.time.Chronology chronology69 = mutableInterval68.getChronology();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) (short) 0, chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = localDate70.toDateTimeAtMidnight(dateTimeZone71);
        org.joda.time.Interval interval73 = interval62.withStart((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = localDate56.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        java.lang.Object obj76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval(obj76, chronology77);
        org.joda.time.MutableInterval mutableInterval79 = interval78.toMutableInterval();
        org.joda.time.Chronology chronology80 = mutableInterval79.getChronology();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) (short) 0, chronology80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = localDate81.toDateTimeAtMidnight(dateTimeZone82);
        int int84 = dateTime83.getMinuteOfDay();
        int int85 = dateTime83.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime83.getZone();
        org.joda.time.YearMonthDay yearMonthDay87 = new org.joda.time.YearMonthDay(dateTimeZone86);
        org.joda.time.DateTime dateTime88 = dateTime72.toDateTime(dateTimeZone86);
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight((long) '4', dateTimeZone86);
        org.joda.time.Chronology chronology90 = chronology43.withZone(dateTimeZone86);
        org.joda.time.MutableDateTime mutableDateTime91 = new org.joda.time.MutableDateTime((long) 521, chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType92.getDurationType();
        int int94 = mutableDateTime91.get(dateTimeFieldType92);
        boolean boolean95 = dateTime27.isSupported(dateTimeFieldType92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property96 = timeOfDay18.property(dateTimeFieldType92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[+00:00:00.013]" + "'", str48, "ISOChronology[+00:00:00.013]");
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(durationFieldType93);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 534 + "'", int94 == 534);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period12 = period10.multipliedBy(0);
        org.joda.time.LocalTime localTime13 = localTime8.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = period15.minusDays((-1645514232));
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) -1, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(28);
        int int6 = localDateTime3.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMonths(2720);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant9, readableInstant10, periodType11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        mutablePeriod17.set(durationFieldType18, 2);
        java.lang.Object obj22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval(obj22, chronology23);
        org.joda.time.MutableInterval mutableInterval25 = interval24.toMutableInterval();
        org.joda.time.Chronology chronology26 = mutableInterval25.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        int int30 = dateTime29.getMinuteOfDay();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod17, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property32 = dateTime29.dayOfWeek();
        org.joda.time.DateTime dateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime34 = property32.getDateTime();
        mutablePeriod12.setPeriod(readableInstant13, (org.joda.time.ReadableInstant) dateTime34);
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Chronology chronology41 = mutableInterval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        int int47 = dateTime46.getDayOfYear();
        java.lang.Object obj48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval(obj48, chronology49);
        org.joda.time.MutableInterval mutableInterval51 = interval50.toMutableInterval();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(obj53, chronology54);
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.Chronology chronology57 = mutableInterval56.getChronology();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (short) 0, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.Interval interval61 = interval50.withStart((org.joda.time.ReadableInstant) dateTime60);
        mutablePeriod12.setPeriod((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime.Property property63 = dateTime46.hourOfDay();
        int int64 = dateTime46.getMonthOfYear();
        java.lang.Object obj67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval(obj67, chronology68);
        org.joda.time.MutableInterval mutableInterval70 = interval69.toMutableInterval();
        org.joda.time.Chronology chronology71 = mutableInterval70.getChronology();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (short) 0, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.halfdayOfDay();
        org.joda.time.DurationField durationField74 = chronology71.halfdays();
        org.joda.time.DateTimeField dateTimeField75 = chronology71.yearOfCentury();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology71);
        org.joda.time.Period period78 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period80 = period78.withHours((int) '4');
        long long83 = chronology71.add((org.joda.time.ReadablePeriod) period78, (long) (byte) -1, 1970);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(chronology71);
        org.joda.time.Period period85 = new org.joda.time.Period((-1630713600001L), chronology71);
        org.joda.time.DateTimeField dateTimeField86 = chronology71.dayOfYear();
        org.joda.time.DateTime dateTime87 = dateTime46.withChronology(chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((java.lang.Object) localDateTime3, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 70919999999L + "'", long83 == 70919999999L);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        int int9 = localDateTime7.getYear();
        org.joda.time.Period period10 = new org.joda.time.Period();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withFieldAdded(durationFieldType12, 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours((-14));
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay12 = property9.withMaximumValue();
        int int13 = property9.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property9.getField();
        int int15 = property9.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay17 = property9.setCopy(22);
        org.joda.time.TimeOfDay timeOfDay19 = property9.addToCopy(69);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minusMinutes(822);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone24);
        org.joda.time.LocalTime localTime27 = localTime25.withMillisOfDay(15);
        org.joda.time.LocalTime localTime29 = localTime27.withHourOfDay(0);
        org.joda.time.LocalTime localTime31 = localTime27.withHourOfDay(0);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((-62135596800007L), chronology32);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology32);
        org.joda.time.Period period37 = org.joda.time.Period.millis((-518399999));
        org.joda.time.Period period38 = period37.toPeriod();
        long long41 = chronology32.add((org.joda.time.ReadablePeriod) period37, (-31536000007L), 0);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay21.withChronologyRetainFields(chronology32);
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.millisOfSecond();
        org.joda.time.DurationField durationField50 = chronology48.weekyears();
        org.joda.time.TimeOfDay timeOfDay51 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology48);
        org.joda.time.TimeOfDay.Property property52 = timeOfDay51.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay54 = property52.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay55 = property52.withMaximumValue();
        org.joda.time.DurationField durationField56 = property52.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property52.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay59 = timeOfDay21.withField(dateTimeFieldType57, 26538);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26538 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-31536000007L) + "'", long41 == (-31536000007L));
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.LocalTime.Property property6 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis(10022);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localTime2.toString("Jan 1, 1997 1:42:00 PM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.Period period14 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period16 = period14.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period19 = period14.withFieldAdded(durationFieldType17, (int) (byte) 10);
        org.joda.time.LocalTime localTime20 = localTime12.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalTime localTime22 = localTime20.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property23 = localTime20.millisOfDay();
        org.joda.time.LocalTime localTime24 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        long long29 = dateTimeZone26.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone26);
        java.lang.String str33 = dateTimeZone26.getShortName((long) 994);
        org.joda.time.DateTime dateTime34 = localTime24.toDateTimeToday(dateTimeZone26);
        org.joda.time.Period period36 = org.joda.time.Period.millis(0);
        org.joda.time.LocalTime localTime38 = localTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 1960);
        int int39 = localTime38.size();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.013" + "'", str33, "+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        java.lang.String str8 = localTime6.toString();
        org.joda.time.LocalTime localTime10 = localTime6.withMillisOfDay(9);
        org.joda.time.LocalTime localTime12 = localTime6.withMillisOfDay(34);
        org.joda.time.LocalTime localTime14 = localTime6.minusMillis(0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.015" + "'", str8, "00:00:00.015");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        long long4 = interval2.toDurationMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Interval interval6 = interval2.withDurationAfterStart(readableDuration5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Interval interval9 = interval6.withStartMillis((long) 359);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.yearOfCentury();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.Interval interval19 = interval9.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.millisOfDay();
        long long24 = dateTimeField21.add((long) 250, 26205);
        boolean boolean26 = dateTimeField21.isLeap((long) 26449);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 26455L + "'", long24 == 26455L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 13, chronology8);
        java.lang.String str13 = mutableDateTime12.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.property(dateTimeFieldType14);
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundFloor();
        mutableDateTime16.setTime(19, 0, (int) '4', (int) (byte) 100);
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Chronology chronology28 = mutableInterval27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.halfdayOfDay();
        org.joda.time.DurationField durationField31 = chronology28.halfdays();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 13, chronology28);
        java.lang.String str33 = mutableDateTime32.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.property(dateTimeFieldType34);
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundFloor();
        java.lang.Object obj38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(obj38, chronology39);
        org.joda.time.MutableInterval mutableInterval41 = interval40.toMutableInterval();
        org.joda.time.Chronology chronology42 = mutableInterval41.getChronology();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.DateTime dateTime44 = localDate43.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate46 = localDate43.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval(obj47, chronology48);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        java.lang.Object obj52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval(obj52, chronology53);
        org.joda.time.MutableInterval mutableInterval55 = interval54.toMutableInterval();
        org.joda.time.Chronology chronology56 = mutableInterval55.getChronology();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 0, chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTimeAtMidnight(dateTimeZone58);
        org.joda.time.Interval interval60 = interval49.withStart((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = localDate43.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate43.toDateTimeAtCurrentTime(dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType67 = periodType66.withMillisRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) mutableDateTime36, periodType67);
        java.lang.Object obj71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Interval interval73 = new org.joda.time.Interval(obj71, chronology72);
        org.joda.time.MutableInterval mutableInterval74 = interval73.toMutableInterval();
        org.joda.time.Chronology chronology75 = mutableInterval74.getChronology();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) (short) 0, chronology75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) (short) -1, chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.weekyear();
        org.joda.time.Period period81 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period83 = period81.multipliedBy(0);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period86 = period81.withFieldAdded(durationFieldType84, 2);
        org.joda.time.Period period88 = period81.minusMinutes(13);
        int[] intArray91 = chronology75.get((org.joda.time.ReadablePeriod) period81, 15L, (long) (short) 10);
        org.joda.time.DateTimeField dateTimeField92 = chronology75.yearOfEra();
        org.joda.time.Chronology chronology93 = chronology75.withUTC();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((-2203197925L), (long) 2040, periodType67, chronology93);
        org.joda.time.DateTime dateTime95 = org.joda.time.DateTime.now(chronology93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime97 = dateTime95.withMinuteOfHour((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str13, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str33, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 0, 0, 0, 0, 0, -5]");
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        long long6 = dateTimeZone3.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone3);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology15.weekyears();
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology15);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DurationField durationField21 = chronology15.weekyears();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime8.toMutableDateTime(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(300, 59443, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 300 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("PT-19H-52S", strMap1);
        org.joda.time.tz.Provider provider3 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone5 = provider3.getZone("secondOfDay");
        org.joda.time.DateTimeZone.setProvider(provider3);
        java.util.Set<java.lang.String> strSet7 = provider3.getAvailableIDs();
        java.lang.String[] strArray19 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone23);
        org.joda.time.LocalTime localTime26 = localTime24.withMillisOfDay(15);
        org.joda.time.LocalTime localTime28 = localTime26.withHourOfDay(0);
        org.joda.time.LocalTime localTime30 = localTime26.withHourOfDay(0);
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        int int32 = localTime30.getMillisOfSecond();
        org.joda.time.LocalTime localTime34 = localTime30.minusMinutes(10);
        boolean boolean35 = strSet20.remove((java.lang.Object) localTime34);
        java.lang.String[] strArray37 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strSet20.retainAll((java.util.Collection<java.lang.String>) strList38);
        boolean boolean41 = strSet7.addAll((java.util.Collection<java.lang.String>) strSet20);
        java.lang.String str42 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet7);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(provider3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property13 = localDate7.property(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = localDate7.withYear(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str17 = dateTimeFieldType16.toString();
        boolean boolean18 = localDate7.isSupported(dateTimeFieldType16);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DurationField durationField26 = chronology24.eras();
        boolean boolean27 = dateTimeFieldType16.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.weekyear();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((-9541522L), chronology24);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfCentury" + "'", str17, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology5);
        org.joda.time.Period period12 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period14 = period12.withHours((int) '4');
        long long17 = chronology5.add((org.joda.time.ReadablePeriod) period12, (long) (byte) -1, 1970);
        org.joda.time.Period period19 = period12.plusWeeks(10);
        org.joda.time.Period period20 = period12.toPeriod();
        org.joda.time.PeriodType periodType21 = period12.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.PeriodType periodType23 = periodType21.withDaysRemoved();
        int int24 = periodType21.size();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 70919999999L + "'", long17 == 70919999999L);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay12 = property9.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay16 = property15.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = property15.setCopy("1 Jan 1970 00:00:10 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1 Jan 1970 00:00:10 GMT\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        org.joda.time.LocalTime localTime13 = localTime8.plusMillis(0);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfSecond(822);
        org.joda.time.LocalTime.Property property16 = localTime13.hourOfDay();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        mutablePeriod20.set(durationFieldType21, 2);
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Chronology chronology28 = mutableInterval27.getChronology();
        mutablePeriod20.setPeriod((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.Period period30 = mutableInterval27.toPeriod();
        int int31 = period30.getMinutes();
        org.joda.time.LocalTime localTime32 = localTime13.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.LocalTime localTime34 = localTime32.plusMillis(71);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        org.joda.time.ReadableDuration readableDuration0 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        int int10 = dateTime9.getMinuteOfDay();
        int int11 = dateTime9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        java.lang.String str15 = periodType14.getName();
        org.joda.time.PeriodType periodType16 = periodType14.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime9, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withYearsRemoved();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Years" + "'", str15, "Years");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusYears(22);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay14.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = property15.withMinimumValue();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay19 = property15.addToCopy(1970);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone21);
        org.joda.time.LocalTime localTime24 = localTime22.withMillisOfDay(15);
        org.joda.time.LocalTime localTime26 = localTime24.withHourOfDay(0);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfDay();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property27.getFieldType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay19.withField(dateTimeFieldType29, 733);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 86399999 + "'", int28 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.DateTime dateTime22 = localDate21.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate24 = localDate21.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        org.joda.time.Chronology chronology34 = mutableInterval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 0, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.Interval interval38 = interval27.withStart((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate21.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean42 = dateTime41.isBeforeNow();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime14.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime14.copy();
        mutableDateTime45.addMillis(40);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str11, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale12);
        int int15 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalTime localTime17 = property7.addCopy((long) 4);
        org.joda.time.DateTimeField dateTimeField18 = property7.getField();
        org.joda.time.LocalTime localTime20 = property7.addCopy(16);
        org.joda.time.Interval interval21 = property7.toInterval();
        org.joda.time.LocalTime localTime22 = property7.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime23 = property7.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMillis(8);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis(11);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        int int13 = localTime12.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localTime12.getFields();
        org.joda.time.LocalTime localTime16 = localTime12.minusHours((int) '#');
        org.joda.time.DateTime dateTime17 = localTime12.toDateTimeToday();
        int int18 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) (byte) 0);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '4', (long) '#');
        org.joda.time.DateTime dateTime25 = dateTime21.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        boolean boolean27 = property8.equals((java.lang.Object) dateTime25);
        java.lang.String str28 = property8.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay30 = property8.addToCopy(114876);
        org.joda.time.TimeOfDay timeOfDay31 = property8.getTimeOfDay();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "59" + "'", str28, "59");
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay31);
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1970);
        int int5 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        long long11 = dateTimeZone6.adjustOffset((long) 100, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate24, periodType30);
        org.joda.time.DateTime dateTime32 = dateTime8.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime.Property property33 = dateTime8.year();
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Chronology chronology41 = mutableInterval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType57 = periodType56.withSecondsRemoved();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate51, periodType57);
        java.util.Locale locale61 = new java.util.Locale("hi!", "");
        boolean boolean62 = localDate42.equals((java.lang.Object) locale61);
        java.util.Locale.setDefault(category35, locale61);
        org.joda.time.DateTime dateTime64 = property33.setCopy("17", locale61);
        org.joda.time.DateTime.Property property65 = dateTime64.era();
        org.joda.time.DateTime dateTime67 = dateTime64.minus((-7L));
        int int68 = dateTime67.getDayOfWeek();
        org.joda.time.DateTime.Property property69 = dateTime67.yearOfCentury();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 7 + "'", int68 == 7);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        org.joda.time.LocalTime localTime13 = localTime8.plusMillis(0);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfSecond(822);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) 10, dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = localTime15.minusMinutes((-518399999));
        org.joda.time.LocalTime localTime24 = localTime15.plusHours(32772);
        org.joda.time.LocalTime localTime26 = localTime15.minusMillis(906);
        java.lang.String str27 = localTime26.toString();
        org.joda.time.LocalTime.Property property28 = localTime26.hourOfDay();
        java.util.Locale locale31 = new java.util.Locale("hi!", "");
        java.lang.String str32 = property28.getAsText(locale31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime34 = property28.setCopy(1380);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1380 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "23:59:59.916" + "'", str27, "23:59:59.916");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "23" + "'", str32, "23");
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        int int12 = localTime8.size();
        org.joda.time.LocalTime localTime14 = localTime8.minusHours(24);
        org.joda.time.LocalTime.Property property15 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addWrapFieldToCopy(35);
        org.joda.time.LocalTime localTime19 = localTime17.minusMinutes(2067);
        org.joda.time.LocalTime localTime21 = localTime17.minusHours(10017);
        org.joda.time.LocalTime.Property property22 = localTime17.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.withDayOfMonth(31);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.era();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight60.minusDays((int) '#');
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.withMillis(1672876800000L);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(70919999999L);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay69.year();
        org.joda.time.Interval interval71 = yearMonthDay69.toInterval();
        org.joda.time.Duration duration72 = interval71.toDuration();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight67.plus((org.joda.time.ReadableDuration) duration72);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 11, dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(dateTimeZone1);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.minusMillis((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.minusMillis((int) '#');
        int int9 = timeOfDay8.getSecondOfMinute();
        int int10 = timeOfDay8.size();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.Interval interval24 = interval13.withStart((org.joda.time.ReadableInstant) dateTime23);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        boolean boolean34 = interval24.isBefore((org.joda.time.ReadableInstant) dateTime33);
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        org.joda.time.Chronology chronology40 = mutableInterval39.getChronology();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 0, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtMidnight(dateTimeZone42);
        java.lang.Object obj45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval(obj45, chronology46);
        org.joda.time.MutableInterval mutableInterval48 = interval47.toMutableInterval();
        org.joda.time.Chronology chronology49 = mutableInterval48.getChronology();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 0, chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate50, periodType56);
        org.joda.time.DateTime dateTime58 = localDate41.toDateTimeAtStartOfDay();
        boolean boolean59 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime33.minusMillis(822);
        org.joda.time.DateTime dateTime63 = dateTime33.withMonthOfYear(1);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType70 = periodType69.withHoursRemoved();
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        org.joda.time.MutableInterval mutableInterval75 = interval74.toMutableInterval();
        org.joda.time.Chronology chronology76 = mutableInterval75.getChronology();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) (short) 0, chronology76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(0L, periodType69, chronology76);
        org.joda.time.DateTimeField dateTimeField79 = chronology76.weekyearOfCentury();
        org.joda.time.Period period80 = new org.joda.time.Period((long) 32770, (long) (byte) 10, chronology76);
        org.joda.time.Period period81 = new org.joda.time.Period(43200000L, 5L, chronology76);
        org.joda.time.DateTimeField dateTimeField82 = chronology76.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = dateTimeField82.getType();
        boolean boolean84 = dateTime63.equals((java.lang.Object) dateTimeFieldType83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay86 = timeOfDay8.withField(dateTimeFieldType83, 1379);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 45 + "'", int4 == 45);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 45 + "'", int9 == 45);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(345599993L, chronology1);
        org.joda.time.Period period4 = org.joda.time.Period.weeks(8);
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.yearOfCentury();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology10);
        org.joda.time.Duration duration16 = period4.toDurationFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration16.isEqual(readableDuration17);
        org.joda.time.Period period27 = new org.joda.time.Period(13, 1969, 0, 32770, 32772, 1969, 100, 3);
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        org.joda.time.Chronology chronology34 = mutableInterval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 0, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.halfdayOfDay();
        org.joda.time.DurationField durationField37 = chronology34.halfdays();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 13, chronology34);
        java.lang.String str39 = mutableDateTime38.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.property(dateTimeFieldType40);
        org.joda.time.Duration duration42 = period27.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime38);
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = mutableInterval47.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        org.joda.time.DateTime dateTime50 = localDate49.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property51 = dateTime50.secondOfMinute();
        int int52 = property51.getMinimumValueOverall();
        org.joda.time.DateTime dateTime53 = property51.roundHalfEvenCopy();
        boolean boolean54 = duration42.equals((java.lang.Object) dateTime53);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(readableInstant57, readableInstant58, periodType59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 7, (-1L), periodType59);
        int int62 = mutablePeriod61.size();
        java.lang.Object obj66 = null;
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval(obj66, chronology67);
        org.joda.time.MutableInterval mutableInterval69 = interval68.toMutableInterval();
        org.joda.time.Chronology chronology70 = mutableInterval69.getChronology();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) (short) 0, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.halfdayOfDay();
        org.joda.time.DurationField durationField73 = chronology70.halfdays();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 13, chronology70);
        mutablePeriod61.add((long) 53, chronology70);
        org.joda.time.Period period77 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period79 = period77.multipliedBy(0);
        int int80 = period77.getMonths();
        org.joda.time.Period period82 = period77.plusYears(0);
        org.joda.time.Duration duration83 = period82.toStandardDuration();
        mutablePeriod61.add((org.joda.time.ReadableDuration) duration83);
        boolean boolean85 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration83);
        boolean boolean86 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis(2);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight2.withZoneRetainFields(dateTimeZone89);
        org.joda.time.Instant instant91 = dateMidnight90.toInstant();
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight90.minusWeeks(59460);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str39, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(dateMidnight93);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addWrapFieldToCopy(15);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone8);
        int int10 = localTime9.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localTime9.getFields();
        org.joda.time.LocalTime localTime13 = localTime9.minusHours((int) '#');
        org.joda.time.DateTime dateTime14 = localTime9.toDateTimeToday();
        int int15 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime18 = property16.addToCopy(86399999);
        org.joda.time.DateTime dateTime19 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = property16.roundHalfFloorCopy();
        int int21 = dateTime20.getDayOfMonth();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        long long23 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.minus(0L);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-625L) + "'", long23 == (-625L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, periodType3, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 32770, (long) (byte) 10, chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 11, dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime18.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long26 = dateTimeZone24.previousTransition((long) 'x');
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) (short) 10);
        org.joda.time.Chronology chronology29 = chronology10.withZone(dateTimeZone22);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(26182);
        long long34 = chronology29.add((org.joda.time.ReadablePeriod) period31, 0L, 5);
        org.joda.time.DateTimeField dateTimeField35 = chronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.monthOfYear();
        int int38 = dateTimeField36.getMinimumValue(669427230063L);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 120L + "'", long26 == 120L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 22L + "'", long28 == 22L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 7854600000L + "'", long34 == 7854600000L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMillis(8);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis(11);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        int int13 = localTime12.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localTime12.getFields();
        org.joda.time.LocalTime localTime16 = localTime12.minusHours((int) '#');
        org.joda.time.DateTime dateTime17 = localTime12.toDateTimeToday();
        int int18 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) (byte) 0);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '4', (long) '#');
        org.joda.time.DateTime dateTime25 = dateTime21.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        boolean boolean27 = property8.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(447);
        int int30 = dateTime25.getDayOfYear();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53 + "'", int30 == 53);
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.size();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology9);
        org.joda.time.DurationField durationField13 = chronology9.months();
        org.joda.time.DurationField durationField14 = chronology9.halfdays();
        org.joda.time.DurationField durationField15 = chronology9.days();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.year();
        org.joda.time.DurationField durationField19 = chronology9.minutes();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DurationField durationField21 = chronology9.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(38, 51681780, 199, 26517505, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 13, chronology7);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 2, chronology7);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology7);
        java.util.Date date14 = dateTime13.toDate();
        date14.setSeconds(52);
        int int17 = date14.getDay();
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Feb 22 07:22:52 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addCopy(822);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalTime localTime12 = property7.setCopy(45);
        org.joda.time.LocalTime localTime14 = localTime12.plusHours(24);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime12.plus(readablePeriod15);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        int int3 = timeZone1.getOffset((long) 51);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        int int5 = calendar4.getWeekYear();
        calendar4.roll((int) (short) 0, false);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        mutablePeriod12.set(durationFieldType13, 2);
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) mutableInterval19);
        mutablePeriod12.setYears((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        mutablePeriod27.set(durationFieldType28, 2);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        int int40 = dateTime39.getMinuteOfDay();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.years();
        mutablePeriod45.set(durationFieldType46, 2);
        int int49 = mutablePeriod27.indexOf(durationFieldType46);
        int int50 = mutablePeriod27.getDays();
        mutablePeriod12.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        boolean boolean52 = calendar4.after((java.lang.Object) mutablePeriod27);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((java.lang.Object) calendar4);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 31, dateTimeZone55);
        java.util.TimeZone timeZone58 = dateTimeZone55.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13 + "'", int3 == 13);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-125940760633606,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.013,offset=13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=46,MILLISECOND=407,ZONE_OFFSET=13,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1000, 1645514219634L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfDay(15);
        org.joda.time.LocalTime localTime10 = localTime8.withHourOfDay(0);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.getLocalTime();
        org.joda.time.LocalTime localTime14 = property11.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime16 = property11.addCopy((long) (byte) -1);
        org.joda.time.LocalTime localTime17 = property11.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((long) 97, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.yearOfEra();
        boolean boolean23 = period2.equals((java.lang.Object) chronology18);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(15, 22, 62263706, 3, 980, 12, 19, 58);
        int int9 = mutablePeriod8.getWeeks();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 62263706 + "'", int9 == 62263706);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.Period period14 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period16 = period14.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period19 = period14.withFieldAdded(durationFieldType17, (int) (byte) 10);
        org.joda.time.LocalTime localTime20 = localTime12.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalTime localTime22 = localTime20.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property23 = localTime20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.LocalTime localTime25 = property23.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withDurationAdded((long) 13, 0);
        org.joda.time.DateMidnight.Property property64 = dateMidnight60.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight65 = property64.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight67 = property64.setCopy(9);
        org.joda.time.DateMidnight dateMidnight68 = property64.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.withWeekOfWeekyear(543);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 543 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight68);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = interval2.isBefore(readableInstant4);
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.Period period9 = interval2.toPeriod(periodType7);
        org.joda.time.DateTime dateTime10 = interval2.getStart();
        org.joda.time.Chronology chronology11 = interval2.getChronology();
        org.joda.time.Interval interval13 = interval2.withStartMillis((-38L));
        java.lang.String str14 = interval13.toString();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-31T23:59:59.975+00:00:00.013/2022-02-22T07:22:46.558+00:00:00.013" + "'", str14, "1969-12-31T23:59:59.975+00:00:00.013/2022-02-22T07:22:46.558+00:00:00.013");
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.minuteOfHour();
        java.lang.String str8 = mutableDateTime5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.048+00:00:00.013" + "'", str8, "1970-01-01T00:00:00.048+00:00:00.013");
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(51681780, 6425345, (-1645514232), 172800, 12223149);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 172800 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (byte) 1);
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType16 = period14.getFieldType((int) (short) 1);
        org.joda.time.Period period17 = period12.minus((org.joda.time.ReadablePeriod) period14);
        int[] intArray20 = chronology11.get((org.joda.time.ReadablePeriod) period17, (long) 5, 1645488000005L);
        org.joda.time.DurationField durationField21 = chronology11.seconds();
        org.joda.time.DurationField durationField22 = chronology11.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((java.lang.Object) localTime8, chronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[52, 1, 3, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay12 = property9.withMaximumValue();
        int int13 = property9.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property9.getField();
        int int15 = property9.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        int int17 = property9.getMaximumShortTextLength(locale16);
        java.util.Locale locale20 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet22 = locale20.getExtensionKeys();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale20);
        java.lang.String str24 = locale20.getScript();
        java.lang.String str25 = locale16.getDisplayScript(locale20);
        java.util.Locale locale29 = new java.util.Locale("2075-02-12T07:17:52.464+00:00:00.007", "java.io.IOException: Chinese (China)", "2022-02-22T07:16:16.277+00:00:00.007/2022-02-22T07:16:16.277+00:00:00.007");
        java.lang.String str30 = locale16.getDisplayLanguage(locale29);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514566898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.013,offset=13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=46,MILLISECOND=911,ZONE_OFFSET=13,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "2075-02-12t07:17:52.464+00:00:00.007_JAVA.IO.IOEXCEPTION: CHINESE (CHINA)_2022-02-22T07:16:16.277+00:00:00.007/2022-02-22T07:16:16.277+00:00:00.007");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Japanese" + "'", str30, "Japanese");
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.weeks();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField12 = chronology10.weekyears();
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) ' ', periodType4, chronology10);
        org.joda.time.Period period15 = new org.joda.time.Period(2L, (long) 32, chronology10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 78, chronology10);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.clockhourOfDay();
        long long20 = dateTimeField17.addWrapField(3933L, (-59));
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        org.joda.time.Chronology chronology27 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.millisOfSecond();
        org.joda.time.DurationField durationField29 = chronology27.weekyears();
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology27);
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay33 = property31.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay34 = property31.withMaximumValue();
        int int35 = property31.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField36 = property31.getField();
        int int37 = property31.getMaximumValue();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        int int39 = property31.getMaximumShortTextLength(locale38);
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale38);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone43);
        org.joda.time.LocalTime localTime46 = localTime44.withMillisOfDay(15);
        org.joda.time.LocalTime localTime48 = localTime46.withHourOfDay(0);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfDay();
        org.joda.time.LocalTime localTime50 = property49.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        org.joda.time.DateTimeField dateTimeField52 = property49.getField();
        java.lang.String str53 = dateTimeField52.toString();
        java.util.Locale locale57 = new java.util.Locale("hi!", "");
        java.lang.String str58 = locale57.getISO3Country();
        java.lang.String str59 = dateTimeField52.getAsText(120, locale57);
        java.lang.String str60 = locale38.getDisplayLanguage(locale57);
        java.lang.String str61 = dateTimeField17.getAsText((-2240569400031L), locale38);
        java.util.Set<java.lang.String> strSet62 = locale38.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 46803933L + "'", long20 == 46803933L);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DateTimeField[millisOfDay]" + "'", str53, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "120" + "'", str59, "120");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Japanese" + "'", str60, "Japanese");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "11" + "'", str61, "11");
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.Chronology chronology8 = dateTimeFormatter6.getChronology();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(chronology8);
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        long long21 = dateTimeZone18.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone18);
        mutableDateTime17.setZone(dateTimeZone18);
        mutableDateTime17.setWeekOfWeekyear((int) ' ');
        mutableDateTime17.setSecondOfDay(7);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setSecondOfDay((-16812838));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16812838 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str11, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(2714);
        int int13 = dateTime12.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 79200000 + "'", int13 == 79200000);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minus(2177280000000000L);
        boolean boolean59 = dateMidnight56.isEqualNow();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(50400000);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMinutes(20);
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded((-52L), (-1645514236));
        org.joda.time.DateTime dateTime20 = dateTime16.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfMonth();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.monthOfYear();
        int int17 = property16.get();
        org.joda.time.MutableDateTime mutableDateTime19 = property16.add(20);
        mutableDateTime19.addSeconds((-15));
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str11, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addWrapFieldToCopy(6);
        org.joda.time.LocalTime localTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.roundHalfCeilingCopy();
        int int13 = localTime12.size();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = timeZone12.getOffset((-47), (int) (byte) 0, 6, 600, (-39), 733);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era -47");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("years", strMap1);
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        boolean boolean9 = strSet6.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-25T16:31:01.295+81:11:18.994/2022-02-25T16:31:01.295+81:11:18.994");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-25T16:31:01.295+81:11:18.9...\" is malformed at \"22-02-25T16:31:01.295+81:11:18.9...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        int int27 = localDateTime14.get(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(3057069047L);
        org.joda.time.LocalTime localTime3 = localTime1.plusMinutes(26273);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localTime3.toString(dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 100, dateTimeZone3);
        long long7 = dateTimeZone3.convertLocalToUTC(60L, false);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 59, (long) 1980);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        mutablePeriod12.setPeriod(70919999999L, chronology18);
        mutablePeriod12.addYears(31);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight9.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.year();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 61L + "'", long7 == 61L);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Iterator<java.lang.String> strItor3 = strSet0.iterator();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setVariant("months");
        java.util.Locale locale7 = builder6.build();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj9, chronology10);
        org.joda.time.MutableInterval mutableInterval12 = interval11.toMutableInterval();
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        int int17 = dateTimeField15.getMaximumValue((long) 11);
        boolean boolean18 = dateTimeField15.isLenient();
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = interval22.isBefore(readableInstant24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.years();
        mutablePeriod29.set(durationFieldType30, 2);
        java.lang.Object obj34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval(obj34, chronology35);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Chronology chronology38 = mutableInterval37.getChronology();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        int int42 = dateTime41.getMinuteOfDay();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod29, (org.joda.time.ReadableInstant) dateTime41);
        int int44 = dateTime41.getMinuteOfHour();
        int int45 = dateTime41.getMillisOfSecond();
        boolean boolean46 = interval22.isBefore((org.joda.time.ReadableInstant) dateTime41);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = dateTime41.toString("0", locale48);
        java.lang.String str50 = dateTimeField15.getAsText(0L, locale48);
        java.lang.String str51 = locale7.getDisplayName(locale48);
        java.util.Set<java.lang.String> strSet52 = locale7.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Spliterator<java.lang.String> strSpliterator54 = strSet52.spliterator();
        java.util.Iterator<java.lang.String> strItor55 = strSet52.iterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AM" + "'", str50, "AM");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "months" + "'", str51, "months");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertNotNull(strItor55);
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfMinute();
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.halfdayOfDay();
        int int18 = dateTimeField16.getMaximumValue((long) 11);
        boolean boolean20 = dateTimeField16.isLeap((-1L));
        int int22 = dateTimeField16.getMaximumValue(0L);
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Chronology chronology28 = mutableInterval27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Chronology chronology37 = mutableInterval36.getChronology();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate38, periodType44);
        org.joda.time.LocalDate.Property property46 = localDate29.era();
        int[] intArray47 = new int[] {};
        int int48 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDate29, intArray47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = localDate29.getFieldType(0);
        boolean boolean51 = dateTime7.isSupported(dateTimeFieldType50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = dateTime7.toDateTime(chronology52);
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, 0);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = dateTimeZone13.getName(50400000L, locale15);
        java.lang.String str18 = locale15.getVariant();
        java.lang.String str19 = property9.getAsShortText(locale15);
        org.joda.time.DateTime dateTime20 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField21 = property9.getField();
        long long24 = dateTimeField21.add(1645514248340L, 189302400027L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "USA" + "'", str16, "USA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+70:00" + "'", str17, "+70:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "23" + "'", str19, "23");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1834816648367L + "'", long24 == 1834816648367L);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(20, (int) (short) 1, 1969, (int) (byte) 1, (int) (short) 100, 0, 15, 13);
        org.joda.time.Period period10 = org.joda.time.Period.weeks(8);
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology16 = mutableInterval15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.yearOfCentury();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology16);
        org.joda.time.Duration duration22 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isEqual(readableDuration23);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        int int35 = dateTime34.getMinuteOfDay();
        int int36 = dateTime34.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime34.getZone();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay38.withChronologyRetainFields(chronology44);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(5L, chronology44);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration22, chronology44);
        org.joda.time.Period period50 = mutablePeriod8.toPeriod();
        mutablePeriod8.setMonths(36);
        mutablePeriod8.setYears(29);
        mutablePeriod8.setMinutes(33139005);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getSecondOfMinute();
        java.lang.String str2 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 47 + "'", int1 == 47);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T07:22:47.741+00:00:00.013" + "'", str2, "2022-02-22T07:22:47.741+00:00:00.013");
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        java.util.Date date1 = new java.util.Date((-6L));
        int int2 = date1.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay12.plusYears(0);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        mutableDateTime24.addMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        mutableDateTime24.setZone(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = yearMonthDay12.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay12.plusDays((int) (byte) -1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.era();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) 10, dateTimeZone45);
        org.joda.time.Chronology chronology47 = chronology39.withZone(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay33.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfWeek();
        org.joda.time.DurationField durationField50 = chronology47.millis();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.weekyearOfCentury();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        org.joda.time.LocalTime localTime13 = localTime8.plusMillis(0);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfSecond(822);
        int int16 = localTime15.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(26242L);
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        java.lang.Object obj7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(obj7, chronology8);
        org.joda.time.MutableInterval mutableInterval10 = interval9.toMutableInterval();
        org.joda.time.Chronology chronology11 = mutableInterval10.getChronology();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.Interval interval15 = interval4.withStart((org.joda.time.ReadableInstant) dateTime14);
        java.lang.Object obj17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval(obj17, chronology18);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Chronology chronology21 = mutableInterval20.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        boolean boolean25 = interval15.isBefore((org.joda.time.ReadableInstant) dateTime24);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        org.joda.time.Chronology chronology40 = mutableInterval39.getChronology();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 0, chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType47 = periodType46.withSecondsRemoved();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate41, periodType47);
        org.joda.time.DateTime dateTime49 = localDate32.toDateTimeAtStartOfDay();
        boolean boolean50 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime24.minusMillis(822);
        org.joda.time.DateTime dateTime54 = dateTime24.withMonthOfYear(1);
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfMonth();
        org.joda.time.DateTime dateTime56 = property55.withMaximumValue();
        org.joda.time.DateTime dateTime57 = property55.roundHalfEvenCopy();
        boolean boolean58 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime57);
        java.lang.Object obj61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval(obj61, chronology62);
        org.joda.time.MutableInterval mutableInterval64 = interval63.toMutableInterval();
        org.joda.time.Chronology chronology65 = mutableInterval64.getChronology();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) (short) 0, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.halfdayOfDay();
        org.joda.time.DurationField durationField68 = chronology65.halfdays();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 13, chronology65);
        java.lang.String str70 = mutableDateTime69.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime69.property(dateTimeFieldType71);
        org.joda.time.MutableDateTime mutableDateTime74 = property72.add((long) 19);
        mutableDateTime74.addWeekyears(52);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 6);
        mutableDateTime74.setZone(dateTimeZone79);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime74.dayOfMonth();
        boolean boolean82 = dateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str70, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.property(dateTimeFieldType55);
        int int57 = property56.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight59 = property56.setCopy("PT2.022S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT2.022S\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.LocalTime.Property property10 = localTime9.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addWrapFieldToCopy((-995));
        org.joda.time.LocalTime localTime14 = localTime12.minusMillis(0);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("2022-02-22T07:15:47.976Z/2022-02-22T07:15:47.976Z");
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale17.getDisplayCountry(locale18);
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Chronology chronology28 = mutableInterval27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.halfdayOfDay();
        org.joda.time.DurationField durationField31 = chronology28.halfdays();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 13, chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = dateTimeField33.getDurationField();
        java.lang.String str35 = dateTimeField33.getName();
        long long37 = dateTimeField33.roundCeiling(86400000L);
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Chronology chronology43 = mutableInterval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.DateTime dateTime45 = localDate44.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate47 = localDate44.plusDays(70);
        org.joda.time.LocalDate localDate49 = localDate44.withMonthOfYear(2);
        org.joda.time.LocalDate.Property property50 = localDate49.year();
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology55 = mutableInterval54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.millisOfSecond();
        org.joda.time.DurationField durationField57 = chronology55.seconds();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.yearOfCentury();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        int int60 = dateTimeField58.getMaximumShortTextLength(locale59);
        java.util.Locale.Category category61 = java.util.Locale.Category.DISPLAY;
        java.lang.Object obj63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval(obj63, chronology64);
        org.joda.time.MutableInterval mutableInterval66 = interval65.toMutableInterval();
        org.joda.time.Chronology chronology67 = mutableInterval66.getChronology();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (short) 0, chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTimeAtMidnight(dateTimeZone69);
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        org.joda.time.MutableInterval mutableInterval75 = interval74.toMutableInterval();
        org.joda.time.Chronology chronology76 = mutableInterval75.getChronology();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) (short) 0, chronology76);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = localDate77.toDateTimeAtMidnight(dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = localDate77.toDateTimeAtStartOfDay(dateTimeZone80);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType83 = periodType82.withSecondsRemoved();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate68, (org.joda.time.ReadablePartial) localDate77, periodType83);
        java.util.Locale locale87 = new java.util.Locale("hi!", "");
        boolean boolean88 = localDate68.equals((java.lang.Object) locale87);
        java.util.Locale.setDefault(category61, locale87);
        java.util.Locale locale90 = java.util.Locale.getDefault(category61);
        java.lang.String str91 = locale59.getDisplayScript(locale90);
        java.lang.String str92 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDate49, locale59);
        java.lang.String str93 = locale18.getDisplayVariant(locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = localTime14.toString("1970-01-01T00:00:00.000+00:00:00.013/2022-02-22T07:20:42.404+00:00:00.013", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str20, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weekOfWeekyear" + "'", str35, "weekOfWeekyear");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 345599987L + "'", long37 == 345599987L);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category61.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertEquals(locale87.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "5" + "'", str92, "5");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime14 = property7.addNoWrapToCopy(28);
        org.joda.time.LocalTime localTime15 = property7.roundCeilingCopy();
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Chronology chronology22 = mutableInterval21.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfMinute();
        int int26 = property25.getMinimumValueOverall();
        org.joda.time.DateTime dateTime27 = property25.roundCeilingCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.plus((long) 19);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.minus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime27.monthOfYear();
        org.joda.time.DateTime dateTime33 = property32.withMinimumValue();
        int int34 = property32.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property32.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property36 = localTime15.property(dateTimeFieldType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 3600);
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) str1, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"English\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean2 = strSet0.add("2022-01-04T00:00:10.128+00:00:00.007");
        int int3 = strSet0.size();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, 2);
        int int7 = localTime6.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = strSet0.contains((java.lang.Object) localTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to org.joda.time.ReadablePartial");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 576 + "'", int3 == 576);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 15);
        boolean boolean9 = dateTimeFormatter5.isOffsetParsed();
        java.io.Writer writer10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(2022);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra(97);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withFields(readablePartial26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean35 = localDateTime32.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withMillisOfSecond(70);
        int int38 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer10, (org.joda.time.ReadablePartial) localDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean10 = localDate6.isSupported(dateTimeFieldType9);
        org.joda.time.LocalDate localDate12 = localDate6.withYearOfEra(32770);
        org.joda.time.LocalDate.Property property13 = localDate12.era();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addWrapFieldToCopy(13);
        org.joda.time.LocalTime localTime14 = localTime12.plusHours(2067);
        org.joda.time.LocalTime localTime16 = localTime14.minusMinutes(439);
        org.joda.time.LocalTime localTime18 = localTime16.withMillisOfSecond(0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Date date7 = new java.util.Date((int) 'a', 0, (int) (short) 1);
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj9, chronology10);
        org.joda.time.MutableInterval mutableInterval12 = interval11.toMutableInterval();
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Chronology chronology22 = mutableInterval21.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate23, periodType29);
        java.util.Date date31 = localDate14.toDate();
        date31.setSeconds(2);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = mutableInterval47.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType55 = periodType54.withSecondsRemoved();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate49, periodType55);
        java.util.Date date57 = localDate40.toDate();
        boolean boolean58 = date31.before(date57);
        int int59 = date57.getSeconds();
        boolean boolean60 = date7.before(date57);
        int int61 = date57.getHours();
        calendar3.setTime(date57);
        calendar3.clear();
        java.lang.Object obj67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval(obj67, chronology68);
        org.joda.time.MutableInterval mutableInterval70 = interval69.toMutableInterval();
        org.joda.time.Chronology chronology71 = mutableInterval70.getChronology();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (short) 0, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.halfdayOfDay();
        org.joda.time.DurationField durationField74 = chronology71.halfdays();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) 13, chronology71);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 2, chronology71);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology71);
        java.util.Date date78 = dateTime77.toDate();
        calendar3.setTime(date78);
        long long80 = date78.getTime();
        int int81 = date78.getTimezoneOffset();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514568620,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=48,MILLISECOND=620,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Jan 01 00:00:00 GMT+00:00 1997");
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:02 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Tue Feb 22 07:22:48 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1645514568620L + "'", long80 == 1645514568620L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMillis(14);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusHours((-10));
        org.joda.time.TimeOfDay.Property property8 = timeOfDay5.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addWrapFieldToCopy(26182);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.hourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.Chronology chronology4 = mutableInterval3.getChronology();
        java.lang.String str5 = mutableInterval3.toString();
        java.lang.String str6 = mutableInterval3.toString();
        org.joda.time.Period period7 = mutableInterval3.toPeriod();
        org.joda.time.Period period8 = mutableInterval3.toPeriod();
        org.joda.time.Period period10 = period8.minusYears(86399993);
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology16 = mutableInterval15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate20 = localDate17.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.Interval interval34 = interval23.withStart((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = localDate17.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Chronology chronology41 = mutableInterval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.DateTime dateTime43 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate42.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology55 = mutableInterval54.getChronology();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTimeAtMidnight(dateTimeZone57);
        org.joda.time.Interval interval59 = interval48.withStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = localDate42.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate.Property property62 = localDate42.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight65 = localDate42.toDateMidnight(dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusYears(6);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight65.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.withMillis((long) 15);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plusYears(100);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.weekyear();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight75.minusMonths(2000);
        int int79 = dateMidnight75.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period10, (org.joda.time.ReadableInstant) dateMidnight75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:22:48.696+00:00:00.013/2022-02-22T07:22:48.696+00:00:00.013" + "'", str5, "2022-02-22T07:22:48.696+00:00:00.013/2022-02-22T07:22:48.696+00:00:00.013");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:22:48.696+00:00:00.013/2022-02-22T07:22:48.696+00:00:00.013" + "'", str6, "2022-02-22T07:22:48.696+00:00:00.013/2022-02-22T07:22:48.696+00:00:00.013");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.minuteOfDay();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        int int5 = localTime3.getMinuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 48 + "'", int1 == 48);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 13, chronology8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) ' ', chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.yearOfCentury();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 53, (-431L));
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePeriod) period17, (long) 33);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1439L, chronology8);
        int int21 = mutablePeriod20.getSeconds();
        mutablePeriod20.setMinutes((-292275054));
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 33]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.LocalTime.Property property4 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = property4.setCopy("1969-03-27");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-03-27\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.Period period14 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period16 = period14.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period19 = period14.withFieldAdded(durationFieldType17, (int) (byte) 10);
        org.joda.time.LocalTime localTime20 = localTime12.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalTime.Property property21 = localTime20.minuteOfHour();
        org.joda.time.LocalTime localTime22 = property21.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property21.setCopy(68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addWrapFieldToCopy(9);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours(521);
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withMillis((long) 15);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plusYears(100);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.weekyear();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight68 = property66.addToCopy(19);
        org.joda.time.DateMidnight dateMidnight70 = property66.addToCopy((long) (short) 10);
        org.joda.time.DateMidnight dateMidnight71 = property66.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight72 = property66.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight73 = property66.withMaximumValue();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1095903170000L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addWrapFieldToCopy(13);
        org.joda.time.DateTimeField dateTimeField13 = property7.getField();
        org.joda.time.LocalTime localTime14 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(10);
        org.joda.time.LocalTime.Property property13 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.withMinimumValue();
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        java.lang.String str17 = localTime15.toString();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "00:00:00.000" + "'", str17, "00:00:00.000");
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology5);
        org.joda.time.LocalDate localDate11 = dateTime10.toLocalDate();
        int int12 = localDate11.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate11.toDateMidnight();
        org.joda.time.LocalDate localDate15 = localDate11.withEra(0);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        int int17 = dateTime16.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration18 = null;
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        int int28 = dateTime27.getMinuteOfDay();
        int int29 = dateTime27.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime27.getZone();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        java.lang.String str33 = periodType32.getName();
        org.joda.time.PeriodType periodType34 = periodType32.withSecondsRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateTime27, periodType34);
        org.joda.time.PeriodType periodType36 = period35.getPeriodType();
        org.joda.time.DateTime dateTime37 = dateTime16.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime39 = dateTime37.plus(1645484400010L);
        org.joda.time.DateTime.Property property40 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime41 = property40.roundCeilingCopy();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Years" + "'", str33, "Years");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1439, (long) 8);
        org.joda.time.Period period4 = period2.plusMinutes(70);
        org.joda.time.Period period6 = period4.plusMonths((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((int) 'a', (int) (byte) -1, 2, 8, (int) (short) -1, 10, 3, 3);
        org.joda.time.Period period16 = period6.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Chronology chronology22 = mutableInterval21.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate26 = localDate23.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.Interval interval40 = interval29.withStart((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        int int42 = dateTime41.getYearOfEra();
        org.joda.time.DateTime dateTime44 = dateTime41.plusHours(2000);
        boolean boolean45 = period16.equals((java.lang.Object) dateTime44);
        org.joda.time.Period period47 = period16.withMinutes(161);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        mutableDateTime10.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.year();
        mutableDateTime10.setHourOfDay(1);
        mutableDateTime10.setYear((int) '4');
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        int int27 = dateTime26.getMinuteOfDay();
        int int28 = dateTime26.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        mutableDateTime10.setZone(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime34.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime34.millisOfDay();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("4 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"4 Jan 1970 00:00:00 GMT\" is malformed at \" Jan 1970 00:00:00 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone2);
        int int4 = localTime3.size();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now();
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology7 = localTime3.getChronology();
        org.joda.time.Period period9 = org.joda.time.Period.weeks(8);
        org.joda.time.Period period11 = period9.plusYears((int) 'x');
        org.joda.time.Seconds seconds12 = period9.toStandardSeconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = period9.getFieldTypes();
        org.joda.time.Period period15 = period9.plusDays((int) (byte) 1);
        boolean boolean16 = localTime3.equals((java.lang.Object) period9);
        org.joda.time.Period period18 = period9.plusYears(100);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', (long) (-1), periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withMinutesRemoved();
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology31.weekyears();
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology31);
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.secondOfMinute();
        org.joda.time.Chronology chronology36 = timeOfDay34.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((-61157375999947L), periodType25, chronology36);
        org.joda.time.PeriodType periodType38 = periodType25.withMinutesRemoved();
        org.joda.time.Period period39 = period9.normalizedStandard(periodType25);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 280, periodType25);
        mutablePeriod40.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay12.dayOfMonth();
        java.util.Locale locale25 = new java.util.Locale("hi!", "");
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.Interval interval40 = interval29.withStart((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTime39);
        int int42 = property22.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int43 = property22.getMaximumValueOverall();
        java.lang.String str44 = property22.getAsString();
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        int int54 = dateTime53.getMinuteOfDay();
        int int55 = dateTime53.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime53.getZone();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone56);
        java.lang.Object obj59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval(obj59, chronology60);
        org.joda.time.MutableInterval mutableInterval62 = interval61.toMutableInterval();
        org.joda.time.Chronology chronology63 = mutableInterval62.getChronology();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) (short) 0, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay57.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay57.dayOfMonth();
        java.util.Locale locale70 = new java.util.Locale("hi!", "");
        int int71 = property67.getMaximumShortTextLength(locale70);
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        org.joda.time.MutableInterval mutableInterval75 = interval74.toMutableInterval();
        java.lang.Object obj77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Interval interval79 = new org.joda.time.Interval(obj77, chronology78);
        org.joda.time.MutableInterval mutableInterval80 = interval79.toMutableInterval();
        org.joda.time.Chronology chronology81 = mutableInterval80.getChronology();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) (short) 0, chronology81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = localDate82.toDateTimeAtMidnight(dateTimeZone83);
        org.joda.time.Interval interval85 = interval74.withStart((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate((java.lang.Object) dateTime84);
        int int87 = property67.compareTo((org.joda.time.ReadableInstant) dateTime84);
        int int88 = property67.getMaximumValueOverall();
        java.lang.String str89 = property67.getAsString();
        boolean boolean90 = property22.equals((java.lang.Object) str89);
        org.joda.time.DurationField durationField91 = property22.getRangeDurationField();
        long long94 = durationField91.add(0L, (-2635167228L));
        long long96 = durationField91.getMillis(170370);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22" + "'", str44, "22");
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 31 + "'", int88 == 31);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "22" + "'", str89, "22");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-6929820477187200000L) + "'", long94 == (-6929820477187200000L));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 448029826020000L + "'", long96 == 448029826020000L);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1980);
        int int11 = dateTimeFormatter10.getDefaultYear();
        boolean boolean12 = dateTimeFormatter10.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withDefaultYear(53);
        java.io.Writer writer15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(writer15, (org.joda.time.ReadableInstant) mutableDateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        java.lang.Object obj0 = null;
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField12 = chronology9.halfdays();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 13, chronology9);
        mutableDateTime13.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.year();
        mutableDateTime13.setDayOfMonth(4);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime13.setZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 100, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(43200000L, dateTimeZone19);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone19);
        java.lang.String str25 = dateTimeZone19.getNameKey((long) (short) 1);
        java.lang.String str27 = dateTimeZone19.getShortName((long) (byte) -1);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(obj0, dateTimeZone19);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone19);
        int int31 = dateTimeZone19.getStandardOffset(66143413L);
        boolean boolean33 = dateTimeZone19.isStandardOffset(38090L);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertNull(str25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.013" + "'", str27, "+00:00:00.013");
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 13 + "'", int31 == 13);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        java.util.Date date6 = new java.util.Date((int) (short) 100, (int) '4', 2, 20, 24, 32772);
        date6.setSeconds(331);
        int int9 = date6.getHours();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon May 03 05:35:31 GMT+00:00 2004");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property9.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.DurationField durationField12 = property9.getDurationField();
        org.joda.time.TimeOfDay timeOfDay14 = property9.addToCopy((-12));
        org.joda.time.TimeOfDay timeOfDay16 = property9.addNoWrapToCopy(33);
        org.joda.time.TimeOfDay timeOfDay18 = property9.addNoWrapToCopy((int) '4');
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.plusSeconds(26334);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay18.millisOfSecond();
        org.joda.time.LocalTime localTime22 = timeOfDay18.toLocalTime();
        int int23 = timeOfDay18.size();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Hours hours2 = period1.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType4 = period1.getFieldType((int) (short) 0);
        org.joda.time.Period period6 = period1.multipliedBy((int) (short) 10);
        org.joda.time.Period period8 = period1.minusYears(26441);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        org.joda.time.LocalTime localTime13 = localTime8.plusMillis(0);
        int int14 = localTime13.size();
        int int15 = localTime13.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone17);
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(15);
        org.joda.time.LocalTime localTime22 = localTime20.withHourOfDay(0);
        org.joda.time.LocalTime localTime24 = localTime20.withHourOfDay(0);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.LocalTime localTime27 = localTime24.plusMinutes(1);
        org.joda.time.LocalTime localTime29 = localTime24.plusMillis(0);
        org.joda.time.LocalTime localTime31 = localTime29.withMillisOfSecond(822);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) 10, dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localTime31.toDateTimeToday(dateTimeZone34);
        org.joda.time.LocalTime localTime38 = localTime31.minusMinutes((-518399999));
        org.joda.time.LocalTime localTime40 = localTime31.plusHours(32772);
        org.joda.time.LocalTime localTime42 = localTime40.withMillisOfDay(4);
        org.joda.time.Period period47 = new org.joda.time.Period((int) '#', 2022, (int) (short) 10, (int) (byte) 1);
        org.joda.time.Period period49 = period47.plusWeeks(15);
        int int50 = period47.size();
        org.joda.time.LocalTime localTime52 = localTime40.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 70);
        org.joda.time.LocalTime localTime53 = localTime13.minus((org.joda.time.ReadablePeriod) period47);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        java.util.Date date6 = new java.util.Date((-1), 0, 0, 11, (int) '#', 100);
        int int7 = date6.getDay();
        date6.setSeconds(54);
        date6.setSeconds(310);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 31 11:41:10 GMT+00:00 1898");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfDay();
        org.joda.time.Chronology chronology12 = chronology5.withUTC();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTime dateTime21 = localDate20.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate23 = localDate20.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Chronology chronology33 = mutableInterval32.getChronology();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.Interval interval37 = interval26.withStart((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = localDate20.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTime dateTime46 = localDate45.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        java.lang.Object obj54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval(obj54, chronology55);
        org.joda.time.MutableInterval mutableInterval57 = interval56.toMutableInterval();
        org.joda.time.Chronology chronology58 = mutableInterval57.getChronology();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 0, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTimeAtMidnight(dateTimeZone60);
        org.joda.time.Interval interval62 = interval51.withStart((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = localDate45.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate.Property property65 = localDate45.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight68 = localDate45.toDateMidnight(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusYears(6);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight68.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight74.withDurationAdded((long) 13, 0);
        org.joda.time.DateMidnight.Property property78 = dateMidnight74.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight79 = property78.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight80 = property78.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight81 = property78.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight81.plusWeeks(0);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.plusDays(215);
        boolean boolean86 = dateMidnight13.isAfter((org.joda.time.ReadableInstant) dateMidnight83);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(1980);
        org.joda.time.TimeOfDay timeOfDay12 = property9.withMaximumValue();
        org.joda.time.DurationField durationField13 = property9.getRangeDurationField();
        org.joda.time.DurationField durationField14 = property9.getRangeDurationField();
        org.joda.time.DurationField durationField15 = property9.getDurationField();
        org.joda.time.DurationFieldType durationFieldType16 = durationField15.getType();
        long long19 = durationField15.getDifferenceAsLong((long) 821, 3599991L);
        long long21 = durationField15.getValueAsLong((-292278942L));
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599L) + "'", long19 == (-3599L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-292278L) + "'", long21 == (-292278L));
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        int int9 = dateTime7.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime7.plus(1645514219634L);
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        boolean boolean16 = interval14.contains((-1L));
        org.joda.time.DateTime dateTime17 = interval14.getEnd();
        int int18 = dateTime17.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = dateTime17.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateTime17.toDateMidnight();
        org.joda.time.DateTime dateTime21 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime.Property property23 = dateTime21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        org.joda.time.Period period1 = org.joda.time.Period.months(117);
        org.joda.time.Period period3 = period1.minusMinutes(33060004);
        org.joda.time.Period period5 = org.joda.time.Period.millis(4279);
        org.joda.time.Period period6 = period3.plus((org.joda.time.ReadablePeriod) period5);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.LocalTime localTime4 = dateTime3.toLocalTime();
        int int5 = dateTime3.getMonthOfYear();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period12 = period10.multipliedBy(0);
        org.joda.time.LocalTime localTime13 = localTime8.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay18.hourOfDay();
        int int24 = timeOfDay18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Period period4 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Hours hours5 = period4.toStandardHours();
        org.joda.time.Interval interval6 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) hours5);
        org.joda.time.Period period8 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period10 = period8.multipliedBy(0);
        int int11 = period8.getMonths();
        org.joda.time.Period period13 = period8.plusYears(0);
        int int14 = period8.getYears();
        int int15 = period8.getSeconds();
        org.joda.time.Interval interval16 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.minusDays(100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.minusMillis((int) (short) 0);
        org.joda.time.Period period40 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period42 = period40.multipliedBy(0);
        int int43 = period40.getMonths();
        org.joda.time.Period period45 = period40.plusYears(0);
        org.joda.time.Duration duration46 = period45.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration46, 11);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime19.plus((org.joda.time.ReadableDuration) duration46);
        long long50 = duration46.getMillis();
        org.joda.time.Interval interval51 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration46);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        org.joda.time.Interval interval53 = interval51.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod52);
        boolean boolean55 = interval51.isAfter((-59005756799900L));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 36000000L + "'", long50 == 36000000L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        java.lang.String str11 = dateTimeField10.toString();
        org.joda.time.DurationField durationField12 = dateTimeField10.getDurationField();
        long long15 = durationField12.getDifferenceAsLong(1645514347881L, 0L);
        long long18 = durationField12.subtract(1645547487487L, 33079993);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[millisOfDay]" + "'", str11, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514347881L + "'", long15 == 1645514347881L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514407494L + "'", long18 == 1645514407494L);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, periodType7, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        mutablePeriod3.setPeriod((long) (byte) -1, (long) 'a', chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.era();
        java.lang.Object obj22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval(obj22, chronology23);
        org.joda.time.MutableInterval mutableInterval25 = interval24.toMutableInterval();
        org.joda.time.Chronology chronology26 = mutableInterval25.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.halfdayOfDay();
        int int30 = dateTimeField28.getMaximumValue((long) 11);
        boolean boolean32 = dateTimeField28.isLeap((-1L));
        int int33 = dateTimeField28.getMaximumValue();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        int int37 = dateTimeField28.getMaximumShortTextLength(locale34);
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Chronology chronology43 = mutableInterval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.DateTime dateTime45 = localDate44.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate47 = localDate44.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval(obj48, chronology49);
        org.joda.time.MutableInterval mutableInterval51 = interval50.toMutableInterval();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(obj53, chronology54);
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.Chronology chronology57 = mutableInterval56.getChronology();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (short) 0, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.Interval interval61 = interval50.withStart((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = localDate44.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate44.toDateTimeAtCurrentTime(dateTimeZone63);
        int int65 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.LocalDate.Property property66 = localDate44.era();
        org.joda.time.LocalDate localDate68 = localDate44.withCenturyOfEra(8);
        org.joda.time.LocalDate.Property property69 = localDate68.dayOfMonth();
        org.joda.time.LocalDate localDate71 = property69.addToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate73 = localDate71.minusDays(999);
        org.joda.time.LocalDate localDate75 = localDate71.plusDays(16);
        org.joda.time.DateTime dateTime76 = localDate75.toDateTimeAtMidnight();
        int int77 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDate75);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str36, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 100, dateTimeZone4);
        long long8 = dateTimeZone4.convertLocalToUTC(60L, false);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj1, dateTimeZone4);
        boolean boolean10 = dateTimeZone4.isFixed();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-36227380278946L), dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 61L + "'", long8 == 61L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate6.property(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = localDate6.withYear(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str16 = dateTimeFieldType15.toString();
        boolean boolean17 = localDate6.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property18 = localDate6.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.years();
        mutablePeriod22.set(durationFieldType23, 2);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        int int35 = dateTime34.getMinuteOfDay();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod22, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant37, readableInstant38, periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        mutablePeriod40.set(durationFieldType41, 2);
        int int44 = mutablePeriod22.indexOf(durationFieldType41);
        java.lang.Object obj45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval(obj45, chronology46);
        org.joda.time.MutableInterval mutableInterval48 = interval47.toMutableInterval();
        org.joda.time.Chronology chronology49 = mutableInterval48.getChronology();
        java.lang.String str50 = mutableInterval48.toString();
        mutablePeriod22.setPeriod((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.LocalDate localDate52 = localDate6.minus((org.joda.time.ReadablePeriod) mutablePeriod22);
        int int53 = localDate6.getYear();
        org.joda.time.DateTime dateTime54 = localDate6.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfCentury" + "'", str16, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:22:50.451+00:00:00.013/2022-02-22T07:22:50.451+00:00:00.013" + "'", str50, "2022-02-22T07:22:50.451+00:00:00.013/2022-02-22T07:22:50.451+00:00:00.013");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate6.property(dateTimeFieldType11);
        org.joda.time.LocalDate localDate13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(1980);
        org.joda.time.LocalDate localDate17 = property12.addToCopy(14);
        org.joda.time.LocalDate localDate18 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate21 = localDate18.minusWeeks(6232);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.LocalTime localTime10 = localTime6.withHourOfDay(0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        int int12 = localTime10.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime10.minusMinutes(10);
        org.joda.time.LocalTime.Property property15 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundCeilingCopy();
        int int17 = property1.compareTo((org.joda.time.ReadablePartial) localTime16);
        java.util.Locale locale18 = null;
        int int19 = property1.getMaximumShortTextLength(locale18);
        org.joda.time.TimeOfDay timeOfDay20 = property1.withMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(521);
        org.joda.time.Period period3 = period1.withHours(851);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setPeriod(94528800000L, 292279047L);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime13 = property7.roundFloorCopy();
        int int14 = localTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate19, periodType25);
        boolean boolean27 = calendar3.after((java.lang.Object) periodType25);
        int int28 = calendar3.getWeeksInWeekYear();
        calendar3.set(0, (int) (byte) -1, 20, 1, 100, 45);
        java.util.Locale locale38 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet40 = locale38.getExtensionKeys();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale38);
        calendar41.set(4, 45, 117);
        java.util.Date date46 = calendar41.getTime();
        calendar3.setTime(date46);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date46);
        java.util.Date date49 = localDate48.toDate();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-61912831029332,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=25,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=50,MILLISECOND=668,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-61912831029332,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=25,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=50,MILLISECOND=668,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Wed Jan 25 07:22:50 GMT+00:00 8");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Jan 25 00:00:00 GMT+00:00 8");
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusMinutes(40);
        int int5 = localTime4.getHourOfDay();
        org.joda.time.LocalTime localTime7 = localTime4.minusSeconds(292278993);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        long long21 = dateTimeZone18.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone18);
        mutableDateTime17.setZone(dateTimeZone18);
        java.lang.Object obj28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval(obj28, chronology29);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        org.joda.time.Chronology chronology32 = mutableInterval31.getChronology();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.halfdayOfDay();
        org.joda.time.DurationField durationField35 = chronology32.halfdays();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 13, chronology32);
        mutableDateTime36.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime36.year();
        mutableDateTime36.setDayOfMonth(4);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime36.setZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 100, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(43200000L, dateTimeZone42);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(dateTimeZone42);
        java.lang.String str48 = dateTimeZone42.getNameKey((long) (short) 1);
        mutableDateTime17.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.026+00:00:00.013" + "'", str11, "1970-01-01T00:00:00.026+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDate46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology6);
        org.joda.time.DurationField durationField10 = chronology6.months();
        org.joda.time.DurationField durationField11 = chronology6.halfdays();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology6);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.LocalTime localTime16 = localTime13.plusHours(86399999);
        int int17 = localTime16.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) localTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00:00:00.000" + "'", str14, "00:00:00.000");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period12 = period10.multipliedBy(0);
        org.joda.time.LocalTime localTime13 = localTime8.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay1.plusHours(15);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay1.withMillisOfSecond(9);
        int int21 = timeOfDay1.size();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 13, chronology8);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        int int22 = dateTime21.getMinuteOfDay();
        int int23 = dateTime21.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        mutableDateTime12.setZone(dateTimeZone24);
        long long27 = dateTimeZone24.previousTransition((long) 1439);
        java.util.Locale locale31 = new java.util.Locale("hi!", "");
        java.util.Locale locale34 = new java.util.Locale("hi!", "");
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale31.getDisplayCountry(locale34);
        java.lang.String str37 = dateTimeZone24.getShortName((long) (short) 0, locale31);
        java.lang.String str39 = dateTimeZone24.getNameKey((long) 2000);
        java.lang.String str41 = dateTimeZone24.getShortName((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 292278993, dateTimeZone24);
        long long47 = dateTimeZone24.convertLocalToUTC(910103041036799993L, true);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withMonthOfYear(33079515);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33079515 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1439L + "'", long27 == 1439L);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.013" + "'", str37, "+00:00:00.013");
// flaky:         org.junit.Assert.assertNull(str39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.013" + "'", str41, "+00:00:00.013");
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 910103041036799980L + "'", long47 == 910103041036799980L);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.Period period14 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period16 = period14.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period19 = period14.withFieldAdded(durationFieldType17, (int) (byte) 10);
        org.joda.time.LocalTime localTime20 = localTime12.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalTime localTime22 = localTime20.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property23 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime24 = property23.roundCeilingCopy();
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        org.joda.time.Chronology chronology3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(114876, 18000013, (-113), chronology3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18000013 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        mutableDateTime10.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfEven();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale12);
        int int15 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalTime localTime17 = property7.addCopy((long) 4);
        org.joda.time.DateTimeField dateTimeField18 = property7.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property7.getFieldType();
        org.joda.time.LocalTime localTime20 = property7.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime22 = localTime20.plusMinutes(56);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withSecondOfMinute((int) (byte) 10);
        java.lang.String str28 = localDateTime25.toString();
        java.lang.String str29 = localDateTime25.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localTime22.compareTo((org.joda.time.ReadablePartial) localDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.023" + "'", str28, "1970-01-01T00:00:00.023");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.023" + "'", str29, "1970-01-01T00:00:00.023");
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime2.plusSeconds(15);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        int int9 = timeZone7.getOffset((long) 51);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        int int11 = calendar10.getWeekYear();
        calendar10.roll((int) (short) 0, false);
        int int15 = calendar10.getMinimalDaysInFirstWeek();
        calendar10.setLenient(true);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromCalendarFields(calendar10);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.plusMillis(17);
        int int21 = localTime2.compareTo((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay18.minusMinutes(32772);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.plusMinutes(1996);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-125940760628949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=51,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        int int10 = dateTime9.getMinuteOfDay();
        int int11 = dateTime9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(5L, chronology19);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        mutablePeriod27.addYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        mutablePeriod33.set(durationFieldType34, 2);
        java.lang.Object obj38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(obj38, chronology39);
        org.joda.time.MutableInterval mutableInterval41 = interval40.toMutableInterval();
        org.joda.time.Chronology chronology42 = mutableInterval41.getChronology();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        int int46 = dateTime45.getMinuteOfDay();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod33, (org.joda.time.ReadableInstant) dateTime45);
        int int48 = dateTime45.getMinuteOfHour();
        org.joda.time.DateTime.Property property49 = dateTime45.centuryOfEra();
        int int50 = dateTime45.getSecondOfDay();
        org.joda.time.DateTime dateTime55 = dateTime45.withTime((int) (byte) 0, 10, (int) (short) 10, (int) (short) 1);
        org.joda.time.Duration duration56 = mutablePeriod27.toDurationTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight23.withDurationAdded((org.joda.time.ReadableDuration) duration56, 3);
        org.joda.time.Period period60 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period62 = period60.multipliedBy(0);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period65 = period60.withFieldAdded(durationFieldType63, 2);
        org.joda.time.Period period67 = period65.plusMonths(1980);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight58.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 2);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plusWeeks((-431));
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.withYearOfCentury((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plusWeeks((-431));
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.weekyear();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        boolean boolean11 = dateTimeField9.isLeap((long) 1439);
        java.util.Locale locale14 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        int int16 = dateTimeField9.getMaximumTextLength(locale14);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("0052-01-01T01:00:00.020+00:00:00.007");
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale18.getLanguage();
        java.lang.String str21 = locale18.getScript();
        java.lang.String str22 = locale14.getDisplayName(locale18);
        java.lang.String str23 = locale14.toLanguageTag();
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category24, locale27);
        java.util.Locale locale30 = java.util.Locale.getDefault(category24);
        java.lang.String str31 = locale30.getCountry();
        java.lang.String str32 = locale14.getDisplayCountry(locale30);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean7 = localDateTime4.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.yearOfEra();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy(3942);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay12.withYear((int) 'x');
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtMidnight();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        int int28 = timeZone26.getOffset((long) 51);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26);
        int int30 = calendar29.getWeekYear();
        calendar29.roll((int) (short) 0, false);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35, periodType36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.years();
        mutablePeriod37.set(durationFieldType38, 2);
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = mutableInterval44.getChronology();
        mutablePeriod37.setPeriod((org.joda.time.ReadableInterval) mutableInterval44);
        mutablePeriod37.setYears((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.years();
        mutablePeriod52.set(durationFieldType53, 2);
        java.lang.Object obj57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval(obj57, chronology58);
        org.joda.time.MutableInterval mutableInterval60 = interval59.toMutableInterval();
        org.joda.time.Chronology chronology61 = mutableInterval60.getChronology();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 0, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTimeAtMidnight(dateTimeZone63);
        int int65 = dateTime64.getMinuteOfDay();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod52, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(readableInstant67, readableInstant68, periodType69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.years();
        mutablePeriod70.set(durationFieldType71, 2);
        int int74 = mutablePeriod52.indexOf(durationFieldType71);
        int int75 = mutablePeriod52.getDays();
        mutablePeriod37.add((org.joda.time.ReadablePeriod) mutablePeriod52);
        boolean boolean77 = calendar29.after((java.lang.Object) mutablePeriod52);
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((java.lang.Object) calendar29);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime81 = yearMonthDay78.toDateTimeAtCurrentTime(dateTimeZone80);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) 31, dateTimeZone80);
        java.util.TimeZone timeZone83 = dateTimeZone80.toTimeZone();
        org.joda.time.DateTime dateTime84 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime85 = org.joda.time.MutableDateTime.now(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime86 = org.joda.time.MutableDateTime.now(dateTimeZone80);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime86.weekyear();
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime86.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime90 = property88.set(1960);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1960 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-125940760628841,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=51,MILLISECOND=159,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        int int12 = localTime11.size();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withField(dateTimeFieldType16, 2);
        java.lang.String str19 = dateTimeFieldType16.getName();
        int int20 = localTime11.get(dateTimeFieldType16);
        org.joda.time.LocalTime localTime22 = localTime11.plusMinutes(1439);
        org.joda.time.Chronology chronology23 = localTime11.getChronology();
        int int24 = localTime11.getMillisOfDay();
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getMinuteOfDay();
        int int35 = dateTime33.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime33.getZone();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Chronology chronology43 = mutableInterval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay37.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay37.dayOfMonth();
        int int48 = property47.get();
        org.joda.time.DurationField durationField49 = property47.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay50 = property47.getYearMonthDay();
        org.joda.time.DateTimeField dateTimeField51 = property47.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay54 = property47.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localTime11.compareTo((org.joda.time.ReadablePartial) yearMonthDay54);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "secondOfDay" + "'", str19, "secondOfDay");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 15);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(15);
        org.joda.time.LocalTime localTime16 = localTime14.withHourOfDay(0);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        boolean boolean21 = dateTimeField19.isLeap((long) 1439);
        java.util.Locale locale24 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        int int26 = dateTimeField19.getMaximumTextLength(locale24);
        java.lang.String str27 = locale9.getDisplayLanguage(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withLocale(locale24);
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronology();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusWeeks((int) (byte) -1);
        int int7 = localDateTime2.getEra();
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property9.addToCopy((long) 2055);
        int int14 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone6);
        org.joda.time.LocalTime localTime9 = localTime7.withMillisOfDay(15);
        org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(0);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.Period period13 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime11);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = localTime11.withMinuteOfHour(26239);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26239 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfDay(15);
        org.joda.time.LocalTime localTime7 = localTime5.withHourOfDay(0);
        org.joda.time.LocalTime localTime9 = localTime5.withHourOfDay(0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((-62135596800007L), chronology10);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusHours(1);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withMillisOfSecond(47);
        int int18 = timeOfDay17.getMillisOfSecond();
        int int19 = timeOfDay17.size();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 47 + "'", int18 == 47);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 13, chronology7);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 2, chronology7);
        org.joda.time.Period period14 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period16 = period14.multipliedBy(0);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period19 = period14.withFieldAdded(durationFieldType17, 2);
        boolean boolean20 = mutablePeriod12.isSupported(durationFieldType17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Chronology chronology28 = mutableInterval27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getMinuteOfDay();
        int int33 = dateTime31.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime31.getZone();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        java.lang.String str37 = periodType36.getName();
        org.joda.time.PeriodType periodType38 = periodType36.withSecondsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = mutableInterval44.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.halfdayOfDay();
        org.joda.time.DurationField durationField48 = chronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.yearOfCentury();
        org.joda.time.DateTime dateTime50 = dateTime31.toDateTime(chronology45);
        org.joda.time.Period period51 = new org.joda.time.Period();
        org.joda.time.Period period53 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType55 = period53.getFieldType((int) (short) 1);
        org.joda.time.Period period56 = period51.minus((org.joda.time.ReadablePeriod) period53);
        int[] intArray59 = chronology45.get((org.joda.time.ReadablePeriod) period56, (long) 17, (long) 6);
        mutablePeriod12.setPeriod(readableDuration21, chronology45);
        java.lang.Object obj63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval(obj63, chronology64);
        org.joda.time.MutableInterval mutableInterval66 = interval65.toMutableInterval();
        org.joda.time.Chronology chronology67 = mutableInterval66.getChronology();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (short) 0, chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.halfdayOfDay();
        org.joda.time.DurationField durationField70 = chronology67.halfdays();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 13, chronology67);
        java.lang.String str72 = mutableDateTime71.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime71.property(dateTimeFieldType73);
        org.joda.time.MutableDateTime mutableDateTime75 = property74.roundFloor();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.dayOfMonth();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime75.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime79 = property77.add((long) 16);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod12, (org.joda.time.ReadableInstant) mutableDateTime79);
        mutablePeriod12.clear();
        org.joda.time.Period period83 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period85 = period83.withHours((int) '4');
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) period85);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod12.setValue(610001, 26288141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 610001");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Years" + "'", str37, "Years");
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, -11]");
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str72, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(3057069047L);
        org.joda.time.LocalTime localTime3 = localTime1.plusMinutes(26273);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(59, 15, 32770);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(13, (-70919999), 13, 27);
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusHours((int) (byte) 10);
        int[] intArray13 = timeOfDay12.getValues();
        java.util.Calendar.Builder builder14 = builder0.setFields(intArray13);
        java.util.Calendar.Builder builder18 = builder14.setDate(53, 310, 71);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("2022-02-22T07:15:52.426Z/2022-02-22T07:15:52.426Z");
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.Calendar.Builder builder22 = builder14.setTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        long long26 = dateTimeZone23.previousTransition((long) (short) -1);
        long long28 = dateTimeZone23.convertUTCToLocal(1036801980L);
        java.util.TimeZone timeZone29 = dateTimeZone23.toTimeZone();
        java.util.TimeZone timeZone30 = dateTimeZone23.toTimeZone();
        timeZone30.setID("1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007");
        java.util.Calendar.Builder builder33 = builder22.setTimeZone(timeZone30);
        java.util.Locale locale36 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale36);
        java.lang.String str40 = locale36.getISO3Country();
        java.util.Calendar.Builder builder41 = builder33.setLocale(locale36);
        java.util.Calendar.Builder builder45 = builder33.setWeekDate(1960, 314867, (-518399999));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1329080974L + "'", long28 == 1329080974L);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+81:11");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+81:11");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645514571311,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=51,MILLISECOND=311,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("T00:00:51.227");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.multipliedBy(0);
        int int4 = period1.getMonths();
        org.joda.time.Period period6 = period1.plusYears(0);
        org.joda.time.Period period8 = period1.plusHours(19);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.plus(readablePeriod12);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.minuteOfDay();
        mutableDateTime17.setSecondOfDay((int) (short) 10);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.minuteOfHour();
        mutableDateTime17.add((long) 10);
        org.joda.time.DateTime dateTime24 = localTime13.toDateTime((org.joda.time.ReadableInstant) mutableDateTime17);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfDay();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 1969, chronology30);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.DateTime dateTime35 = dateTime24.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(dateTimeZone36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime37);
        long long39 = interval38.getStartMillis();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 3600);
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime42.getZone();
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) 32770, dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        boolean boolean47 = interval38.isBefore((org.joda.time.ReadableInstant) mutableDateTime45);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645383600010L + "'", long39 == 1645383600010L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(906);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.Period period4 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period6 = period4.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period9 = period4.withFieldAdded(durationFieldType7, (int) (byte) 10);
        int[] intArray10 = period4.getValues();
        org.joda.time.Period period11 = period4.toPeriod();
        org.joda.time.Period period13 = period4.plusMonths(12);
        org.joda.time.Period period15 = period4.minusHours(0);
        org.joda.time.Period period17 = period15.plusMillis(34);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period20 = period17.withMinutes(26334);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 10, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate7.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.Interval interval24 = interval13.withStart((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        org.joda.time.DateTime dateTime33 = localDate32.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate35 = localDate32.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = mutableInterval44.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.Interval interval49 = interval38.withStart((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = localDate32.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property52 = localDate32.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight55 = localDate32.toDateMidnight(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusYears(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType69 = periodType68.withHoursRemoved();
        java.lang.Object obj71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Interval interval73 = new org.joda.time.Interval(obj71, chronology72);
        org.joda.time.MutableInterval mutableInterval74 = interval73.toMutableInterval();
        org.joda.time.Chronology chronology75 = mutableInterval74.getChronology();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) (short) 0, chronology75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(0L, periodType68, chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.weekyearOfCentury();
        mutablePeriod64.setPeriod((long) (byte) -1, (long) 'a', chronology75);
        java.lang.String str80 = chronology75.toString();
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight60, chronology75);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((-40003537003198561L), chronology75);
        org.joda.time.YearMonthDay yearMonthDay83 = dateMidnight82.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(dateTimeZone84);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime85.minuteOfDay();
        mutableDateTime85.setSecondOfDay((int) (short) 10);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime85.minuteOfHour();
        mutableDateTime85.addMonths((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime85.weekyear();
        boolean boolean93 = dateMidnight82.isEqual((org.joda.time.ReadableInstant) mutableDateTime85);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField78);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ISOChronology[+81:11:18.994]" + "'", str80, "ISOChronology[+81:11:18.994]");
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-1630713600000L));
        org.joda.time.LocalTime localTime3 = localTime1.withMillisOfSecond(0);
        int int4 = localTime1.size();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology5.months();
        org.joda.time.DurationField durationField11 = chronology5.months();
        long long15 = chronology5.add((-11L), 705565250166000L, 1439);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1015308394988873989L + "'", long15 == 1015308394988873989L);
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        int int12 = localTime8.size();
        org.joda.time.LocalTime localTime14 = localTime8.minusHours(24);
        org.joda.time.LocalTime.Property property15 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime17 = property15.addCopy(26339);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 0);
        org.joda.time.LocalTime localTime10 = localTime6.minusMillis(26242);
        org.joda.time.LocalTime localTime12 = localTime6.minusHours(26248);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.multipliedBy(0);
        org.joda.time.Period period5 = period3.withDays((int) (short) 0);
        org.joda.time.Period period7 = period3.withMillis(17);
        org.joda.time.Period period9 = period7.plusYears(6);
        org.joda.time.Period period11 = period7.minusSeconds(43);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime13 = property7.setCopy(52);
        org.joda.time.LocalTime localTime15 = property7.addCopy(1);
        org.joda.time.LocalTime localTime16 = property7.withMinimumValue();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.setVariant("months");
        java.util.Locale.Builder builder22 = builder18.setVariant("");
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Locale.Builder builder26 = builder22.setLocale(locale23);
        java.util.Locale.Builder builder28 = builder26.setLanguage("");
        java.util.Locale locale29 = builder26.build();
        java.util.Locale locale30 = builder26.build();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getScript();
        java.lang.String str34 = locale30.getDisplayScript(locale31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime35 = property7.setCopy("2022-02-22T07:15:49.448Z/2022-02-22T07:15:49.448Z", locale30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:15:49.448Z/2022-02-22T07:15:49.448Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str25, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(26293, (-1800));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26293 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1969, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.LocalTime.Property property11 = localTime9.millisOfDay();
        int int12 = localTime9.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = localTime9.withSecondOfMinute(694);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 694 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int4 = calendar3.getWeekYear();
        calendar3.clear();
        java.util.TimeZone timeZone6 = calendar3.getTimeZone();
        java.lang.String str7 = timeZone6.getID();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        java.time.Instant instant9 = calendar8.toInstant();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar8);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514571921,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=51,MILLISECOND=921,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusWeeks((int) (byte) -1);
        int int7 = localDateTime2.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusYears(0);
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime9.compareTo(readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-2203197925L));
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay(22L);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalTime.Property property6 = localTime3.property(dateTimeFieldType4);
        org.joda.time.LocalTime localTime7 = property6.roundHalfCeilingCopy();
        int int8 = localTime7.getSecondOfMinute();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        java.lang.String str11 = periodType10.getName();
        org.joda.time.PeriodType periodType12 = periodType10.withDaysRemoved();
        java.lang.String str13 = periodType10.toString();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime1, (org.joda.time.ReadablePartial) localTime7, periodType10);
        org.joda.time.PeriodType periodType15 = periodType10.withMonthsRemoved();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "secondOfMinute" + "'", str5, "secondOfMinute");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Years" + "'", str11, "Years");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[Years]" + "'", str13, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.withHours((int) '4');
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 13, chronology10);
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfMonth();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTime();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.weekOfWeekyear();
        mutableDateTime18.setWeekOfWeekyear(8);
        int int25 = mutableDateTime18.getYearOfEra();
        mutableDateTime18.setHourOfDay(23);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str15, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 11, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property4 = dateTime2.property(dateTimeFieldType3);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime2.getZone();
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone6.getOffset(readableInstant7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusWeeks(13);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.minusMonths(2022);
        boolean boolean15 = dateMidnight13.isEqual(260236800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278994 + "'", int8 == 292278994);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.Chronology chronology4 = mutableInterval3.getChronology();
        java.lang.String str5 = mutableInterval3.toString();
        java.lang.String str6 = mutableInterval3.toString();
        org.joda.time.Period period7 = mutableInterval3.toPeriod();
        boolean boolean9 = mutableInterval3.isAfter((long) 1439);
        java.lang.String str10 = mutableInterval3.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) mutableInterval3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableInterval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-25T16:34:11.178+81:11:18.994/2022-02-25T16:34:11.178+81:11:18.994" + "'", str5, "2022-02-25T16:34:11.178+81:11:18.994/2022-02-25T16:34:11.178+81:11:18.994");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-25T16:34:11.178+81:11:18.994/2022-02-25T16:34:11.178+81:11:18.994" + "'", str6, "2022-02-25T16:34:11.178+81:11:18.994/2022-02-25T16:34:11.178+81:11:18.994");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-25T16:34:11.178+81:11:18.994/2022-02-25T16:34:11.178+81:11:18.994" + "'", str10, "2022-02-25T16:34:11.178+81:11:18.994/2022-02-25T16:34:11.178+81:11:18.994");
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 13, chronology10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) ' ', chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 19, chronology10);
        org.joda.time.DateTimeField dateTimeField18 = chronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.dayOfWeek();
        org.joda.time.Period period20 = new org.joda.time.Period(347155199993L, (long) 1380, chronology10);
        org.joda.time.Period period22 = period20.withHours((int) (byte) 100);
        org.joda.time.Period period24 = period22.minusMonths((int) (short) 1);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        org.joda.time.ReadableDuration readableDuration1 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        int int11 = dateTime10.getMinuteOfDay();
        int int12 = dateTime10.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime10.getZone();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        java.lang.String str16 = periodType15.getName();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateTime10, periodType17);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.halfdayOfDay();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology24);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) 32770, chronology24);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withYear((int) 'x');
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay30.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay34 = property33.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property33.getFieldType();
        org.joda.time.DateTimeField dateTimeField36 = property33.getField();
        boolean boolean37 = dateTimeField36.isSupported();
        java.lang.String str38 = dateTimeField36.toString();
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone42);
        org.joda.time.LocalTime localTime45 = localTime43.withMillisOfDay(15);
        org.joda.time.LocalTime localTime47 = localTime45.withHourOfDay(0);
        org.joda.time.Period period49 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period51 = period49.multipliedBy(0);
        org.joda.time.LocalTime localTime52 = localTime47.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period54 = period51.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay40.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1439, 5, 52, 6, 0, 52, 11, (int) (short) 0);
        org.joda.time.Period period66 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period68 = period66.multipliedBy(0);
        int int69 = period66.getMonths();
        org.joda.time.Period period71 = period66.plusYears(0);
        org.joda.time.Duration duration72 = period71.toStandardDuration();
        org.joda.time.Chronology chronology73 = null;
        mutablePeriod64.setPeriod((org.joda.time.ReadableDuration) duration72, chronology73);
        org.joda.time.TimeOfDay timeOfDay75 = timeOfDay40.minus((org.joda.time.ReadablePeriod) mutablePeriod64);
        java.lang.String str76 = timeOfDay75.toString();
        java.util.Locale.Category category77 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale80 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category77, locale80);
        java.lang.String str83 = locale80.getISO3Language();
        boolean boolean84 = locale80.hasExtensions();
        java.lang.String str85 = locale80.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) timeOfDay75, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Years" + "'", str16, "Years");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DateTimeField[monthOfYear]" + "'", str38, "DateTimeField[monthOfYear]");
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "T14:00:00.100" + "'", str76, "T14:00:00.100");
        org.junit.Assert.assertTrue("'" + category77 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category77.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale80.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        org.joda.time.ReadableDuration readableDuration1 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        int int11 = dateTime10.getMinuteOfDay();
        int int12 = dateTime10.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime10.getZone();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        java.lang.String str16 = periodType15.getName();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateTime10, periodType17);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.halfdayOfDay();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology24);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) 32770, chronology24);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth(20);
        org.joda.time.Interval interval33 = yearMonthDay32.toInterval();
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay32.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalTime localTime39 = localTime37.plus(readablePeriod38);
        org.joda.time.LocalTime localTime41 = localTime39.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.minuteOfDay();
        mutableDateTime43.setSecondOfDay((int) (short) 10);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime43.minuteOfHour();
        mutableDateTime43.add((long) 10);
        org.joda.time.DateTime dateTime50 = localTime39.toDateTime((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.LocalTime localTime52 = localTime39.withMinuteOfHour(11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = yearMonthDay32.isBefore((org.joda.time.ReadablePartial) localTime52);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Years" + "'", str16, "Years");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) -1);
        org.joda.time.LocalTime localTime13 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.addWrapFieldToCopy(100);
        org.joda.time.LocalTime localTime16 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime18 = localTime16.plusHours(26197);
        org.joda.time.LocalTime localTime20 = localTime18.plusMinutes((-431));
        org.joda.time.LocalTime.Property property21 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime23 = localTime18.plusMillis(576);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        long long3 = dateTimeZone0.previousTransition((long) (short) -1);
        long long5 = dateTimeZone0.convertUTCToLocal(1036801980L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        int int9 = dateTimeZone0.getStandardOffset(1645550567429L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1329080974L + "'", long5 == 1329080974L);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+81:11");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278994 + "'", int9 == 292278994);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.Period period8 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period10 = period8.multipliedBy(0);
        org.joda.time.LocalTime localTime11 = localTime6.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period13 = period10.minusMillis(11);
        org.joda.time.Period period15 = period13.withMonths(17);
        int int16 = period13.getDays();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfHour();
        int int5 = mutableDateTime1.getMinuteOfDay();
        java.lang.Object obj7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(obj7, chronology8);
        org.joda.time.MutableInterval mutableInterval10 = interval9.toMutableInterval();
        org.joda.time.Chronology chronology11 = mutableInterval10.getChronology();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.halfdayOfDay();
        int int15 = dateTimeField13.getMaximumValue((long) 11);
        boolean boolean17 = dateTimeField13.isLeap((-1L));
        int int19 = dateTimeField13.getMaximumValue(0L);
        long long22 = dateTimeField13.add((long) 1980, 24);
        long long25 = dateTimeField13.add(7L, (long) ' ');
        java.lang.String str26 = dateTimeField13.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField13, 26233);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 26233");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 994 + "'", int5 == 994);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1036801980L + "'", long22 == 1036801980L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1382400007L + "'", long25 == 1382400007L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str26, "DateTimeField[halfdayOfDay]");
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale12);
        int int15 = property7.getMaximumTextLength(locale12);
        java.lang.String str16 = property7.getName();
        org.joda.time.LocalTime localTime18 = property7.addCopy(26502305);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfDay" + "'", str16, "millisOfDay");
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        int int3 = localDateTime2.size();
        int int4 = localDateTime2.getYearOfCentury();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 1439, (long) 8);
        org.joda.time.Period period9 = period7.plusMinutes(70);
        org.joda.time.Period period11 = period9.plusMonths((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((int) 'a', (int) (byte) -1, 2, 8, (int) (short) -1, 10, 3, 3);
        org.joda.time.Period period21 = period11.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Period period23 = period21.minusWeeks(117);
        org.joda.time.Period period25 = period23.minusSeconds(30);
        org.joda.time.Period period26 = period23.toPeriod();
        org.joda.time.Period period28 = period26.minusYears(46800015);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period28, (-47));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2199596146");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 70 + "'", int4 == 70);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone12);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfDay(15);
        org.joda.time.LocalTime localTime17 = localTime15.withHourOfDay(0);
        org.joda.time.LocalTime localTime19 = localTime15.withHourOfDay(0);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        int int21 = localTime19.getMillisOfSecond();
        org.joda.time.LocalTime localTime23 = localTime19.minusMinutes(10);
        org.joda.time.LocalTime.Property property24 = localTime19.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property24.roundCeilingCopy();
        int int26 = property10.compareTo((org.joda.time.ReadablePartial) localTime25);
        int int27 = property10.get();
        int int28 = property10.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField29 = property10.getField();
        org.joda.time.TimeOfDay timeOfDay31 = property10.setCopy(32);
        int int32 = timeOfDay31.getHourOfDay();
        int int33 = localTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay31);
        java.lang.String str35 = localTime8.toString("20");
        org.joda.time.Period period37 = new org.joda.time.Period(0L);
        org.joda.time.Period period38 = period37.toPeriod();
        org.joda.time.Period period40 = org.joda.time.Period.millis(70);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.months();
        int int42 = period40.indexOf(durationFieldType41);
        org.joda.time.Period period44 = period40.plusSeconds(1969);
        org.joda.time.Period period45 = period37.minus((org.joda.time.ReadablePeriod) period40);
        java.lang.Object obj46 = null;
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology55 = mutableInterval54.getChronology();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.halfdayOfDay();
        org.joda.time.DurationField durationField58 = chronology55.halfdays();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) 13, chronology55);
        mutableDateTime59.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.year();
        mutableDateTime59.setDayOfMonth(4);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime59.setZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 100, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(43200000L, dateTimeZone65);
        org.joda.time.LocalDate localDate69 = org.joda.time.LocalDate.now(dateTimeZone65);
        java.lang.String str71 = dateTimeZone65.getNameKey((long) (short) 1);
        java.lang.String str73 = dateTimeZone65.getShortName((long) (byte) -1);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(obj46, dateTimeZone65);
        org.joda.time.LocalDate.Property property75 = localDate74.dayOfYear();
        int int76 = localDate74.getDayOfYear();
        org.joda.time.Period period78 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType80 = period78.getFieldType((int) (short) 1);
        java.lang.String str81 = durationFieldType80.getName();
        org.joda.time.LocalDate localDate83 = localDate74.withFieldAdded(durationFieldType80, 7);
        org.joda.time.Period period85 = period45.withFieldAdded(durationFieldType80, (-3));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime87 = localTime8.withFieldAdded(durationFieldType80, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'months' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "20" + "'", str35, "20");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertNull(str71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+81:11:18.994" + "'", str73, "+81:11:18.994");
        org.junit.Assert.assertNotNull(property75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 56 + "'", int76 == 56);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "months" + "'", str81, "months");
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(1);
        org.joda.time.LocalTime localTime13 = localTime8.plusMillis(0);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfSecond(822);
        int int16 = localTime15.getSecondOfMinute();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime8.withYearOfEra(32770);
        org.joda.time.DateTime dateTime14 = dateTime8.minusSeconds(1439);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1983);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays(32769);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.Date date11 = new java.util.Date(26191, 1, 1970, 25, (-12), 447);
        java.time.Instant instant12 = date11.toInstant();
        calendar3.setTime(date11);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 292278994 + "'", int2 == 292278994);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=824471797448006,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28096,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=176,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=55,SECOND=27,MILLISECOND=0,ZONE_OFFSET=292278994,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sun Jun 24 00:55:27 GMT+81:11 28096");
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime4.hourOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        int int3 = timeZone1.getOffset((long) 51);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        int int5 = calendar4.getWeekYear();
        calendar4.roll((int) (short) 0, false);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant9, readableInstant10, periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        mutablePeriod12.set(durationFieldType13, 2);
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) mutableInterval19);
        mutablePeriod12.setYears((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        mutablePeriod27.set(durationFieldType28, 2);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        int int40 = dateTime39.getMinuteOfDay();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.years();
        mutablePeriod45.set(durationFieldType46, 2);
        int int49 = mutablePeriod27.indexOf(durationFieldType46);
        int int50 = mutablePeriod27.getDays();
        mutablePeriod12.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        boolean boolean52 = calendar4.after((java.lang.Object) mutablePeriod27);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((java.lang.Object) calendar4);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 31, dateTimeZone55);
        org.joda.time.Period period59 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period61 = period59.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period64 = period59.withFieldAdded(durationFieldType62, (int) (byte) 10);
        org.joda.time.Period period66 = period59.multipliedBy((int) (byte) 100);
        org.joda.time.Period period68 = period66.plusSeconds(32772);
        org.joda.time.Days days69 = period68.toStandardDays();
        org.joda.time.LocalDate localDate70 = localDate57.minus((org.joda.time.ReadablePeriod) days69);
        org.joda.time.DateTime dateTime71 = localDate57.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 292278994 + "'", int3 == 292278994);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-125940760627266,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=34,SECOND=11,MILLISECOND=728,ZONE_OFFSET=292278994,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours((int) (byte) 10);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMillis(8);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis(11);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        int int13 = localTime12.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localTime12.getFields();
        org.joda.time.LocalTime localTime16 = localTime12.minusHours((int) '#');
        org.joda.time.DateTime dateTime17 = localTime12.toDateTimeToday();
        int int18 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) (byte) 0);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '4', (long) '#');
        org.joda.time.DateTime dateTime25 = dateTime21.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        boolean boolean27 = property8.equals((java.lang.Object) dateTime25);
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        java.lang.String str29 = property8.getAsText();
        org.joda.time.TimeOfDay timeOfDay31 = property8.addWrapFieldToCopy(28852010);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property8.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay34 = property8.addNoWrapToCopy(26458);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[14, 0, 0, 0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 551 + "'", int18 == 551);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "59" + "'", str29, "59");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        java.util.Date date1 = new java.util.Date(2629746000L);
        int int2 = date1.getDay();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = localTime3.withMillisOfDay((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 03 19:40:24 GMT+81:11 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) (-431));
        int int11 = dateTimeFormatter10.getDefaultYear();
        boolean boolean12 = dateTimeFormatter10.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.parse("16:00:00.015", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime0.setZone(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar6 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar6);
        gregorianCalendar6.setFirstDayOfWeek(310);
        gregorianCalendar6.set(365, 0, (int) (byte) 10, 32769, 32769, 32770);
        gregorianCalendar6.set(26222, 66145375, (-52));
        int int21 = gregorianCalendar6.getWeekYear();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.parse("years", strMap25);
        java.util.Locale locale29 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList26, (java.util.Collection<java.lang.String>) strSet30);
        java.lang.String[] strArray43 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone47);
        org.joda.time.LocalTime localTime50 = localTime48.withMillisOfDay(15);
        org.joda.time.LocalTime localTime52 = localTime50.withHourOfDay(0);
        org.joda.time.LocalTime localTime54 = localTime50.withHourOfDay(0);
        org.joda.time.Chronology chronology55 = localTime54.getChronology();
        int int56 = localTime54.getMillisOfSecond();
        org.joda.time.LocalTime localTime58 = localTime54.minusMinutes(10);
        boolean boolean59 = strSet44.remove((java.lang.Object) localTime58);
        java.lang.String[] strArray61 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        boolean boolean64 = strSet44.retainAll((java.util.Collection<java.lang.String>) strList62);
        boolean boolean65 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.setVariant("months");
        java.util.Locale.Builder builder70 = builder66.setVariant("");
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.lang.String str73 = locale71.getDisplayCountry(locale72);
        java.util.Locale.Builder builder74 = builder70.setLocale(locale71);
        boolean boolean75 = strSet44.contains((java.lang.Object) locale71);
        java.util.Locale locale76 = locale71.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = gregorianCalendar6.getDisplayName(10022, 2055, locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5538340 + "'", int21 == 5538340);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 15 + "'", int56 == 15);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str73, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period3 = period1.withHours((int) '4');
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 13, chronology10);
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfMonth();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime18.setMillis((long) 3);
        int int23 = mutableDateTime18.getSecondOfMinute();
        mutableDateTime18.setYear(59);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 9, 70919999999L);
        org.joda.time.Period period30 = period28.minusSeconds(78);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period30);
        java.lang.Object obj34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval(obj34, chronology35);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Chronology chronology38 = mutableInterval37.getChronology();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        int int42 = dateTime41.getMinuteOfDay();
        int int43 = dateTime41.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime41.getZone();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone44);
        java.lang.Object obj47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval(obj47, chronology48);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.Chronology chronology51 = mutableInterval50.getChronology();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (short) 0, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay45.withChronologyRetainFields(chronology51);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) 59, chronology51);
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.dayOfMonth();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateMidnight55);
        java.lang.Object obj59 = null;
        java.lang.Object obj60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval(obj60, chronology61);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        org.joda.time.Chronology chronology64 = mutableInterval63.getChronology();
        long long68 = chronology64.add((long) (short) 1, (long) 86399999, (int) '4');
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(obj59, chronology64);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType72 = periodType71.withSecondsRemoved();
        java.lang.String str73 = periodType72.getName();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 1969, periodType72);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay69.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod74, 32770);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight55.plus((org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.withMillis((-40003537003198561L));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str15, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 18 + "'", int23 == 18);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4492799949L + "'", long68 == 4492799949L);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Years" + "'", str73, "Years");
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight79);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        org.joda.time.ReadableDuration readableDuration1 = null;
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        int int11 = dateTime10.getMinuteOfDay();
        int int12 = dateTime10.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime10.getZone();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        java.lang.String str16 = periodType15.getName();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateTime10, periodType17);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.halfdayOfDay();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.yearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology24);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) 32770, chronology24);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withYear((int) 'x');
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay30.monthOfYear();
        java.util.Locale locale34 = java.util.Locale.US;
        java.lang.String str35 = locale34.getISO3Country();
        int int36 = property33.getMaximumShortTextLength(locale34);
        org.joda.time.DurationField durationField37 = property33.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay38 = property33.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay38.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay38.minusMonths(35510426);
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = mutableInterval47.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.halfdayOfDay();
        org.joda.time.DurationField durationField51 = chronology48.halfdays();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 13, chronology48);
        mutableDateTime52.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.year();
        mutableDateTime52.setDayOfMonth(4);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime52.setZone(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime52.toMutableDateTime();
        mutableDateTime52.setWeekOfWeekyear(42);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType71 = periodType70.withHoursRemoved();
        java.lang.Object obj73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval(obj73, chronology74);
        org.joda.time.MutableInterval mutableInterval76 = interval75.toMutableInterval();
        org.joda.time.Chronology chronology77 = mutableInterval76.getChronology();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) (short) 0, chronology77);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, periodType70, chronology77);
        org.joda.time.DateTimeField dateTimeField80 = chronology77.weekyearOfCentury();
        mutablePeriod66.setPeriod((long) (byte) -1, (long) 'a', chronology77);
        java.lang.String str82 = chronology77.toString();
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology77);
        org.joda.time.DateTimeField dateTimeField84 = chronology77.weekOfWeekyear();
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(chronology77);
        org.joda.time.DateTimeField dateTimeField86 = chronology77.halfdayOfDay();
        mutableDateTime52.setChronology(chronology77);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay38.withChronologyRetainFields(chronology77);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Years" + "'", str16, "Years");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "USA" + "'", str35, "USA");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ISOChronology[+81:11:18.994]" + "'", str82, "ISOChronology[+81:11:18.994]");
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(yearMonthDay88);
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfDay(15);
        org.joda.time.LocalTime localTime10 = localTime8.withHourOfDay(0);
        org.joda.time.Period period12 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period14 = period12.multipliedBy(0);
        org.joda.time.LocalTime localTime15 = localTime10.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period17 = period14.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay3.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = timeOfDay20.toDateTimeToday(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(5L, dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 51681780, dateTimeZone21);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfMonth();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add((long) 16);
        mutableDateTime18.addDays(53);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setDateTime(805, 26533, 733, 438, 108, 199, 26349);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 438 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str11, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        long long9 = dateTimeZone6.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(324, (int) (byte) 1, 1917, 0, 366, 33079515, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.LocalTime.Property property6 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property6.roundHalfFloorCopy();
        int int8 = localTime7.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withMillis((long) 15);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plusYears(100);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.weekyear();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight68 = property66.addToCopy(19);
        org.joda.time.DateMidnight dateMidnight69 = property66.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight70 = property66.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField71 = property66.getField();
        org.joda.time.DurationField durationField72 = dateTimeField71.getRangeDurationField();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNull(durationField72);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addWrapFieldToCopy(6);
        org.joda.time.LocalTime localTime10 = property7.roundHalfCeilingCopy();
        java.lang.String str11 = localTime10.toString();
        org.joda.time.LocalTime.Property property12 = localTime10.hourOfDay();
        java.util.Date date16 = new java.util.Date((int) (byte) 10, (int) (byte) 100, 0);
        int int17 = date16.getYear();
        boolean boolean18 = localTime10.equals((java.lang.Object) date16);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "00:00:00.015" + "'", str11, "00:00:00.015");
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Apr 30 00:00:00 GMT+81:11 1918");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 18 + "'", int17 == 18);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = period2.getFieldType((int) (short) 1);
        org.joda.time.Period period5 = period0.minus((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period9 = period5.minusDays(2022);
        org.joda.time.MutablePeriod mutablePeriod10 = period5.toMutablePeriod();
        int int11 = mutablePeriod10.getHours();
        mutablePeriod10.setYears((-117536731));
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-10) + "'", int11 == (-10));
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = mutableInterval8.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate19, periodType25);
        boolean boolean27 = calendar3.after((java.lang.Object) periodType25);
        int int28 = calendar3.getWeeksInWeekYear();
        calendar3.set(0, (int) (byte) -1, 20, 1, 100, 45);
        calendar3.set(1970, 1439, 22, 310, (int) ' ');
        java.util.Date date42 = calendar3.getTime();
        calendar3.set(37, (-5), 330);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 292278994 + "'", int2 == 292278994);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=37,MONTH=-5,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=330,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=32,SECOND=45,MILLISECOND=350,ZONE_OFFSET=292278994,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 03 22:32:45 GMT+81:11 2090");
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate24, periodType30);
        org.joda.time.DateTime dateTime32 = dateTime8.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 31);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.withPeriodAdded((org.joda.time.ReadablePeriod) period35, (-292275054));
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.minusYears(239385);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        org.joda.time.Chronology chronology46 = mutableInterval45.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.era();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) 10, dateTimeZone52);
        org.joda.time.Chronology chronology54 = chronology46.withZone(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(chronology54);
        java.lang.Object obj58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval(obj58, chronology59);
        org.joda.time.MutableInterval mutableInterval61 = interval60.toMutableInterval();
        org.joda.time.Chronology chronology62 = mutableInterval61.getChronology();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (short) 0, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.halfdayOfDay();
        org.joda.time.DurationField durationField65 = chronology62.halfdays();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) 13, chronology62);
        mutableDateTime66.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime66.year();
        int int70 = mutableDateTime66.getCenturyOfEra();
        java.lang.Object obj71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Interval interval73 = new org.joda.time.Interval(obj71, chronology72);
        org.joda.time.MutableInterval mutableInterval74 = interval73.toMutableInterval();
        java.lang.Object obj76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval(obj76, chronology77);
        org.joda.time.MutableInterval mutableInterval79 = interval78.toMutableInterval();
        org.joda.time.Chronology chronology80 = mutableInterval79.getChronology();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) (short) 0, chronology80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = localDate81.toDateTimeAtMidnight(dateTimeZone82);
        org.joda.time.Interval interval84 = interval73.withStart((org.joda.time.ReadableInstant) dateTime83);
        int int85 = dateTime83.getWeekyear();
        boolean boolean86 = mutableDateTime66.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTimeZone dateTimeZone87 = mutableDateTime66.getZone();
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight89 = localDate55.toDateMidnight(dateTimeZone87);
        org.joda.time.DateTime dateTime90 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone87);
        org.joda.time.YearMonthDay yearMonthDay91 = new org.joda.time.YearMonthDay(dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight92 = org.joda.time.DateMidnight.now(dateTimeZone87);
        int int94 = dateTimeZone87.getOffsetFromLocal(1645547458726L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 19 + "'", int70 == 19);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateMidnight92);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 292278994 + "'", int94 == 292278994);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 1980);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeFormatter11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter11.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.parse("PT2.022S", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.hourOfHalfday();
        org.joda.time.DurationField durationField13 = chronology5.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology5.weekOfWeekyear();
        boolean boolean17 = dateTimeField15.isLeap((long) (-52));
        java.lang.String str18 = dateTimeField15.toString();
        org.joda.time.DurationField durationField19 = dateTimeField15.getRangeDurationField();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str18, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.getShortName((long) 32770);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = locale16.stripExtensions();
        java.lang.String str19 = dateTimeZone11.getName((long) 31, locale16);
        java.lang.String str20 = locale16.getDisplayCountry();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+81:11:18.994" + "'", str14, "+81:11:18.994");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+81:11:18.994" + "'", str19, "+81:11:18.994");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "China" + "'", str20, "China");
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime localTime16 = localTime13.withField(dateTimeFieldType14, 2);
        java.lang.String str17 = dateTimeFieldType14.getName();
        org.joda.time.LocalTime.Property property18 = localTime8.property(dateTimeFieldType14);
        org.joda.time.LocalTime localTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime21 = property18.addCopy(3057069047L);
        org.joda.time.LocalTime localTime23 = localTime21.plusHours((-35062));
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondOfDay" + "'", str17, "secondOfDay");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        int int5 = periodType2.size();
        java.lang.Object obj8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj8, chronology9);
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.Chronology chronology12 = mutableInterval11.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        int int16 = dateTime15.getMinuteOfDay();
        int int17 = dateTime15.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Chronology chronology25 = mutableInterval24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay19.withChronologyRetainFields(chronology25);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(5L, chronology25);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645514342053L, (long) 733, periodType2, chronology25);
        java.lang.Object obj38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(obj38, chronology39);
        org.joda.time.MutableInterval mutableInterval41 = interval40.toMutableInterval();
        org.joda.time.Chronology chronology42 = mutableInterval41.getChronology();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.halfdayOfDay();
        org.joda.time.DurationField durationField45 = chronology42.halfdays();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 13, chronology42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) ' ', chronology42);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.yearOfCentury();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 53, (-431L));
        int[] intArray53 = chronology42.get((org.joda.time.ReadablePeriod) period51, (long) 33);
        org.joda.time.DurationField durationField54 = chronology42.hours();
        mutablePeriod33.add(1645514517344L, chronology42);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 0, 0, 33]");
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        int int10 = dateTime9.getMinuteOfDay();
        int int11 = dateTime9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(5L, chronology19);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.era();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1969, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(15);
        org.joda.time.LocalTime localTime13 = property10.withMaximumValue();
        org.joda.time.LocalTime localTime14 = property10.roundHalfEvenCopy();
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category16, locale19);
        java.util.Locale locale22 = java.util.Locale.getDefault(category16);
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property10.setCopy("24-mar-2500 1.00.00", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"24-mar-2500 1.00.00\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet23);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.Period period14 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period16 = period14.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period19 = period14.withFieldAdded(durationFieldType17, (int) (byte) 10);
        org.joda.time.LocalTime localTime20 = localTime12.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalTime localTime22 = localTime12.plusMinutes(1);
        org.joda.time.DateTime dateTime23 = localTime12.toDateTimeToday();
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded((long) 26248, 26242);
        int int27 = dateTime23.getMinuteOfDay();
        boolean boolean29 = dateTime23.isAfter(3623126167615000L);
        org.joda.time.DateTime dateTime30 = dateTime23.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(70);
        org.joda.time.LocalDate.Property property10 = localDate6.weekyear();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, readableInstant12, periodType13);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType19 = periodType18.withHoursRemoved();
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Chronology chronology25 = mutableInterval24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, periodType18, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyearOfCentury();
        mutablePeriod14.setPeriod((long) (byte) -1, (long) 'a', chronology25);
        java.lang.String str30 = chronology25.toString();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology25);
        int int32 = property10.compareTo((org.joda.time.ReadableInstant) dateTime31);
        long long33 = dateTime31.getMillis();
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        org.joda.time.Chronology chronology40 = mutableInterval39.getChronology();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 0, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.halfdayOfDay();
        org.joda.time.DurationField durationField43 = chronology40.halfdays();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 13, chronology40);
        java.lang.String str45 = mutableDateTime44.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.property(dateTimeFieldType46);
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundFloor();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.getMutableDateTime();
        mutableDateTime50.addWeekyears(70);
        java.lang.Object obj54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval(obj54, chronology55);
        org.joda.time.MutableInterval mutableInterval57 = interval56.toMutableInterval();
        org.joda.time.Chronology chronology58 = mutableInterval57.getChronology();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 0, chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTimeAtMidnight(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate59.toDateTimeAtStartOfDay(dateTimeZone62);
        int int64 = dateTime63.getDayOfYear();
        mutableDateTime50.setMillis((org.joda.time.ReadableInstant) dateTime63);
        mutableDateTime50.setMinuteOfDay(5);
        int int68 = mutableDateTime50.getMinuteOfDay();
        java.lang.Object obj70 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval(obj70, chronology71);
        org.joda.time.MutableInterval mutableInterval73 = interval72.toMutableInterval();
        org.joda.time.Chronology chronology74 = mutableInterval73.getChronology();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (short) 0, chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.halfdayOfDay();
        org.joda.time.DurationField durationField77 = chronology74.millis();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.minuteOfDay();
        mutableDateTime50.setChronology(chronology74);
        org.joda.time.DateTimeField dateTimeField80 = chronology74.year();
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime31.toMutableDateTime(chronology74);
        org.joda.time.DateTimeField dateTimeField82 = chronology74.weekyearOfCentury();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime(1645514165374L, chronology84);
        org.joda.time.LocalTime localTime87 = localTime85.minusMinutes(53);
        org.joda.time.DateTime dateTime88 = localTime85.toDateTimeToday();
        org.joda.time.LocalTime localTime90 = localTime85.plusMinutes(49);
        org.joda.time.Period period93 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period95 = period93.withDays(0);
        int[] intArray96 = period93.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = dateTimeField82.add((org.joda.time.ReadablePartial) localTime90, (-995), intArray96, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+81:11:18.994]" + "'", str30, "ISOChronology[+81:11:18.994]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514573766L + "'", long33 == 1645514573766L);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-04T09:11:19.007+81:11:18.994" + "'", str45, "1970-01-04T09:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, 0, 0, 10, 0, 0, 0]");
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1980);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant12, readableInstant13, periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        mutablePeriod15.set(durationFieldType16, 2);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        int int28 = dateTime27.getMinuteOfDay();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod15, (org.joda.time.ReadableInstant) dateTime27);
        int int30 = dateTime27.getMinuteOfHour();
        org.joda.time.DateTime.Property property31 = dateTime27.centuryOfEra();
        int int32 = property31.get();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        int int35 = dateTimeField33.getMinimumValue((long) 15);
        java.util.Locale locale36 = java.util.Locale.US;
        int int37 = dateTimeField33.getMaximumShortTextLength(locale36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter10.withLocale(locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) ' ');
        org.joda.time.LocalDate.Property property43 = localDate42.weekOfWeekyear();
        org.joda.time.LocalDate localDate45 = localDate42.plusMonths(44);
        org.joda.time.DateTime dateTime46 = localDate45.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = dateTimeFormatter10.print((org.joda.time.ReadablePartial) localDate45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645514573803,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=34,SECOND=12,MILLISECOND=797,ZONE_OFFSET=292278994,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 1980);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear(26288141);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.parse("2022-02-22T07:21:56.933Z", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getMinuteOfDay();
        int int35 = dateTime33.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime33.getZone();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime22.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond(15);
        org.joda.time.DateTime.Property property41 = dateTime40.secondOfDay();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        java.lang.Object obj55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval(obj55, chronology56);
        org.joda.time.MutableInterval mutableInterval58 = interval57.toMutableInterval();
        org.joda.time.Chronology chronology59 = mutableInterval58.getChronology();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 0, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType66 = periodType65.withSecondsRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate60, periodType66);
        org.joda.time.DateTime dateTime68 = localDate51.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.minusSeconds(52);
        boolean boolean71 = dateTime42.isEqual((org.joda.time.ReadableInstant) dateTime70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = dateTime42.withHourOfDay(204270);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 204270 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1969, chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(15);
        org.joda.time.LocalTime localTime13 = property10.withMaximumValue();
        org.joda.time.LocalTime localTime14 = property10.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property10.roundHalfEvenCopy();
        java.lang.Object obj16 = null;
        boolean boolean17 = localTime15.equals(obj16);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1439, 5, 52, 6, 0, 52, 11, (int) (short) 0);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = period10.getFieldType((int) (short) 1);
        org.joda.time.Period period14 = period10.minusWeeks((int) (byte) 1);
        int int15 = period14.getMillis();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        boolean boolean17 = period14.isSupported(durationFieldType16);
        int int18 = mutablePeriod8.indexOf(durationFieldType16);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(obj20, chronology21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Chronology chronology24 = mutableInterval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.halfdayOfDay();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.clockhourOfDay();
        org.joda.time.DurationField durationField29 = durationFieldType16.getField(chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.dayOfYear();
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale32.getDisplayName();
        int int35 = dateTimeField31.getMaximumShortTextLength(locale32);
        java.lang.String str36 = locale32.getISO3Country();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zho" + "'", str33, "zho");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CHN" + "'", str36, "CHN");
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime4.withHourOfDay(0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        int int10 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(10);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = localTime12.equals((java.lang.Object) timeZone13);
        org.joda.time.LocalTime localTime16 = localTime12.plusMillis((-1645514232));
        org.joda.time.LocalTime localTime18 = localTime12.withMillisOfDay(78);
        org.joda.time.LocalTime.Property property19 = localTime12.millisOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+81:11");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(66143405);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        int int5 = timeZone2.getOffset((-1039734075599990L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+18:22");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514574085,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+18:22:23.405,offset=66143405,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=45,SECOND=17,MILLISECOND=490,ZONE_OFFSET=66143405,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 66143405 + "'", int5 == 66143405);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        mutableDateTime10.setHourOfDay(7);
        mutableDateTime10.setMillis((long) 12);
        long long15 = mutableDateTime10.getMillis();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = property16.set("2022-02-22T07:20:46.118+00:00:00.013/2022-02-22T07:20:46.118+00:00:00.013");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:20:46.118+00:00:00.013/2022-02-22T07:20:46.118+00:00:00.013\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 12L + "'", long15 == 12L);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfSecond(100);
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(22);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 100, periodType8);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType12 = periodType11.withDaysRemoved();
        org.joda.time.Period period13 = period10.normalizedStandard(periodType12);
        org.joda.time.LocalTime localTime15 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 0);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes(20);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 13);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField10 = chronology8.weekyears();
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology8);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay14 = property12.addWrapFieldToCopy(1980);
        java.lang.String str15 = property12.getName();
        org.joda.time.TimeOfDay timeOfDay17 = property12.addWrapFieldToCopy(300);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusSeconds(365);
        org.joda.time.LocalTime localTime20 = localTime1.withFields((org.joda.time.ReadablePartial) timeOfDay19);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondOfMinute" + "'", str15, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 59, (-1631005879001L));
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str3 = durationFieldType2.getName();
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj9, chronology10);
        org.joda.time.MutableInterval mutableInterval12 = interval11.toMutableInterval();
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.Interval interval17 = interval6.withStart((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getWeekyear();
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.centuryOfEra();
        boolean boolean22 = durationFieldType2.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfYear();
        org.joda.time.Period period24 = new org.joda.time.Period(164324851200000L, 20L, chronology19);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 35, 32770L);
        long long30 = chronology19.add((org.joda.time.ReadablePeriod) mutablePeriod27, (-1036830771L), 59492917);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.year();
        org.joda.time.Period period33 = org.joda.time.Period.years(10);
        org.joda.time.Period period35 = period33.multipliedBy(14);
        org.joda.time.Period period37 = period33.minusMillis(26222);
        int int38 = period37.getDays();
        org.joda.time.Period period39 = period37.negated();
        int[] intArray41 = chronology19.get((org.joda.time.ReadablePeriod) period39, 433221541L);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weeks" + "'", str3, "weeks");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1946463807224L + "'", long30 == 1946463807224L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 5, 0, 20, 21, 541]");
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone12);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfDay(15);
        org.joda.time.LocalTime localTime17 = localTime15.withHourOfDay(0);
        org.joda.time.LocalTime localTime19 = localTime15.withHourOfDay(0);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        int int21 = localTime19.getMillisOfSecond();
        org.joda.time.LocalTime localTime23 = localTime19.minusMinutes(10);
        org.joda.time.LocalTime.Property property24 = localTime19.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property24.roundCeilingCopy();
        int int26 = property10.compareTo((org.joda.time.ReadablePartial) localTime25);
        int int27 = property10.get();
        int int28 = property10.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField29 = property10.getField();
        org.joda.time.TimeOfDay timeOfDay31 = property10.setCopy(32);
        int int32 = timeOfDay31.getHourOfDay();
        int int33 = localTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay31);
        java.lang.String str35 = localTime8.toString("20");
        org.joda.time.LocalTime localTime37 = localTime8.minusMillis(66145375);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localTime8.getFieldType(0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "20" + "'", str35, "20");
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType3 = period1.getFieldType((int) (short) 1);
        org.joda.time.Period period5 = period1.minusWeeks((int) (byte) 1);
        org.joda.time.Period period7 = period1.multipliedBy(33);
        org.joda.time.Period period8 = period7.toPeriod();
        int int9 = period8.getMillis();
        org.joda.time.Period period11 = period8.plusMonths(26509420);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1970);
        int int6 = dateTimeFormatter5.getDefaultYear();
        boolean boolean7 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter5.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter5.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 32769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.parse("Greenwich Zeit", dateTimeFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay12.plusYears(0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        mutablePeriod27.set(durationFieldType28, 2);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        int int40 = dateTime39.getMinuteOfDay();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod27, (org.joda.time.ReadableInstant) dateTime39);
        int int42 = dateTime39.getMinuteOfHour();
        org.joda.time.DateTime.Property property43 = dateTime39.centuryOfEra();
        int int44 = dateTime39.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime39.toMutableDateTime();
        org.joda.time.Period period47 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period49 = period47.multipliedBy(0);
        org.joda.time.DateTime dateTime51 = dateTime39.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 2);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period54 = period47.minusHours(22);
        org.joda.time.Period period56 = period54.plusHours((int) 'a');
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.weeks();
        java.lang.Object obj62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval(obj62, chronology63);
        org.joda.time.MutableInterval mutableInterval65 = interval64.toMutableInterval();
        org.joda.time.Chronology chronology66 = mutableInterval65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.millisOfSecond();
        org.joda.time.DurationField durationField68 = chronology66.weekyears();
        org.joda.time.TimeOfDay timeOfDay69 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology66);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) ' ', periodType60, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.era();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(345599993L, chronology66);
        java.lang.String str73 = chronology66.toString();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime(345600000L, chronology66);
        org.joda.time.DateTimeField dateTimeField75 = chronology66.weekyear();
        org.joda.time.DurationField durationField76 = chronology66.halfdays();
        org.joda.time.DateTimeField dateTimeField77 = chronology66.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((java.lang.Object) 'a', chronology66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(mutableInterval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(dateTimeField71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[+81:11:18.994]" + "'", str73, "ISOChronology[+81:11:18.994]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 15);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(15);
        org.joda.time.LocalTime localTime16 = localTime14.withHourOfDay(0);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        boolean boolean21 = dateTimeField19.isLeap((long) 1439);
        java.util.Locale locale24 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        int int26 = dateTimeField19.getMaximumTextLength(locale24);
        java.lang.String str27 = locale9.getDisplayLanguage(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withLocale(locale24);
        boolean boolean29 = dateTimeFormatter28.isOffsetParsed();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate7.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.Interval interval24 = interval13.withStart((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate7.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType37 = periodType36.withHoursRemoved();
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Chronology chronology43 = mutableInterval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, periodType36, chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekyearOfCentury();
        mutablePeriod32.setPeriod((long) (byte) -1, (long) 'a', chronology43);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.weekyear();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) dateTime28, chronology43);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(1645514268957L, chronology43);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField52 = chronology43.centuryOfEra();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(22L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str3 = dateTimeFieldType2.toString();
        org.joda.time.LocalTime.Property property4 = localTime1.property(dateTimeFieldType2);
        int int5 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime1.millisOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "secondOfMinute" + "'", str3, "secondOfMinute");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int4 = calendar3.getWeekYear();
        calendar3.clear();
        java.util.TimeZone timeZone6 = calendar3.getTimeZone();
        java.lang.String str7 = timeZone6.getID();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        java.util.Date date10 = calendar8.getTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 292278994 + "'", int2 == 292278994);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007" + "'", str7, "1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514574559,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=34,SECOND=13,MILLISECOND=553,ZONE_OFFSET=292278994,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 25 16:34:13 GMT+81:11 2022");
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, periodType1, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfCentury();
        java.lang.Object obj17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval(obj17, chronology18);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Chronology chronology21 = mutableInterval20.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.halfdayOfDay();
        org.joda.time.DurationField durationField24 = chronology21.halfdays();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 13, chronology21);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 2, chronology21);
        java.lang.Object obj28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval(obj28, chronology29);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        org.joda.time.Chronology chronology32 = mutableInterval31.getChronology();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.halfdayOfDay();
        org.joda.time.DurationField durationField35 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.yearOfCentury();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology32);
        org.joda.time.LocalDate localDate38 = dateTime37.toLocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.centuryOfEra();
        long long41 = chronology21.set((org.joda.time.ReadablePartial) localDate38, 5L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableInstant44, readableInstant45, periodType46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 7, (-1L), periodType46);
        int int49 = mutablePeriod48.size();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(obj53, chronology54);
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.Chronology chronology57 = mutableInterval56.getChronology();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (short) 0, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.halfdayOfDay();
        org.joda.time.DurationField durationField60 = chronology57.halfdays();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) 13, chronology57);
        mutablePeriod48.add((long) 53, chronology57);
        org.joda.time.LocalDate localDate64 = localDate38.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod48, (int) (short) 100);
        org.joda.time.LocalDate.Property property65 = localDate64.yearOfEra();
        org.joda.time.LocalDate localDate66 = property65.withMaximumValue();
        org.joda.time.LocalDate localDate67 = property65.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate68 = property65.roundFloorCopy();
        org.joda.time.LocalDate localDate70 = property65.addWrapFieldToCopy(34);
        org.joda.time.Period period72 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period74 = period72.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period77 = period72.withFieldAdded(durationFieldType75, (int) (byte) 10);
        int[] intArray78 = period72.getValues();
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.years();
        java.lang.String str80 = durationFieldType79.toString();
        int int81 = period72.indexOf(durationFieldType79);
        org.joda.time.LocalDate localDate83 = localDate70.withFieldAdded(durationFieldType79, 773);
        int int84 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDate83);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645488000005L + "'", long41 == 1645488000005L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 10, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "years" + "'", str80, "years");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        boolean boolean8 = property7.isLeap();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy((-7L));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((-1892));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addWrapFieldToCopy(9);
        org.joda.time.LocalTime localTime4 = property1.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(26283000L);
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1969, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.hourOfDay();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        org.joda.time.ReadableDuration readableDuration0 = null;
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        int int10 = dateTime9.getMinuteOfDay();
        int int11 = dateTime9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        java.lang.String str15 = periodType14.getName();
        org.joda.time.PeriodType periodType16 = periodType14.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime9, periodType16);
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.yearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime9.toDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        mutablePeriod33.set(durationFieldType34, 2);
        java.lang.Object obj38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(obj38, chronology39);
        org.joda.time.MutableInterval mutableInterval41 = interval40.toMutableInterval();
        org.joda.time.Chronology chronology42 = mutableInterval41.getChronology();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        int int46 = dateTime45.getMinuteOfDay();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod33, (org.joda.time.ReadableInstant) dateTime45);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        org.joda.time.Chronology chronology53 = mutableInterval52.getChronology();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 0, chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTimeAtMidnight(dateTimeZone55);
        java.lang.Object obj58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval(obj58, chronology59);
        org.joda.time.MutableInterval mutableInterval61 = interval60.toMutableInterval();
        org.joda.time.Chronology chronology62 = mutableInterval61.getChronology();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (short) 0, chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTimeAtMidnight(dateTimeZone64);
        java.lang.Object obj67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval(obj67, chronology68);
        org.joda.time.MutableInterval mutableInterval70 = interval69.toMutableInterval();
        org.joda.time.Chronology chronology71 = mutableInterval70.getChronology();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (short) 0, chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = localDate72.toDateTimeAtStartOfDay(dateTimeZone75);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType78 = periodType77.withSecondsRemoved();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate63, (org.joda.time.ReadablePartial) localDate72, periodType78);
        org.joda.time.DateTime dateTime80 = dateTime56.minus((org.joda.time.ReadablePeriod) period79);
        java.lang.Object obj82 = null;
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Interval interval84 = new org.joda.time.Interval(obj82, chronology83);
        org.joda.time.MutableInterval mutableInterval85 = interval84.toMutableInterval();
        org.joda.time.Chronology chronology86 = mutableInterval85.getChronology();
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) (short) 0, chronology86);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = localDate87.toDateTimeAtMidnight(dateTimeZone88);
        int int90 = dateTime89.getMinuteOfDay();
        int int91 = dateTime89.getYearOfEra();
        mutablePeriod33.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.LocalDate localDate93 = dateTime89.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone95 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateTime dateTime96 = dateTime89.toDateTime(dateTimeZone95);
        org.joda.time.MutableDateTime mutableDateTime97 = mutableDateTime29.toMutableDateTime(dateTimeZone95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight98 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeZone95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Years" + "'", str15, "Years");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1970 + "'", int91 == 1970);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(mutableDateTime97);
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        java.util.Locale locale2 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor4 = strSet3.iterator();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks((int) (byte) -1);
        boolean boolean16 = dateTimeZone5.isLocalDateTimeGap(localDateTime11);
        boolean boolean17 = strSet3.remove((java.lang.Object) localDateTime11);
        java.util.Spliterator<java.lang.String> strSpliterator18 = strSet3.spliterator();
        int int19 = strSet3.size();
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet3.spliterator();
        java.lang.Object[] objArray21 = strSet3.toArray();
        java.util.stream.Stream<java.lang.String> strStream22 = strSet3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream23 = strSet3.parallelStream();
        java.lang.String[] strArray25 = java.util.TimeZone.getAvailableIDs(924);
        java.lang.CharSequence[] charSequenceArray26 = strSet3.toArray((java.lang.CharSequence[]) strArray25);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSpliterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSpliterator20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(charSequenceArray26);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2075-02-12T07:17:10.968+00:00:00.007");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfCentury();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) dateTimeZone2, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale12);
        int int15 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalTime localTime17 = property7.addCopy((long) 4);
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(852076800000L);
        int int20 = localTime17.compareTo((org.joda.time.ReadablePartial) timeOfDay19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusMinutes(64);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay19.withSecondOfMinute(15);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = timeOfDay19.getValue(84000031);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 84000031");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate24, periodType30);
        org.joda.time.DateTime dateTime32 = dateTime8.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime.Property property33 = dateTime8.year();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(46);
        org.joda.time.DateTime dateTime37 = dateTime35.withCenturyOfEra((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((int) 'a', (int) (byte) -1, 2, 8, (int) (short) -1, 10, 3, 3);
        mutablePeriod46.setPeriod((long) 8);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.Chronology chronology54 = dateTimeFormatter53.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology57 = dateTimeFormatter56.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeFormatter56.getZone();
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeZone58);
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        mutablePeriod46.setPeriod((long) 25200020, 0L, chronology60);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, chronology60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((java.lang.Object) chronology60, dateTimeZone64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(chronology57);
        org.junit.Assert.assertNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.CHINA;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = locale6.stripExtensions();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.parse("years", strMap12);
        java.util.Locale locale16 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strSet17);
        java.lang.String[] strArray30 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone34);
        org.joda.time.LocalTime localTime37 = localTime35.withMillisOfDay(15);
        org.joda.time.LocalTime localTime39 = localTime37.withHourOfDay(0);
        org.joda.time.LocalTime localTime41 = localTime37.withHourOfDay(0);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        int int43 = localTime41.getMillisOfSecond();
        org.joda.time.LocalTime localTime45 = localTime41.minusMinutes(10);
        boolean boolean46 = strSet31.remove((java.lang.Object) localTime45);
        java.lang.String[] strArray48 = new java.lang.String[] { "+00:00" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        boolean boolean51 = strSet31.retainAll((java.util.Collection<java.lang.String>) strList49);
        boolean boolean52 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.setVariant("months");
        java.util.Locale.Builder builder57 = builder53.setVariant("");
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        java.util.Locale.Builder builder61 = builder57.setLocale(locale58);
        boolean boolean62 = strSet31.contains((java.lang.Object) locale58);
        java.lang.String str63 = locale10.getDisplayName(locale58);
        java.util.Locale.setDefault(locale58);
        java.lang.String str65 = locale58.getScript();
        java.lang.String str66 = locale6.getDisplayCountry(locale58);
        java.lang.String str67 = locale4.getDisplayName(locale58);
        java.util.Locale.Builder builder68 = builder2.setLocale(locale4);
        java.util.Locale locale69 = builder68.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English" + "'", str5, "English");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese" + "'", str9, "Chinese");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 15 + "'", int43 == 15);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str60, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u6587" + "'", str63, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e2d\u570b" + "'", str66, "\u4e2d\u570b");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str67, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate24, periodType30);
        org.joda.time.DateTime dateTime32 = dateTime8.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime.Property property33 = dateTime8.year();
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Chronology chronology41 = mutableInterval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType57 = periodType56.withSecondsRemoved();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate51, periodType57);
        java.util.Locale locale61 = new java.util.Locale("hi!", "");
        boolean boolean62 = localDate42.equals((java.lang.Object) locale61);
        java.util.Locale.setDefault(category35, locale61);
        org.joda.time.DateTime dateTime64 = property33.setCopy("17", locale61);
        org.joda.time.DateTime.Property property65 = dateTime64.era();
        org.joda.time.DateTime dateTime67 = dateTime64.minus((-7L));
        int int68 = dateTime67.getDayOfWeek();
        org.joda.time.DateTime.Property property69 = dateTime67.weekOfWeekyear();
        java.util.Date date70 = dateTime67.toDate();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(date70);
// flaky:         org.junit.Assert.assertEquals(date70.toString(), "Wed Jan 06 00:00:00 GMT+81:11 17");
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone4);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay(15);
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(0);
        org.joda.time.Period period11 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period13 = period11.multipliedBy(0);
        org.joda.time.LocalTime localTime14 = localTime9.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period13.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = timeOfDay19.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(5L, dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int51 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate localDate53 = localDate31.plusYears(10);
        org.joda.time.LocalDate.Property property54 = localDate53.era();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = property54.getAsText(locale57);
        org.joda.time.LocalDate localDate60 = property54.getLocalDate();
        org.joda.time.LocalDate localDate61 = property54.roundHalfEvenCopy();
        java.lang.Object obj64 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval(obj64, chronology65);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.Chronology chronology68 = mutableInterval67.getChronology();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (short) 0, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.halfdayOfDay();
        org.joda.time.DurationField durationField71 = chronology68.halfdays();
        org.joda.time.DateTimeField dateTimeField72 = chronology68.clockhourOfDay();
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeField72.getAsShortText((long) 1980, locale74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate76 = property54.setCopy("Japanese (Japan)", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Japanese (Japan)\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str58, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u516c\u5143" + "'", str59, "\u516c\u5143");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "9" + "'", str75, "9");
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(948713999000L);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMillis(26242);
        org.joda.time.Period period5 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period7 = period5.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period10 = period5.withFieldAdded(durationFieldType8, (int) (byte) 10);
        int[] intArray11 = period5.getValues();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        java.lang.String str13 = durationFieldType12.toString();
        int int14 = period5.indexOf(durationFieldType12);
        org.joda.time.Period period16 = period5.withWeeks(1439);
        org.joda.time.Period period17 = period5.toPeriod();
        org.joda.time.Period period19 = period5.withMinutes(9);
        org.joda.time.DateTime dateTime20 = dateTime1.minus((org.joda.time.ReadablePeriod) period5);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 10, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "years" + "'", str13, "years");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.LocalDate.Property property9 = localDate6.monthOfYear();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property9.roundFloorCopy();
        int int12 = localDate11.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYear(3600);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (short) 0);
        org.joda.time.Period period9 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period11 = period9.withHours((int) '4');
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period14 = period9.withFieldAdded(durationFieldType12, (int) (byte) 10);
        int[] intArray15 = period9.getValues();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        java.lang.String str17 = durationFieldType16.toString();
        int int18 = period9.indexOf(durationFieldType16);
        java.lang.String str19 = durationFieldType16.toString();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime5.withFieldAdded(durationFieldType16, 2000);
        org.joda.time.LocalDateTime.Property property22 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.minusDays(41);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 10, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "years" + "'", str17, "years");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusHours(16);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone16);
        org.joda.time.LocalTime localTime19 = localTime17.withMillisOfDay(15);
        org.joda.time.LocalTime.Property property20 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime22 = property20.addCopy(5);
        org.joda.time.LocalTime localTime24 = localTime22.minusMillis(50400000);
        org.joda.time.LocalTime localTime26 = localTime22.minusMillis((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = localTime22.indexOf(dateTimeFieldType27);
        org.joda.time.LocalTime localTime30 = localTime22.withMillisOfSecond(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean32 = localTime22.isSupported(dateTimeFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime9.withField(dateTimeFieldType31, 9775);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9775 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Chronology chronology15 = mutableInterval14.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate16, periodType22);
        java.util.Locale locale26 = new java.util.Locale("hi!", "");
        boolean boolean27 = localDate7.equals((java.lang.Object) locale26);
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale32 = new java.util.Locale("weekyears", "2022-02-22T07:15:57.666+00:00:00.007/2022-02-22T07:15:57.666+00:00:00.007", "PeriodType[Weeks]");
        java.util.Locale.setDefault(category0, locale32);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder36.setVariant("months");
        java.util.Locale.Builder builder40 = builder36.setVariant("");
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.util.Locale.Builder builder44 = builder40.setLocale(locale41);
        java.util.Locale.Builder builder46 = builder44.setLanguage("");
        java.util.Locale locale47 = builder44.build();
        java.lang.String str48 = locale34.getDisplayName(locale47);
        java.util.Locale.setDefault(category0, locale34);
        java.util.Locale locale50 = java.util.Locale.getDefault(category0);
        java.lang.String str51 = locale50.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals(locale32.toString(), "weekyears_2022-02-22T07:15:57.666+00:00:00.007/2022-02-22T07:15:57.666+00:00:00.007_PeriodType[Weeks]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str43, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Japanese" + "'", str48, "Japanese");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(15);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusHours(300);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear(1);
        boolean boolean13 = localDateTime9.equals((java.lang.Object) 4682022L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withMillisOfSecond(2040);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2040 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime13 = property7.addCopy(6);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property14.setCopy("German (Germany)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"German (Germany)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate7.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.Interval interval24 = interval13.withStart((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        org.joda.time.DateTime dateTime33 = localDate32.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate35 = localDate32.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = mutableInterval44.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.Interval interval49 = interval38.withStart((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = localDate32.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property52 = localDate32.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight55 = localDate32.toDateMidnight(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusYears(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType69 = periodType68.withHoursRemoved();
        java.lang.Object obj71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Interval interval73 = new org.joda.time.Interval(obj71, chronology72);
        org.joda.time.MutableInterval mutableInterval74 = interval73.toMutableInterval();
        org.joda.time.Chronology chronology75 = mutableInterval74.getChronology();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) (short) 0, chronology75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(0L, periodType68, chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.weekyearOfCentury();
        mutablePeriod64.setPeriod((long) (byte) -1, (long) 'a', chronology75);
        java.lang.String str80 = chronology75.toString();
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight60, chronology75);
        org.joda.time.DateTime dateTime82 = yearMonthDay81.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(84400015);
        org.joda.time.DateTime dateTime85 = yearMonthDay81.toDateTimeAtMidnight(dateTimeZone84);
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime((long) 100, dateTimeZone84);
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(dateTimeZone84);
        int int88 = dateTime87.getYear();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField78);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ISOChronology[+81:11:18.994]" + "'", str80, "ISOChronology[+81:11:18.994]");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2022 + "'", int88 == 2022);
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("millis");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(15);
        org.joda.time.LocalTime localTime13 = localTime11.withHourOfDay(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        boolean boolean18 = dateTimeField16.isLeap((long) 1439);
        java.util.Locale locale21 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        int int23 = dateTimeField16.getMaximumTextLength(locale21);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("0052-01-01T01:00:00.020+00:00:00.007");
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale25.getLanguage();
        java.lang.String str28 = locale25.getScript();
        java.lang.String str29 = locale21.getDisplayName(locale25);
        java.lang.String str30 = locale21.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder4.setLocale(locale21);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "und" + "'", str30, "und");
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((-1), 26279, 921);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1980);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter10.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withDefaultYear(0);
        java.io.Writer writer19 = null;
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Chronology chronology25 = mutableInterval24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.DateTime dateTime27 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate29 = localDate26.plusDays(70);
        org.joda.time.LocalDate localDate31 = localDate26.withMonthOfYear(2);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(1439L);
        org.joda.time.Interval interval34 = yearMonthDay33.toInterval();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay33.minusYears(32770);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay33.minusYears(10);
        int int39 = localDate26.compareTo((org.joda.time.ReadablePartial) yearMonthDay38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay38.plusDays(600);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(writer19, (org.joda.time.ReadablePartial) yearMonthDay38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay41);
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.minusHours((int) '#');
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant13, readableInstant14, periodType15);
        mutablePeriod16.addYears((int) (short) -1);
        java.lang.String str19 = mutablePeriod16.toString();
        mutablePeriod16.setSeconds((int) (short) 0);
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Chronology chronology28 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfSecond();
        org.joda.time.DurationField durationField30 = chronology28.weekyears();
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology28);
        mutablePeriod16.setPeriod((long) (short) -1, chronology28);
        org.joda.time.DateTimeField dateTimeField35 = chronology28.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology28);
        org.joda.time.DateTimeField dateTimeField37 = chronology28.hourOfDay();
        org.joda.time.DateTime dateTime38 = dateTime12.toDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField39 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology28.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 551 + "'", int8 == 551);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "P-1Y" + "'", str19, "P-1Y");
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Interval interval23 = interval12.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology30 = mutableInterval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate34 = localDate31.withWeekOfWeekyear((int) (short) 1);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Chronology chronology44 = mutableInterval43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.Interval interval48 = interval37.withStart((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property51 = localDate31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.DateMidnight dateMidnight54 = localDate31.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusYears(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.minus((long) 10);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withDurationAdded((long) 13, 0);
        org.joda.time.DateMidnight.Property property64 = dateMidnight60.yearOfCentury();
        org.joda.time.DateMidnight.Property property65 = dateMidnight60.year();
        org.joda.time.DurationField durationField66 = property65.getDurationField();
        org.joda.time.DateMidnight dateMidnight67 = property65.getDateMidnight();
        int int68 = dateMidnight67.getWeekyear();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight67, readableDuration69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = dateMidnight67.toString("2022-02-22T07:21:32.937+00:00:00.001/2022-02-22T07:21:32.937+00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1969 + "'", int68 == 1969);
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addCopy(822);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.roundFloorCopy();
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        int int13 = localTime11.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 59, (long) 1980);
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Chronology chronology22 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        mutablePeriod16.setPeriod(70919999999L, chronology22);
        mutablePeriod16.addYears(31);
        int int28 = mutablePeriod16.getSeconds();
        mutablePeriod16.add(292278994, 50400000, (int) (byte) 100, (-1036830771), 66143405, 31, 2040, 69);
        org.joda.time.DurationFieldType durationFieldType39 = mutablePeriod16.getFieldType(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime41 = localTime11.withFieldAdded(durationFieldType39, 543);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'months' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(durationFieldType39);
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale12);
        int int15 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalTime localTime17 = property7.addCopy((long) 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property7.getFieldType();
        org.joda.time.LocalTime localTime20 = property7.addWrapFieldToCopy(59);
        org.joda.time.LocalTime localTime21 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval6.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 13, chronology7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) ' ', chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.secondOfMinute();
        long long17 = dateTimeField14.getDifferenceAsLong(1652612063867L, 1645514197532L);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category19, locale22);
        java.util.Locale locale25 = java.util.Locale.getDefault(category19);
        org.joda.time.ReadableDuration readableDuration27 = null;
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Chronology chronology33 = mutableInterval32.getChronology();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        int int37 = dateTime36.getMinuteOfDay();
        int int38 = dateTime36.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime36.getZone();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        java.lang.String str42 = periodType41.getName();
        org.joda.time.PeriodType periodType43 = periodType41.withSecondsRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateTime36, periodType43);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Chronology chronology50 = mutableInterval49.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.halfdayOfDay();
        org.joda.time.DurationField durationField53 = chronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.yearOfCentury();
        org.joda.time.DateTime dateTime55 = dateTime36.toDateTime(chronology50);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) 32770, chronology50);
        org.joda.time.DateTimeField dateTimeField57 = chronology50.dayOfMonth();
        org.joda.time.tz.NameProvider nameProvider58 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider58);
        java.lang.Object obj61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval(obj61, chronology62);
        org.joda.time.MutableInterval mutableInterval64 = interval63.toMutableInterval();
        org.joda.time.Chronology chronology65 = mutableInterval64.getChronology();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) (short) 0, chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTimeAtMidnight(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtStartOfDay(dateTimeZone69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property72 = localDate66.property(dateTimeFieldType71);
        org.joda.time.LocalDate localDate74 = property72.addToCopy(2000);
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str76 = property72.getAsText(locale75);
        java.lang.String str77 = locale75.getISO3Language();
        java.lang.String str80 = nameProvider58.getName(locale75, "weekyearOfCentury", "\u53f0\u6e7e\u5730\u533a");
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = locale81.getISO3Language();
        java.lang.String str83 = locale81.getDisplayScript();
        java.lang.String str86 = nameProvider58.getShortName(locale81, "", "1970-01-01T00:00:00.000+00:00:00.007");
        int int87 = dateTimeField57.getMaximumShortTextLength(locale81);
        java.util.Locale.setDefault(category19, locale81);
        java.lang.String str89 = dateTimeField14.getAsShortText(1036801987L, locale81);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7097866L + "'", long17 == 7097866L);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Years" + "'", str42, "Years");
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(nameProvider58);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "70" + "'", str76, "70");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "zho" + "'", str77, "zho");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "eng" + "'", str82, "eng");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "20" + "'", str89, "20");
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(15);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Period period12 = period10.multipliedBy(0);
        org.joda.time.LocalTime localTime13 = localTime8.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.minusMillis(11);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.plusMillis(99);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay16.minusHours(26215);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay16.minusMinutes(1974);
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay22.getFieldTypes();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 480, 0L, periodType4);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Minutes" + "'", str3, "Minutes");
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("years", strMap1);
        java.lang.String[] strArray14 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone18);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfDay(15);
        org.joda.time.LocalTime localTime23 = localTime21.withHourOfDay(0);
        org.joda.time.LocalTime localTime25 = localTime21.withHourOfDay(0);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        int int27 = localTime25.getMillisOfSecond();
        org.joda.time.LocalTime localTime29 = localTime25.minusMinutes(10);
        boolean boolean30 = strSet15.remove((java.lang.Object) localTime29);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet15);
        org.joda.time.tz.Provider provider32 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider32);
        java.util.Set<java.lang.String> strSet34 = provider32.getAvailableIDs();
        java.lang.String str35 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale49 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.lang.String str56 = nameProvider52.getShortName(locale53, "months", "months");
        java.util.Locale locale57 = java.util.Locale.CHINA;
        boolean boolean58 = locale57.hasExtensions();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.util.Locale locale62 = new java.util.Locale("hi!", "");
        java.util.Locale.Category category63 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale66 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category63, locale66);
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.util.Locale locale70 = java.util.Locale.CHINA;
        boolean boolean71 = locale70.hasExtensions();
        java.util.Locale locale74 = new java.util.Locale("hi!", "");
        java.util.Locale locale77 = new java.util.Locale("hi!", "");
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str79 = locale74.getDisplayCountry(locale77);
        java.util.Locale locale80 = java.util.Locale.CHINA;
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale46, locale49, locale51, locale53, locale57, locale59, locale62, locale66, locale69, locale70, locale77, locale80 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.Locale.FilteringMode filteringMode84 = null;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList82, filteringMode84);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.Locale locale87 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList86);
        java.util.Locale locale90 = new java.util.Locale("hi!", "");
        java.util.Set<java.lang.String> strSet91 = locale90.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor92 = strSet91.iterator();
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet91);
        java.util.Collection<java.util.Locale> localeCollection94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale95 = java.util.Locale.lookup(languageRangeList2, localeCollection94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(nameProvider52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category63.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals(locale74.toString(), "hi!");
        org.junit.Assert.assertEquals(locale77.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNull(locale87);
        org.junit.Assert.assertEquals(locale90.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertNotNull(strList93);
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology10 = mutableInterval9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.Interval interval14 = interval3.withStart((org.joda.time.ReadableInstant) dateTime13);
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Chronology chronology20 = mutableInterval19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        boolean boolean24 = interval14.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        mutablePeriod28.set(durationFieldType29, 2);
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Chronology chronology37 = mutableInterval36.getChronology();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        int int41 = dateTime40.getMinuteOfDay();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod28, (org.joda.time.ReadableInstant) dateTime40);
        int int43 = dateTime40.getMinuteOfHour();
        int int44 = dateTime40.getMillisOfSecond();
        boolean boolean45 = interval14.equals((java.lang.Object) dateTime40);
        org.joda.time.Chronology chronology46 = interval14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(0L, chronology46);
        mutableDateTime47.setMillis((-40003537003198561L));
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology55 = mutableInterval54.getChronology();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.halfdayOfDay();
        org.joda.time.DurationField durationField58 = chronology55.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.yearOfCentury();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.clockhourOfDay();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField63 = chronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology55.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology55.secondOfDay();
        mutableDateTime47.setChronology(chronology55);
        org.joda.time.DurationField durationField67 = chronology55.centuries();
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        org.joda.time.Period period1 = new org.joda.time.Period(345600028L);
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        mutablePeriod3.set(durationFieldType4, 2);
        java.lang.Object obj8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj8, chronology9);
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.Chronology chronology12 = mutableInterval11.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        int int16 = dateTime15.getMinuteOfDay();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod3.setPeriod((long) (byte) 0, 0L);
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        org.joda.time.Chronology chronology27 = mutableInterval26.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.halfdayOfDay();
        org.joda.time.DurationField durationField30 = chronology27.halfdays();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 13, chronology27);
        mutableDateTime31.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.year();
        mutableDateTime31.setHourOfDay(1);
        mutableDateTime31.setYear((int) '4');
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime31.yearOfEra();
        java.lang.String str40 = mutableDateTime31.toString();
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = interval44.toMutableInterval();
        org.joda.time.Chronology chronology46 = mutableInterval45.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTimeAtMidnight(dateTimeZone48);
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology55 = mutableInterval54.getChronology();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTimeAtMidnight(dateTimeZone57);
        java.lang.Object obj60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval(obj60, chronology61);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        org.joda.time.Chronology chronology64 = mutableInterval63.getChronology();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 0, chronology64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = localDate65.toDateTimeAtMidnight(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtStartOfDay(dateTimeZone68);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType71 = periodType70.withSecondsRemoved();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate65, periodType71);
        org.joda.time.DateTime dateTime73 = dateTime49.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime31, (org.joda.time.ReadableInstant) dateTime49, periodType74);
        org.joda.time.Duration duration76 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime31);
        long long77 = duration76.getMillis();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0052-01-04T01:11:19.007+81:11:18.994" + "'", str40, "0052-01-04T01:11:19.007+81:11:18.994");
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay2 = property1.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusSeconds(52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minusHours(26288141);
        org.joda.time.LocalTime localTime9 = timeOfDay8.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology14 = mutableInterval13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, periodType7, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        mutablePeriod3.setPeriod((long) (byte) -1, (long) 'a', chronology14);
        java.lang.String str19 = chronology14.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology14);
        int int21 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = dateTime20.toString("00:00:00.019", locale23);
        org.joda.time.DateTime dateTime26 = dateTime20.minusWeeks(71);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+81:11:18.994]" + "'", str19, "ISOChronology[+81:11:18.994]");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "00:00:00.019" + "'", str24, "00:00:00.019");
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        mutableDateTime1.addMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        mutableDateTime1.setZone(dateTimeZone4);
        long long9 = dateTimeZone4.adjustOffset((long) (-12), true);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-259200013L), dateTimeZone4);
        org.joda.time.LocalTime localTime12 = localTime10.plusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = localTime10.withFieldAdded(durationFieldType13, (-11));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-12L) + "'", long9 == (-12L));
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(22L);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay4.hourOfDay();
        org.joda.time.LocalTime localTime7 = localTime1.withFields((org.joda.time.ReadablePartial) timeOfDay4);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay4.plusHours(68);
        org.joda.time.Period period11 = org.joda.time.Period.hours((int) (byte) 1);
        int int12 = period11.getMinutes();
        org.joda.time.Period period14 = period11.withMonths((int) '4');
        org.joda.time.Period period16 = period14.withMonths((int) (byte) 1);
        org.joda.time.Period period18 = period16.minusSeconds(2040);
        org.joda.time.MutablePeriod mutablePeriod19 = period16.toMutablePeriod();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, 51681780);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.hourOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addMonths(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(15);
        org.joda.time.LocalTime localTime13 = localTime11.withHourOfDay(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        mutablePeriod3.setPeriod((long) 15, chronology16);
        org.joda.time.DurationField durationField18 = chronology16.weeks();
        int int21 = durationField18.getDifference((long) 31, 8L);
        long long23 = durationField18.getValueAsLong(86400000L);
        long long25 = durationField18.getMillis(32310L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 19541088000000L + "'", long25 == 19541088000000L);
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        java.util.Date date6 = new java.util.Date(130104, 59466804, 25200020, 32843, 26449, 78);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Feb 07 19:50:18 GMT+81:11 5156570");
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone6);
        org.joda.time.LocalTime localTime9 = localTime7.withMillisOfDay(15);
        org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(0);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.Period period13 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (short) -1, chronology15);
        org.joda.time.Period period17 = period13.plus((org.joda.time.ReadablePeriod) period16);
        int int18 = period16.getDays();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        mutableDateTime10.setHourOfDay(7);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.year();
        mutableDateTime10.setHourOfDay(1);
        mutableDateTime10.setYear((int) '4');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((long) 4);
        org.joda.time.ReadableInstant readableInstant21 = null;
        mutableDateTime20.setDate(readableInstant21);
        mutableDateTime20.setMillis(0L);
        int int25 = mutableDateTime20.getMinuteOfHour();
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        java.lang.Object obj31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval(obj31, chronology32);
        org.joda.time.MutableInterval mutableInterval34 = interval33.toMutableInterval();
        org.joda.time.Chronology chronology35 = mutableInterval34.getChronology();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.Interval interval39 = interval28.withStart((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Interval interval41 = interval39.withEndMillis((long) 17);
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = mutableInterval47.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.halfdayOfDay();
        org.joda.time.DurationField durationField51 = chronology48.halfdays();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 13, chronology48);
        org.joda.time.Interval interval53 = interval39.withChronology(chronology48);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime20.toMutableDateTime(chronology48);
        mutableDateTime54.setMinuteOfHour(0);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        int int8 = property7.getMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.getLocalTime();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) 1964);
        org.joda.time.LocalTime localTime13 = property7.addCopy((long) 1439);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399999 + "'", int8 == 86399999);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.plus(readablePeriod3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfDay();
        mutableDateTime8.setSecondOfDay((int) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.minuteOfHour();
        mutableDateTime8.add((long) 10);
        org.joda.time.DateTime dateTime15 = localTime4.toDateTime((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis(15);
        int int18 = dateTime15.getMillisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime15.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime15.withDayOfYear(66143000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66143000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 51);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int4 = calendar3.getWeekYear();
        calendar3.clear();
        calendar3.setFirstDayOfWeek(2);
        java.lang.String[] strArray19 = new java.lang.String[] { "1970-01-01T00:00:00.013Z", "secondOfDay", "22", "1970", "hi!", "1970-01-01T00:00:00.013Z", "yearOfCentury", "2022-02-22T07:15:50.135Z/2022-02-22T07:15:50.135Z", "2022-02-22T07:15:51.387Z/2022-02-22T07:15:51.387Z", "", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone23);
        org.joda.time.LocalTime localTime26 = localTime24.withMillisOfDay(15);
        org.joda.time.LocalTime localTime28 = localTime26.withHourOfDay(0);
        org.joda.time.LocalTime localTime30 = localTime26.withHourOfDay(0);
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        int int32 = localTime30.getMillisOfSecond();
        org.joda.time.LocalTime localTime34 = localTime30.minusMinutes(10);
        boolean boolean35 = strSet20.remove((java.lang.Object) localTime34);
        boolean boolean36 = calendar3.before((java.lang.Object) localTime34);
        // The following exception was thrown during execution in test generation
        try {
            calendar3.add(59499, 27433877);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 292278994 + "'", int2 == 292278994);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=1970-01-01T00:00:00.042+00:00:00.007/1970-01-01T00:00:00.059+00:00:00.007,offset=292278994,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 100, dateTimeZone3);
        long long7 = dateTimeZone3.convertLocalToUTC(60L, false);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 59, (long) 1980);
        java.lang.Object obj14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj14, chronology15);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        mutablePeriod12.setPeriod(70919999999L, chronology18);
        mutablePeriod12.addYears(31);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight9.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) 100, periodType26);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType30 = periodType29.withDaysRemoved();
        org.joda.time.Period period31 = period28.normalizedStandard(periodType30);
        int int32 = period31.getDays();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromMillisOfDay(10L, chronology39);
        org.joda.time.DurationField durationField43 = chronology39.months();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType33.getField(chronology39);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType33.getDurationType();
        int int46 = period31.get(durationFieldType45);
        mutablePeriod12.set(durationFieldType45, 19);
        mutablePeriod12.setSeconds(270);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 61L + "'", long7 == 61L);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusDays(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.minusMillis((int) (short) 0);
        int int14 = localDateTime2.getDayOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder21 = builder19.clear();
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder24 = builder22.setVariant("");
        java.util.Locale locale25 = builder22.build();
        java.util.Locale.setDefault(locale25);
        org.joda.time.LocalDateTime localDateTime27 = property15.setCopy("607", locale25);
        org.joda.time.DurationField durationField28 = property15.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime30 = property15.addToCopy(1645514220548L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (-6));
        java.lang.String str2 = localTime1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "09:11:18.988" + "'", str2, "09:11:18.988");
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 24);
        org.joda.time.DateTime dateTime3 = dateTime1.plus((-52L));
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.halfdayOfDay();
        org.joda.time.DurationField durationField22 = chronology19.halfdays();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 13, chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) ' ', chronology19);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100, 3, 7, 10, 5, 51, chronology19);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) '#', (long) 52, chronology19);
        org.joda.time.DateTime dateTime27 = dateTime1.toDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        mutablePeriod36.set(durationFieldType37, 2);
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = mutableInterval44.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        int int49 = dateTime48.getMinuteOfDay();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod36, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property51 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime52 = property51.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime53 = property51.getDateTime();
        mutablePeriod31.setPeriod(readableInstant32, (org.joda.time.ReadableInstant) dateTime53);
        java.lang.Object obj56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval(obj56, chronology57);
        org.joda.time.MutableInterval mutableInterval59 = interval58.toMutableInterval();
        org.joda.time.Chronology chronology60 = mutableInterval59.getChronology();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTimeAtMidnight(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtStartOfDay(dateTimeZone64);
        int int66 = dateTime65.getDayOfYear();
        java.lang.Object obj67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval(obj67, chronology68);
        org.joda.time.MutableInterval mutableInterval70 = interval69.toMutableInterval();
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        org.joda.time.MutableInterval mutableInterval75 = interval74.toMutableInterval();
        org.joda.time.Chronology chronology76 = mutableInterval75.getChronology();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) (short) 0, chronology76);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = localDate77.toDateTimeAtMidnight(dateTimeZone78);
        org.joda.time.Interval interval80 = interval69.withStart((org.joda.time.ReadableInstant) dateTime79);
        mutablePeriod31.setPeriod((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime79);
        int int82 = dateTime65.getWeekyear();
        org.joda.time.DateTime dateTime84 = dateTime65.withYearOfEra(6);
        int int85 = dateTime65.getDayOfWeek();
        int int86 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1970 + "'", int82 == 1970);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 7 + "'", int85 == 7);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 1645514244L);
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay2 = property1.withMaximumValue();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay5 = property3.setCopy(45);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusSeconds((-52));
        int int8 = timeOfDay5.getMinuteOfHour();
        org.joda.time.LocalTime localTime9 = timeOfDay5.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(26313188);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26313188 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 45 + "'", int8 == 45);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfMinute();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) 19);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfWeek();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfCentury();
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis(30);
        org.joda.time.ReadableDuration readableDuration20 = null;
        java.lang.Object obj22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval(obj22, chronology23);
        org.joda.time.MutableInterval mutableInterval25 = interval24.toMutableInterval();
        org.joda.time.Chronology chronology26 = mutableInterval25.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        int int30 = dateTime29.getMinuteOfDay();
        int int31 = dateTime29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime29.getZone();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        java.lang.String str35 = periodType34.getName();
        org.joda.time.PeriodType periodType36 = periodType34.withSecondsRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration20, (org.joda.time.ReadableInstant) dateTime29, periodType36);
        java.lang.Object obj39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(obj39, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Chronology chronology43 = mutableInterval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.halfdayOfDay();
        org.joda.time.DurationField durationField46 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime29.toDateTime(chronology43);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((long) 32770, chronology43);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withYear((int) 'x');
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay49.monthOfYear();
        int[] intArray53 = yearMonthDay49.getValues();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay49.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(13);
        org.joda.time.Interval interval58 = yearMonthDay55.toInterval(dateTimeZone57);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime61 = dateTime14.toDateTime(dateTimeZone57);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Years" + "'", str35, "Years");
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 4]");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.Period period15 = new org.joda.time.Period(292278994, 1964, (int) 'x', (-1036830771));
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePeriod) period15, (long) 29);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 29]");
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(obj2, chronology3);
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology6 = mutableInterval5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 13, chronology6);
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology16 = mutableInterval15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getMinuteOfDay();
        int int21 = dateTime19.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        mutableDateTime10.setZone(dateTimeZone22);
        long long25 = dateTimeZone22.previousTransition((long) 1439);
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minus(120L);
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Chronology chronology33 = mutableInterval32.getChronology();
        long long37 = chronology33.add((long) (short) 1, (long) 86399999, (int) '4');
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology33);
        org.joda.time.DurationField durationField39 = chronology33.hours();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = mutableInterval44.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.DateTime dateTime47 = localDate46.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate49 = localDate46.plusDays(70);
        org.joda.time.LocalDate localDate51 = localDate46.withMonthOfYear(2);
        org.joda.time.LocalDate localDate53 = localDate51.withDayOfYear(52);
        org.joda.time.LocalDate.Property property54 = localDate53.weekyear();
        long long56 = chronology33.set((org.joda.time.ReadablePartial) localDate53, (-12L));
        org.joda.time.Period period58 = org.joda.time.Period.days(26360);
        org.joda.time.LocalDate localDate59 = localDate53.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.years();
        mutablePeriod63.set(durationFieldType64, 2);
        java.lang.Object obj68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval(obj68, chronology69);
        org.joda.time.MutableInterval mutableInterval71 = interval70.toMutableInterval();
        org.joda.time.Chronology chronology72 = mutableInterval71.getChronology();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (short) 0, chronology72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTimeAtMidnight(dateTimeZone74);
        int int76 = dateTime75.getMinuteOfDay();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod63, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(readableInstant78, readableInstant79, periodType80);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.years();
        mutablePeriod81.set(durationFieldType82, 2);
        int int85 = mutablePeriod63.indexOf(durationFieldType82);
        java.lang.Object obj86 = null;
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Interval interval88 = new org.joda.time.Interval(obj86, chronology87);
        org.joda.time.MutableInterval mutableInterval89 = interval88.toMutableInterval();
        org.joda.time.Chronology chronology90 = mutableInterval89.getChronology();
        java.lang.String str91 = mutableInterval89.toString();
        mutablePeriod63.setPeriod((org.joda.time.ReadableInterval) mutableInterval89);
        java.lang.String str93 = mutablePeriod63.toString();
        mutablePeriod63.add((long) 32770);
        int int96 = mutablePeriod63.getSeconds();
        int int97 = mutablePeriod63.getMillis();
        boolean boolean98 = localDate59.equals((java.lang.Object) int97);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1439L + "'", long25 == 1439L);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4492799949L + "'", long37 == 4492799949L);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 4406399988L + "'", long56 == 4406399988L);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertNotNull(chronology90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022-02-22T07:23:01.966+00:00:00.013/2022-02-22T07:23:01.966+00:00:00.013" + "'", str91, "2022-02-22T07:23:01.966+00:00:00.013/2022-02-22T07:23:01.966+00:00:00.013");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "P0Y" + "'", str93, "P0Y");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.secondOfMinute();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime(readableInstant18);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int21 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusSeconds(10);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean7 = localDateTime4.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime9.getValue(292271024);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 292271024");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology5 = mutableInterval4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology5);
        org.joda.time.LocalDate localDate11 = dateTime10.toLocalDate();
        int int12 = localDate11.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate11.toDateMidnight();
        org.joda.time.LocalDate.Property property14 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.minuteOfDay();
        java.lang.Object obj19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj19, chronology20);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Chronology chronology23 = mutableInterval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.halfdayOfDay();
        int int27 = dateTimeField25.getMaximumValue((long) 11);
        int int29 = dateTimeField25.getLeapAmount((long) '#');
        mutableDateTime16.setRounding(dateTimeField25);
        int int31 = mutableDateTime16.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        mutableDateTime16.setZone(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate11.toDateTimeAtMidnight(dateTimeZone32);
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Chronology chronology41 = mutableInterval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.DateTime dateTime43 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property44 = dateTime43.secondOfMinute();
        int int45 = property44.getMinimumValueOverall();
        org.joda.time.DateTime dateTime46 = property44.roundCeilingCopy();
        org.joda.time.DateTime dateTime48 = dateTime46.plus((long) 19);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withYear(2000);
        org.joda.time.DateTime dateTime53 = dateTime51.minus((long) 26242);
        boolean boolean54 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.YearMonthDay yearMonthDay55 = dateTime53.toYearMonthDay();
        java.lang.Object obj57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval(obj57, chronology58);
        org.joda.time.MutableInterval mutableInterval60 = interval59.toMutableInterval();
        org.joda.time.Chronology chronology61 = mutableInterval60.getChronology();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 0, chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTimeAtMidnight(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean66 = localDate62.isSupported(dateTimeFieldType65);
        org.joda.time.LocalDate localDate68 = localDate62.minusWeeks(40);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight71 = localDate68.toDateMidnight(dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.withWeekyear(50);
        org.joda.time.YearMonthDay yearMonthDay74 = dateMidnight71.toYearMonthDay();
        java.lang.Object obj76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval(obj76, chronology77);
        org.joda.time.MutableInterval mutableInterval79 = interval78.toMutableInterval();
        org.joda.time.Chronology chronology80 = mutableInterval79.getChronology();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) (short) 0, chronology80);
        org.joda.time.DateTime dateTime82 = localDate81.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property83 = dateTime82.secondOfMinute();
        org.joda.time.DateTime dateTime84 = property83.withMinimumValue();
        org.joda.time.DateTime dateTime85 = property83.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) 11, dateTimeZone87);
        org.joda.time.DateTime dateTime89 = dateTime85.toDateTime(dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight90 = yearMonthDay74.toDateMidnight(dateTimeZone87);
        boolean boolean92 = dateTimeZone87.isStandardOffset(1645514197532L);
        java.util.TimeZone timeZone93 = dateTimeZone87.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime((java.lang.Object) yearMonthDay55, dateTimeZone87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.addCopy((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) -1);
        org.joda.time.LocalTime localTime13 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.addWrapFieldToCopy(100);
        org.joda.time.LocalTime localTime16 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime18 = localTime16.plusHours(26197);
        org.joda.time.LocalTime localTime20 = localTime18.plusMinutes((-431));
        org.joda.time.LocalTime.Property property21 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property21.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = localTime22.toDateTimeToday();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1439, (long) 8);
        org.joda.time.Period period4 = period2.plusMinutes(70);
        org.joda.time.Period period6 = period4.plusMonths((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((int) 'a', (int) (byte) -1, 2, 8, (int) (short) -1, 10, 3, 3);
        org.joda.time.Period period16 = period6.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Period period18 = org.joda.time.Period.hours((int) (byte) 10);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType21 = period18.getFieldType((int) (short) 0);
        org.joda.time.Period period23 = period18.minusSeconds(42);
        org.joda.time.Period period24 = period6.plus((org.joda.time.ReadablePeriod) period18);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        int int3 = localTime2.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime2.getFields();
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfSecond(13);
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property7.addCopy(3);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property7.addWrapFieldToCopy(16);
        org.joda.time.LocalTime localTime14 = property7.roundHalfFloorCopy();
        boolean boolean15 = property7.isLeap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        org.joda.time.Period period1 = org.joda.time.Period.hours(84540015);
        org.joda.time.Period period3 = period1.withYears(32717);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(15);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property9.roundFloorCopy();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("T08:00:00.010");
        java.lang.String str13 = property9.getAsShortText(locale12);
        org.joda.time.LocalTime localTime14 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(localTime14);
    }
}

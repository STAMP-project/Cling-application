import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("53800965");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"53800965\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean5 = property3.isLeap();
        boolean boolean6 = property3.isLeap();
        int int7 = property3.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone9.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int15 = dateTimeZone9.getOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getNameKey((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration19, readableInstant20);
        org.joda.time.Period period23 = period21.withDays((int) (byte) 1);
        org.joda.time.Period period25 = period23.minusWeeks(100);
        org.joda.time.Period period27 = period25.withDays(1);
        org.joda.time.Weeks weeks28 = period27.toStandardWeeks();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.plus((org.joda.time.ReadablePeriod) weeks28);
        int int30 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        mutableDateTime21.setTime(34999200005L);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        int int28 = dateTime26.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str37 = dateTimeFieldType36.getName();
        int int38 = localDateTime30.indexOf(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime30.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime30.minusSeconds((int) '#');
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableDuration44, readableInstant45);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, 1L, periodType49);
        org.joda.time.Period period52 = period50.minusSeconds((-1));
        java.lang.String str53 = period50.toString();
        org.joda.time.Period period54 = period50.toPeriod();
        org.joda.time.PeriodType periodType55 = period50.getPeriodType();
        org.joda.time.Period period56 = period46.normalizedStandard(periodType55);
        org.joda.time.Period period58 = period56.multipliedBy((int) (short) 100);
        int[] intArray60 = chronology43.get((org.joda.time.ReadablePeriod) period56, 2629746000L);
        org.joda.time.DateTime dateTime61 = dateTime26.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Chronology chronology62 = dateTime26.getChronology();
        org.joda.time.Chronology chronology63 = dateTime26.getChronology();
        mutableDateTime21.setMillis((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 41 + "'", int27 == 41);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "clockhourOfDay" + "'", str37, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.099S" + "'", str53, "PT0.099S");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 4, 2, 10, 29, 6, 0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.addMillis(39221019);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.getMutableDateTime();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate5.era();
        org.joda.time.LocalDate localDate9 = localDate5.minusDays(55);
        int int10 = localDate5.size();
        org.joda.time.Chronology chronology11 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Period period6 = period4.minusWeeks(100);
        org.joda.time.Period period8 = period6.withMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Period period23 = period11.plusSeconds(45);
        org.joda.time.Period period24 = period8.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period35 = period30.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Duration duration39 = period34.toDurationTo((org.joda.time.ReadableInstant) instant38);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration39, 39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        int int46 = period44.get(durationFieldType45);
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period44, 54);
        org.joda.time.Period period49 = period24.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DurationFieldType[] durationFieldTypeArray50 = period24.getFieldTypes();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.forFields(durationFieldTypeArray50);
        org.joda.time.PeriodType periodType52 = periodType51.withHoursRemoved();
        org.joda.time.PeriodType periodType53 = periodType52.withMonthsRemoved();
        org.joda.time.PeriodType periodType54 = periodType52.withMinutesRemoved();
        int int55 = periodType52.size();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldTypeArray50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 7 + "'", int55 == 7);
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = property10.setCopy(2);
        org.joda.time.LocalTime localTime15 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property10.addNoWrapToCopy(318);
        org.joda.time.LocalTime localTime19 = property10.setCopy("42");
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 21);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTimeISO();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 1, chronology24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) instant26, periodType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int30 = instant26.get(dateTimeFieldType29);
        java.lang.String str31 = dateTimeFieldType29.getName();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology37);
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType29.getField(chronology37);
        boolean boolean41 = dateTime21.isSupported(dateTimeFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime43 = localTime19.withField(dateTimeFieldType29, 39469866);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39469866 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 900 + "'", int30 == 900);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfDay" + "'", str31, "minuteOfDay");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(149059, 53726991, 53750257, 609);
        int int5 = mutablePeriod4.getYears();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period11.toString();
        int int13 = period11.getDays();
        mutablePeriod4.add((org.joda.time.ReadablePeriod) period11);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.901S" + "'", str12, "PT0.901S");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Period period14 = period7.plusYears(0);
        org.joda.time.Period period16 = period7.withMonths(39267259);
        org.joda.time.Period period18 = period7.minusYears(819);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = dateTimeField9.getAsShortText((long) 8, locale11);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u661f\u671f\u56db" + "'", str12, "\u661f\u671f\u56db");
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = dateTime3.minusYears(0);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        org.joda.time.DateTime dateTime13 = property11.addToCopy(40);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime18.getFields();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period27 = period25.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str36 = dateTimeFieldType35.getName();
        int int37 = localDateTime29.indexOf(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str43 = dateTimeFieldType42.getName();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.property(dateTimeFieldType42);
        int int45 = localDateTime41.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withMillisOfDay(1);
        int int48 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration56 = duration52.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, readableInstant57);
        org.joda.time.Duration duration59 = duration56.toDuration();
        int int60 = duration50.compareTo((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime18.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean63 = localDateTime18.isSupported(dateTimeFieldType62);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology65, locale67, (java.lang.Integer) 10);
        org.joda.time.Chronology chronology71 = dateTimeParserBucket70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType62.getField(chronology71);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType62.getDurationType();
        org.joda.time.DateTime dateTime76 = dateTime13.withFieldAdded(durationFieldType74, 39221019);
        org.joda.time.DateTime dateTime78 = dateTime76.withMillisOfDay(622);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 41 + "'", int4 == 41);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "clockhourOfDay" + "'", str36, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "dayOfMonth" + "'", str43, "dayOfMonth");
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = instant3.get(dateTimeFieldType6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant12 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration10, 0);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration16, (int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getYearOfCentury();
        org.joda.time.Interval interval22 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        int int23 = dateTime20.getDayOfMonth();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 1, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.LocalDate localDate28 = dateTime26.toLocalDate();
        int int29 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime26);
        int int30 = instant12.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime32 = dateTime20.withMillis((long) 53650665);
        org.joda.time.DateTime dateTime34 = dateTime32.plusWeeks(10);
        org.joda.time.DateTime dateTime36 = dateTime32.minusWeeks(7);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 900 + "'", int7 == 900);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(46);
        java.lang.String str6 = property3.getAsString();
        int int7 = property3.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        long long10 = dateTimeField8.roundCeiling((long) 478);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "15" + "'", str6, "15");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3600000L + "'", long10 == 3600000L);
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withYearOfCentury(29);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration29 = duration25.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration33, (int) (short) 100);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getYearOfCentury();
        org.joda.time.Interval interval39 = duration33.toIntervalTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = duration29.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration41 = duration29.toDuration();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period52 = period47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Duration duration56 = period51.toDurationTo((org.joda.time.ReadableInstant) instant55);
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration56, 39);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime43.secondOfMinute();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime43.minuteOfHour();
        int int61 = mutableDateTime43.getYearOfEra();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 1L, periodType64);
        org.joda.time.Period period67 = period65.minusSeconds((-1));
        java.lang.String str68 = period65.toString();
        org.joda.time.Period period69 = period65.toPeriod();
        int int70 = period65.size();
        org.joda.time.Period period72 = period65.plusSeconds(20);
        org.joda.time.PeriodType periodType73 = period72.getPeriodType();
        org.joda.time.Period period74 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime43, periodType73);
        mutableDateTime43.setMinuteOfDay(0);
        org.joda.time.DateTime dateTime77 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) mutableDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime79 = localDateTime22.withDayOfMonth(1973);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1973 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1969 + "'", int61 == 1969);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT0.099S" + "'", str68, "PT0.099S");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTimeISO();
        mutableDateTime1.addHours(4);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.minuteOfDay();
        long long27 = property26.remainder();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 56191L + "'", long27 == 56191L);
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int6 = dateTimeZone0.getOffset((long) (short) 0);
        java.lang.String str8 = dateTimeZone0.getNameKey((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        java.util.Locale locale18 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology16, locale18, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        int int26 = property24.get();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        long long29 = chronology16.set((org.joda.time.ReadablePartial) localDateTime27, (long) 2022);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DurationField durationField32 = chronology16.eras();
        java.util.Locale locale36 = new java.util.Locale("hi!", "clockhourOfDay", "java.io.IOException");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology16, locale36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.util.Locale locale39 = dateTimeParserBucket37.getLocale();
        java.lang.String str40 = dateTimeZone0.getName((long) 56, locale39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str48 = dateTimeFieldType47.getName();
        int int49 = localDateTime41.indexOf(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime41.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime41.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.hourOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str61 = dateTimeFieldType60.getName();
        int int62 = localDateTime54.indexOf(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime54.minusSeconds(0);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 1, chronology66);
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) instant68, periodType69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime41, (org.joda.time.ReadablePartial) localDateTime64, periodType69);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        long long75 = dateTimeZone72.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone72);
        org.joda.time.DateTime dateTime77 = localDateTime41.toDateTime(dateTimeZone72);
        java.util.TimeZone timeZone78 = dateTimeZone72.toTimeZone();
        java.lang.String str80 = dateTimeZone72.getNameKey((long) (short) 0);
        long long83 = dateTimeZone72.convertLocalToUTC((long) (short) -1, false);
        long long85 = dateTimeZone0.getMillisKeepLocal(dateTimeZone72, (long) 53803364);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType88 = localDateTime86.getFieldType(39600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 39600000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645455600000L + "'", long29 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "clockhourOfDay" + "'", str48, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "clockhourOfDay" + "'", str61, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 53803364L + "'", long85 == 53803364L);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.plusYears(47);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        org.joda.time.Period period25 = period22.minusDays(40);
        org.joda.time.Period period27 = period22.minusMillis(348);
        org.joda.time.Period period29 = period22.minusWeeks(53674052);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime14.minus((org.joda.time.ReadablePeriod) period22);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Period period3 = duration1.toPeriod();
        org.joda.time.Seconds seconds4 = duration1.toStandardSeconds();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(13);
        int int13 = localDateTime12.getYear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.weekyear();
        boolean boolean15 = duration1.equals((java.lang.Object) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) boolean15, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) ' ');
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.Period period6 = duration1.toPeriod(chronology5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) ' ');
        int int10 = localDate7.size();
        org.joda.time.LocalDate.Property property11 = localDate7.era();
        org.joda.time.LocalDate localDate12 = property11.roundCeilingCopy();
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.LocalDate localDate15 = localDate12.plusMonths(44);
        boolean boolean16 = duration1.equals((java.lang.Object) 44);
        org.joda.time.Duration duration17 = duration1.toDuration();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) ' ');
        int int21 = localDate18.size();
        org.joda.time.LocalDate.Property property22 = localDate18.era();
        org.joda.time.LocalDate localDate23 = property22.roundCeilingCopy();
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = localDate23.plusMonths(44);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        org.joda.time.Period period34 = period32.minusMillis(1439);
        int[] intArray35 = period34.getValues();
        org.joda.time.Hours hours36 = period34.toStandardHours();
        org.joda.time.LocalDate localDate37 = localDate23.minus((org.joda.time.ReadablePeriod) hours36);
        org.joda.time.DateTime dateTime38 = localDate37.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval39 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        java.lang.Object obj40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(obj40);
        org.joda.time.DateTime.Property property42 = dateTime41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.DateTime dateTime44 = property42.withMinimumValue();
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = property42.getAsShortText(locale45);
        org.joda.time.DateTime dateTime48 = property42.setCopy(53700016);
        org.joda.time.DateTime dateTime50 = property42.addWrapFieldToCopy(99);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) 27);
        org.joda.time.DateTime dateTime54 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration52, 39444709);
        org.joda.time.Duration duration56 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration52, 53677371);
        org.joda.time.Duration duration57 = duration52.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 1, -1538]");
        org.junit.Assert.assertNotNull(hours36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "54042201" + "'", str46, "54042201");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        boolean boolean8 = property6.isLeap();
        org.joda.time.LocalDate localDate9 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = property6.setCopy(47);
        org.joda.time.LocalDate localDate14 = localDate12.plusYears(8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = localDate12.toDateMidnight(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfYear(8);
        org.joda.time.LocalDate.Property property19 = localDate18.era();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale12);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = chronology4.withZone(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(859);
        org.joda.time.DateMidnight dateMidnight20 = localDate17.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate17.minusWeeks(39391192);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(12);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.Period period12 = period10.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate7.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((-292275054));
        org.joda.time.LocalDate localDate17 = localDate13.minusYears(21);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType19 = periodType18.withMonthsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate17, periodType18);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        int int30 = mutablePeriod29.getDays();
        org.joda.time.LocalDate localDate31 = localDate4.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        int int32 = mutablePeriod29.getSeconds();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.099S" + "'", str27, "PT0.099S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        mutableDateTime2.setYear(33);
        org.joda.time.DateTimeField dateTimeField5 = null;
        mutableDateTime2.setRounding(dateTimeField5, 9);
        int int8 = mutableDateTime2.getMonthOfYear();
        org.joda.time.DateTime dateTime9 = mutableDateTime2.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(53768216);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period22 = period17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Duration duration26 = period21.toDurationTo((org.joda.time.ReadableInstant) instant25);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration26, 39);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime13.setZone(dateTimeZone30);
        int int32 = mutableDateTime13.getYearOfEra();
        mutableDateTime13.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime13.toMutableDateTimeISO();
        mutableDateTime13.setMinuteOfDay(47);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) (short) 100, 10L);
        org.joda.time.DurationFieldType[] durationFieldTypeArray41 = mutablePeriod40.getFieldTypes();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.forFields(durationFieldTypeArray41);
        org.joda.time.DurationFieldType durationFieldType43 = null;
        int int44 = periodType42.indexOf(durationFieldType43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) mutableDateTime13, periodType42);
        mutablePeriod45.addHours(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1969 + "'", int32 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(durationFieldTypeArray41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime1.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        mutableDateTime4.add((long) 40);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.Period period18 = period13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration22 = period17.toDurationTo((org.joda.time.ReadableInstant) instant21);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration22, 39);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime9.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime9.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = locale30.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        long long37 = dateTimeZone26.getMillisKeepLocal(dateTimeZone35, 315532800097L);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 31, dateTimeZone26);
        java.lang.String str40 = dateTimeZone26.getShortName((-1511999969L));
        org.joda.time.DateTime dateTime41 = mutableDateTime4.toDateTime(dateTimeZone26);
        int int42 = dateTime41.getMinuteOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.minusHours(30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime41.withDate(518, 39562, 371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39562 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 315532800097L + "'", long37 == 315532800097L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        int int5 = dateTimeZone2.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj0, dateTimeZone2);
        java.lang.String str7 = dateTimeZone2.toString();
        boolean boolean9 = dateTimeZone2.isStandardOffset((long) (-1));
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration25, 39);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.secondOfMinute();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime12.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = locale31.stripExtensions();
        int int33 = property29.getMaximumTextLength(locale32);
        java.lang.String str34 = locale32.getDisplayScript();
        java.lang.String str35 = dateTimeZone2.getName((long) 97, locale32);
        boolean boolean37 = dateTimeZone2.isStandardOffset((long) 203);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "59" + "'", str30, "59");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant5, periodType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = instant5.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withField(dateTimeFieldType8, 39);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusHours(47);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMonths(13);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMonths(39251167);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks(39562);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 900 + "'", int9 == 900);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period10 = period8.withMillis(39251693);
        org.joda.time.Period period12 = period8.plusMinutes((int) (short) 100);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = dateTime14.toLocalDateTime();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        mutableDateTime17.add(3161721603135L);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.hourOfDay();
        org.joda.time.Duration duration21 = period12.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setDayOfYear(596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 596 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 38, 53600069, (int) (short) 10);
        org.joda.time.PeriodType periodType5 = mutablePeriod4.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod4.toMutablePeriod();
        mutablePeriod4.setWeeks(53973480);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        java.lang.String str5 = localDate0.toString();
        org.joda.time.LocalDate localDate7 = localDate0.withYearOfEra(54);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(0L, dateTimeZone9);
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period25 = period20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration29 = period24.toDurationTo((org.joda.time.ReadableInstant) instant28);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration29, 39);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime16.minuteOfHour();
        java.lang.String str34 = property33.getAsShortText();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = locale35.stripExtensions();
        int int37 = property33.getMaximumTextLength(locale36);
        java.lang.String str38 = dateTimeZone9.getName((long) 3, locale36);
        java.util.Locale locale42 = new java.util.Locale("clockhourOfDay", "java.io.IOException", "");
        boolean boolean43 = dateTimeZone9.equals((java.lang.Object) locale42);
        org.joda.time.Interval interval44 = localDate7.toInterval(dateTimeZone9);
        org.joda.time.LocalDate localDate46 = localDate7.minusYears(258);
        org.joda.time.LocalDate.Property property47 = localDate7.yearOfCentury();
        java.lang.String str48 = property47.getAsText();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21" + "'", str5, "2022-02-21");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "59" + "'", str34, "59");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals(locale42.toString(), "clockhourofday_JAVA.IO.IOEXCEPTION");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "54" + "'", str48, "54");
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        int int8 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime.Property property9 = dateTime3.hourOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.centuryOfEra();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property12 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = property12.addToCopy(53638420);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withYearOfCentury(815);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 815 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) '4');
        java.util.Date date16 = localDateTime13.toDate();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date16);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime17.getFields();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 21 10:00:42 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.Period period9 = period7.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate4.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((-292275054));
        org.joda.time.LocalDate localDate14 = localDate12.withYear((int) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 254, (long) 895, chronology15);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, readableInstant6);
        mutablePeriod7.setYears(10);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfEra();
        org.joda.time.Period period17 = new org.joda.time.Period((long) ' ', chronology14);
        mutablePeriod7.mergePeriod((org.joda.time.ReadablePeriod) period17);
        mutablePeriod7.addWeeks(53722178);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod7.copy();
        mutablePeriod21.setPeriod(7782000000L, 417595644L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutablePeriod21);
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.Period period9 = period7.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate4.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((-292275054));
        org.joda.time.LocalDate localDate14 = localDate12.withYear((int) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 254, (long) 895, chronology15);
        mutablePeriod16.setPeriod((long) 906, 240000L);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(22);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.lang.String str8 = dateTimeZone2.getShortName((long) 39236, locale6);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(3600L, dateTimeZone2);
        mutableDateTime9.setYear(54038);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English" + "'", str5, "English");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+22:00" + "'", str8, "+22:00");
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology7.getZone();
        org.joda.time.DurationField durationField15 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.minuteOfDay();
        long long18 = dateTimeField16.remainder((long) 402);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 402L + "'", long18 == 402L);
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.secondOfMinute();
        int int8 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withYearOfEra(717);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 727 + "'", int8 == 727);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.withMillis(3155760000035L);
        org.joda.time.DateTime dateTime8 = dateTime3.withDurationAdded((-7862399999L), 532);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime3.toMutableDateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime3.centuryOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(360206L, 16L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration12, (int) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.Interval interval18 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration19 = duration8.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Hours hours20 = duration8.toStandardHours();
        org.joda.time.Duration duration21 = duration8.toDuration();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 46, periodType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 0L, periodType25, chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod28.copy();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        mutablePeriod28.setPeriod((long) 99, chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.centuryOfEra();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration21, chronology34);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) 20, 0);
        long long5 = duration1.getStandardSeconds();
        org.joda.time.Seconds seconds6 = duration1.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400L + "'", long5 == 86400L);
        org.junit.Assert.assertNotNull(seconds6);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime11 = property9.withMinimumValue();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = property9.getAsShortText(locale12);
        java.util.Locale.Builder builder14 = builder5.setLocale(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter3.withLocale(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.parse("PT23H59M53.686S", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "54042787" + "'", str13, "54042787");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        int int4 = localDateTime0.getDayOfMonth();
        int int5 = localDateTime0.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        int int10 = dateTimeField7.getLeapAmount((long) 39471231);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.property(dateTimeFieldType13);
        int int16 = localDateTime12.getMinuteOfHour();
        int int17 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusMillis((int) '4');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 54007830 + "'", int17 == 54007830);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant5, periodType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = instant5.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withField(dateTimeFieldType8, 39);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        int int14 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks(22);
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period28 = period23.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Duration duration32 = period27.toDurationTo((org.joda.time.ReadableInstant) instant31);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration32, 39);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime19.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime19.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime17.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime38.plus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(53644753);
        java.lang.String str43 = dateTime40.toString();
        org.joda.time.DateTime dateTime45 = dateTime40.minus((long) (-19044));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 900 + "'", int9 == 900);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-21T00:38:50.876Z" + "'", str43, "2022-02-21T00:38:50.876Z");
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTimeISO();
        mutableDateTime1.addHours(4);
        boolean boolean27 = mutableDateTime1.isBefore(893L);
        org.joda.time.Instant instant28 = mutableDateTime1.toInstant();
        java.lang.Object obj29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        boolean boolean37 = property34.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getSecondOfMinute();
        int int41 = dateTime39.getYearOfEra();
        int int42 = property34.getDifference((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime39);
        mutablePeriod43.setPeriod((long) 39221019, (long) (-1));
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str55 = dateTimeFieldType54.getName();
        int int56 = localDateTime48.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime48.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime48.minusSeconds((int) '#');
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.Chronology chronology62 = chronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        mutablePeriod43.setPeriod((long) 2922789, chronology62);
        org.joda.time.MutableDateTime mutableDateTime66 = instant28.toMutableDateTime(chronology62);
        mutableDateTime66.setHourOfDay(0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 42 + "'", int40 == 42);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "clockhourOfDay" + "'", str55, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(mutableDateTime66);
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(1);
        int int21 = localDateTime20.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime20.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withCenturyOfEra(6);
        int int26 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.year();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = dateTimeFormatter2.parseLocalDate("2022-02-21T15:00:32.769Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 45, (int) '4');
        java.util.Set<java.lang.Character> charSet31 = locale26.getExtensionKeys();
        java.util.Locale locale32 = locale26.stripExtensions();
        java.lang.String str33 = locale32.getISO3Country();
        int int34 = property22.getMaximumTextLength(locale32);
        org.joda.time.MutableDateTime mutableDateTime35 = property22.roundFloor();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths(41);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(0L, dateTimeZone9);
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period25 = period20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration29 = period24.toDurationTo((org.joda.time.ReadableInstant) instant28);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration29, 39);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime16.minuteOfHour();
        java.lang.String str34 = property33.getAsShortText();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = locale35.stripExtensions();
        int int37 = property33.getMaximumTextLength(locale36);
        java.lang.String str38 = dateTimeZone9.getName((long) 3, locale36);
        org.joda.time.DateTime dateTime39 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.LocalDate localDate41 = localDate7.plusDays(7);
        org.joda.time.DateTime dateTime42 = localDate41.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "59" + "'", str34, "59");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        int int13 = dateTimeField8.getLeapAmount((long) (byte) 10);
        org.joda.time.DurationField durationField14 = dateTimeField8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        boolean boolean20 = dateTime18.isEqualNow();
        int int21 = dateTime18.getDayOfYear();
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        long long23 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        int int24 = property16.getMaximumValue();
        java.util.Locale locale25 = null;
        java.lang.String str26 = property16.getAsText(locale25);
        org.joda.time.LocalDateTime localDateTime28 = property16.addToCopy(12);
        int int29 = localDateTime28.getYearOfCentury();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, locale30);
        java.lang.String str32 = dateTimeField8.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 43 + "'", int19 == 43);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc6d4" + "'", str26, "\uc6d4");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2023" + "'", str31, "2023");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DateTimeField[year]" + "'", str32, "DateTimeField[year]");
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(12);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.Period period12 = period10.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate7.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((-292275054));
        org.joda.time.LocalDate localDate17 = localDate13.minusYears(21);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType19 = periodType18.withMonthsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate17, periodType18);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        int int30 = mutablePeriod29.getDays();
        org.joda.time.LocalDate localDate31 = localDate4.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        int int32 = localDate31.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField34 = localDate31.getField(53739559);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53739559");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.099S" + "'", str27, "PT0.099S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Period period14 = period7.plusYears(0);
        org.joda.time.Period period15 = period14.toPeriod();
        org.joda.time.Period period17 = period15.withHours(72);
        org.joda.time.Period period19 = period15.withMonths(39557783);
        int int20 = period19.getHours();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) ' ');
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.minuteOfDay();
        mutableDateTime1.setChronology(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.days();
        long long29 = durationField26.subtract(0L, (-625));
        int int32 = durationField26.getValue(50363113L, 11855L);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 54000000000L + "'", long29 == 54000000000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        java.lang.String[] strArray38 = new java.lang.String[] { "PT10H100M97.021S", "java.io.IOException", "English (United Kingdom)", "dayOfMonth", "de", "2022-02-21T14:53:38.450Z", "", "2022-02-21T10:53:40.615", "hi!", "DateTimeField[year]", "en_US", "PT86400S", "2022-02-21T10:53:40.615", "", "dayOfMonth", "minuteOfDay", "1970", "UTC", "2022-02-21T15:00:00.000", "2022-02-21T10:53:40.615", "DateTimeField[year]", "February", "en-US", "14", "2022-02-21T15:00:00.000", "PT86400S", "German", "2022-02-21T14:53:55.782Z", "PT86400S", "PT10H100M97.021S", "clockhourOfDay", "59", "59", "1970", "Property[hourOfDay]", "2022-02-21T15:00:00.000", "59", "PT0.099S" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        boolean boolean42 = strSet39.add("DateTimeField[year]");
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet39.spliterator();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period52 = period47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Duration duration56 = period51.toDurationTo((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Instant instant58 = instant55.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime59 = instant55.toDateTime();
        org.joda.time.Instant instant61 = instant55.withMillis(0L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        int int67 = localDateTime63.getDayOfMonth();
        int int68 = localDateTime63.getMinuteOfHour();
        org.joda.time.Chronology chronology69 = localDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.halfdayOfDay();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = locale71.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 39391192, chronology69, locale71);
        org.joda.time.MutableDateTime mutableDateTime74 = instant61.toMutableDateTime(chronology69);
        boolean boolean75 = strSet39.contains((java.lang.Object) instant61);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 21 + "'", int67 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getName();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "minuteOfHour" + "'", str20, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime1.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, (int) (short) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime5, periodType12);
        mutableDateTime1.setTime((long) 37);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        int int20 = dateTime18.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str26 = mutablePeriod25.toString();
        org.joda.time.DateTime dateTime27 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, dateTimeZone30);
        long long34 = dateTimeZone30.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 4, dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime27.withFields((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime36);
        int int39 = dateTime36.getHourOfDay();
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType12);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 43 + "'", int19 == 43);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT10H100M97.021S" + "'", str26, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(6);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        mutablePeriod24.setYears((int) '#');
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod24.add((long) 1, chronology28);
        mutablePeriod24.addDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod24.copy();
        mutablePeriod33.setDays(17);
        int int36 = mutablePeriod33.getMonths();
        mutablePeriod33.add((long) 53639537);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusMillis((int) (byte) 0);
        int int50 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime43.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusYears(9722);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(readableDuration58, readableInstant59);
        org.joda.time.Period period62 = period60.withDays((int) (byte) 1);
        org.joda.time.Period period64 = period62.minusWeeks(100);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((-60494601599990L));
        org.joda.time.MutablePeriod mutablePeriod67 = mutablePeriod66.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod66.add(durationFieldType68, 1970);
        int int71 = period62.get(durationFieldType68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime56.withFieldAdded(durationFieldType68, 654);
        java.lang.String str74 = durationFieldType68.getName();
        boolean boolean75 = mutablePeriod33.isSupported(durationFieldType68);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "minutes" + "'", str74, "minutes");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        mutablePeriod3.setSeconds((int) 'a');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant23 = instant20.plus((long) (byte) -1);
        org.joda.time.Instant instant26 = instant23.withDurationAdded(1L, (int) (short) -1);
        org.joda.time.Chronology chronology27 = instant23.getChronology();
        mutablePeriod3.setPeriod((long) 11, chronology27);
        mutablePeriod3.addDays(0);
        int int31 = mutablePeriod3.getYears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 1L, periodType43);
        org.joda.time.Period period45 = period40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Duration duration49 = period44.toDurationTo((org.joda.time.ReadableInstant) instant48);
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration49, 39);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime36.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime36.setZone(dateTimeZone53);
        int int55 = mutableDateTime36.getYearOfEra();
        mutableDateTime36.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime36.toMutableDateTimeISO();
        mutableDateTime58.addHours(21);
        mutableDateTime58.addSeconds(37);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Chronology chronology68 = instant67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.eras();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology68);
        org.joda.time.DateTimeField dateTimeField71 = chronology68.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = dateTimeField71.getType();
        int int73 = mutableDateTime58.get(dateTimeFieldType72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime34.property(dateTimeFieldType72);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType72.getDurationType();
        int int76 = mutablePeriod3.indexOf(durationFieldType75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        int int78 = localDate77.getDayOfMonth();
        org.joda.time.Chronology chronology79 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(0L, dateTimeZone81);
        int int84 = dateTimeZone81.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str85 = dateTimeZone81.getID();
        org.joda.time.DateTime dateTime86 = localDate77.toDateTimeAtCurrentTime(dateTimeZone81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((java.lang.Object) durationFieldType75, dateTimeZone81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1969 + "'", int55 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 21 + "'", int78 == 21);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "UTC" + "'", str85, "UTC");
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.addMillis(39221019);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration21, 894);
        int int24 = mutableDateTime1.getMillisOfSecond();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 210 + "'", int24 == 210);
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekOfWeekyear();
        int int19 = dateTimeField18.getMaximumValue();
        org.joda.time.DurationField durationField20 = dateTimeField18.getLeapDurationField();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.Period period28 = period26.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate23.plus((org.joda.time.ReadablePeriod) period28);
        int int30 = localDate29.getDayOfMonth();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfCentury((int) '4');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate29.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate29.withYearOfEra(62);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        java.util.Locale locale44 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology42, locale44, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        int int52 = property50.get();
        org.joda.time.LocalDateTime localDateTime53 = property50.roundHalfFloorCopy();
        long long55 = chronology42.set((org.joda.time.ReadablePartial) localDateTime53, (long) 2022);
        org.joda.time.DateTimeField dateTimeField56 = chronology42.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology42.minuteOfHour();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 1L, periodType60);
        org.joda.time.Period period63 = period61.minusSeconds((-1));
        java.lang.String str64 = period61.toString();
        org.joda.time.Period period65 = period61.negated();
        int[] intArray67 = chronology42.get((org.joda.time.ReadablePeriod) period65, (long) 1969);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localDate36, 53887800, intArray67, 40475569);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53887800");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 15 + "'", int52 == 15);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645455600000L + "'", long55 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0.099S" + "'", str64, "PT0.099S");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 1, 969]");
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        int int8 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) ' ');
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate19 = localDate13.withFieldAdded(durationFieldType17, (int) (byte) 100);
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths(55);
        boolean boolean22 = dateTime6.equals((java.lang.Object) localDate19);
        org.joda.time.LocalDate localDate24 = localDate19.withWeekOfWeekyear(50);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 1, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTime();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 1, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTime();
        int int35 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration37, 10);
        java.lang.String str41 = duration26.toString();
        org.joda.time.Period period42 = duration26.toPeriod();
        org.joda.time.format.PeriodFormatter periodFormatter43 = null;
        java.lang.String str44 = period42.toString(periodFormatter43);
        org.joda.time.LocalDate localDate46 = localDate19.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 884);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = localDate46.withDayOfWeek(1381);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1381 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT86400S" + "'", str41, "PT86400S");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT24H" + "'", str44, "PT24H");
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str23 = dateTimeZone21.getNameKey((long) (byte) 0);
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period33 = period28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Duration duration37 = period32.toDurationTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period46 = period41.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Duration duration50 = period45.toDurationTo((org.joda.time.ReadableInstant) instant49);
        boolean boolean51 = instant36.isEqual((org.joda.time.ReadableInstant) instant49);
        boolean boolean52 = mutableDateTime20.isEqual((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology53 = instant36.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears(1);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(653);
        java.lang.Object obj6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(0L, dateTimeZone8);
        int int11 = dateTimeZone8.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj6, dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = property10.setCopy(2);
        org.joda.time.LocalTime localTime15 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property10.addNoWrapToCopy(318);
        org.joda.time.LocalTime localTime19 = property10.setCopy("42");
        java.lang.String str20 = localTime19.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "15:00:42.428" + "'", str20, "15:00:42.428");
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant11.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        boolean boolean20 = dateTime15.isEqual((long) 53);
        org.joda.time.DateTime dateTime22 = dateTime15.withEra(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime22.withYearOfCentury(226);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 226 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.addWrapField((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = property20.roundHalfFloor();
        int int24 = mutableDateTime23.getDayOfYear();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration34, (int) (short) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getYearOfCentury();
        org.joda.time.Interval interval40 = duration34.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration30.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Period period44 = period42.withDays(1439);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        int int50 = dateTime49.getSecondOfMinute();
        boolean boolean51 = dateTime49.isEqualNow();
        int int52 = dateTime49.getDayOfYear();
        org.joda.time.Chronology chronology53 = dateTime49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.year();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withFieldAdded(durationFieldType59, 14);
        boolean boolean62 = period44.isSupported(durationFieldType59);
        mutableDateTime23.add(durationFieldType59, 53777457);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 91 + "'", int24 == 91);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 43 + "'", int50 == 43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        long long6 = duration5.getStandardHours();
        long long7 = duration5.getStandardDays();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withMinutesRemoved();
        org.joda.time.Period period11 = duration5.toPeriod(periodType8);
        org.joda.time.Period period13 = period11.multipliedBy(39549797);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 24L + "'", long6 == 24L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration5.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 1, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 1, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        int int25 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType27 = periodType26.withDaysRemoved();
        org.joda.time.Period period28 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType26);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        boolean boolean34 = property32.isLeap();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale36.getCountry();
        java.lang.String str39 = property32.getAsShortText(locale36);
        org.joda.time.LocalDateTime localDateTime41 = property32.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime42 = dateTime23.withFields((org.joda.time.ReadablePartial) localDateTime41);
        int int43 = dateTime42.getDayOfMonth();
        org.joda.time.DateTime dateTime45 = dateTime42.plusMillis(53803364);
        int int46 = dateTime42.getYear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CA" + "'", str38, "CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "15" + "'", str39, "15");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 21 + "'", int43 == 21);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology7, locale8);
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period15 = period14.normalizedStandard();
        int[] intArray17 = chronology7.get((org.joda.time.ReadablePeriod) period15, (long) (short) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology7.millis();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        int int28 = localDateTime20.indexOf(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime20.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str34 = dateTimeFieldType33.getName();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.property(dateTimeFieldType33);
        int int36 = localDateTime32.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str44 = dateTimeFieldType43.getName();
        int int45 = localDateTime37.indexOf(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime37.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime37.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str51 = dateTimeFieldType50.getName();
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.property(dateTimeFieldType50);
        int int53 = localDateTime49.getMinuteOfHour();
        int int54 = localDateTime49.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime57 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.yearOfEra();
        org.joda.time.Period period60 = org.joda.time.Period.millis(100);
        org.joda.time.Period period61 = period60.negated();
        int int62 = period60.getHours();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime56.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 39297267);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusDays(39282046);
        java.lang.Object obj67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(obj67);
        boolean boolean69 = dateTime68.isBeforeNow();
        org.joda.time.DateTime dateTime72 = dateTime68.withDurationAdded((long) 75596, 116);
        int int73 = dateTime72.getHourOfDay();
        org.joda.time.DateTime dateTime74 = localDateTime64.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime64.withMinuteOfHour((int) '#');
        int[] intArray78 = chronology7.get((org.joda.time.ReadablePartial) localDateTime64, (long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime64.withDayOfWeek(668);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 668 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 43 + "'", int4 == 43);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "clockhourOfDay" + "'", str27, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "dayOfMonth" + "'", str34, "dayOfMonth");
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "clockhourOfDay" + "'", str44, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "dayOfMonth" + "'", str51, "dayOfMonth");
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 54008631 + "'", int54 == 54008631);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 17 + "'", int73 == 17);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 1]");
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime dateTime22 = dateTime1.plusDays(22);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        boolean boolean31 = property28.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        int int35 = dateTime33.getYearOfEra();
        int int36 = property28.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime40 = dateTime33.withDurationAdded((long) (byte) 0, 22);
        boolean boolean41 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime1.plusMillis(39469866);
        java.lang.Object obj44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(0L, dateTimeZone46);
        int int49 = dateTimeZone46.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(obj44, dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime43.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime51.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 43 + "'", int34 == 43);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("Koordinierte Universalzeit");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Koordinierte Universalzeit\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) '4');
        java.util.Date date16 = localDateTime13.toDate();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period25 = period20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration29 = period24.toDurationTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Period period31 = period24.plusYears(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime13.plus((org.joda.time.ReadablePeriod) period31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfCentury(75596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75596 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 21 10:00:43 GMT 2022");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(0L, dateTimeZone9);
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj7, dateTimeZone9);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 40, dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(39267259, 897, 43180006, 478, 21600000, 1431020, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 478 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime6.setWeekyear(19);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (byte) 0);
        long long17 = dateTimeField15.roundHalfEven((long) 1);
        long long20 = dateTimeField15.add((long) '#', (long) 100);
        int int22 = dateTimeField15.getMinimumValue(31536000000L);
        mutableDateTime6.setRounding(dateTimeField15);
        int int24 = mutableDateTime6.getYear();
        java.util.GregorianCalendar gregorianCalendar25 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter28.getParser();
        java.lang.Integer int30 = dateTimeFormatter28.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter28.getPrinter();
        boolean boolean32 = dateTimeFormatter28.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter28.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone34.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone34);
        int int40 = dateTimeZone34.getOffset((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter28.withZone(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = mutableDateTime6.toString(dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3L + "'", long5 == 3L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3155760000035L + "'", long20 == 3155760000035L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-292275054) + "'", int22 == (-292275054));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(dateTimePrinter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        int int8 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration12 = duration10.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 1, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 1, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        int int21 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration25 = duration23.toDuration();
        org.joda.time.Duration duration27 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration25, 53644753);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period38 = period33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Duration duration42 = period37.toDurationTo((org.joda.time.ReadableInstant) instant41);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration42, 39);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime29.yearOfEra();
        mutableDateTime29.setDayOfYear((int) ' ');
        mutableDateTime29.addHours(11);
        java.lang.String str50 = mutableDateTime29.toString();
        org.joda.time.Interval interval51 = duration27.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969-02-02T10:59:56.191Z" + "'", str50, "1969-02-02T10:59:56.191Z");
        org.junit.Assert.assertNotNull(interval51);
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration9 = duration1.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Seconds seconds10 = duration1.toStandardSeconds();
        org.joda.time.PeriodType periodType11 = seconds10.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(6, 0);
        org.joda.time.LocalTime localTime4 = localTime2.plusMinutes(3);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds(86396);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 46, periodType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 0L, periodType10, chronology12);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.LocalTime localTime16 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, 0);
        org.joda.time.LocalTime localTime18 = localTime16.plusMinutes(856);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 39221019);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(7269640);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7269640 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.DateTime dateTime8 = dateTime1.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration12, (int) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.Interval interval18 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime16);
        int int19 = duration7.compareTo((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Period period23 = duration21.toPeriod();
        int int24 = duration7.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period25 = duration7.toPeriod();
        org.joda.time.Period period27 = period25.minusHours(6748930);
        int int29 = period25.getValue(0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 43 + "'", int2 == 43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        int int9 = property1.getMaximumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property1.getAsText(locale10);
        int int12 = property1.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime14 = property1.addWrapFieldToCopy(46);
        java.lang.String str15 = property1.getAsShortText();
        org.joda.time.LocalDateTime localDateTime16 = property1.roundHalfEvenCopy();
        java.lang.String str17 = property1.getAsString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 43 + "'", int4 == 43);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc6d4" + "'", str11, "\uc6d4");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc6d4" + "'", str15, "\uc6d4");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2" + "'", str17, "2");
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.dayOfWeek();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        java.util.Locale locale27 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology25, locale27, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        int int35 = property33.get();
        org.joda.time.LocalDateTime localDateTime36 = property33.roundHalfFloorCopy();
        long long38 = chronology25.set((org.joda.time.ReadablePartial) localDateTime36, (long) 2022);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DurationField durationField41 = chronology25.eras();
        java.util.Locale locale45 = new java.util.Locale("hi!", "clockhourOfDay", "java.io.IOException");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology25, locale45);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone47);
        long long51 = dateTimeZone47.adjustOffset((long) 655, true);
        java.lang.String str53 = dateTimeZone47.getName(32054400010L);
        long long55 = dateTimeZone47.nextTransition(725846400010L);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645455600000L + "'", long38 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 655L + "'", long51 == 655L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 725846400010L + "'", long55 == 725846400010L);
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(obj0);
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        int int10 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        long long16 = duration15.getMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration22 = duration18.withDurationAdded((long) 38, (int) 'a');
        int int23 = duration15.compareTo((org.joda.time.ReadableDuration) duration22);
        long long24 = duration15.getMillis();
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        boolean boolean37 = dateTime26.isBeforeNow();
        org.joda.time.DateTime.Property property38 = dateTime26.weekOfWeekyear();
        int int39 = dateTime26.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property40 = dateTime26.weekyear();
        org.joda.time.DateTime dateTime42 = dateTime26.withMillisOfDay(46);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(0L, dateTimeZone45);
        mutableDateTime46.setYear(33);
        org.joda.time.DateTimeField dateTimeField49 = null;
        mutableDateTime46.setRounding(dateTimeField49, 9);
        int int52 = mutableDateTime46.getMonthOfYear();
        org.joda.time.DateTime dateTime53 = mutableDateTime46.toDateTimeISO();
        org.joda.time.Chronology chronology54 = mutableDateTime46.getChronology();
        org.joda.time.Duration duration55 = period43.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime46);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86500000L + "'", long16 == 86500000L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86500000L + "'", long24 == 86500000L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        java.lang.String str22 = periodType20.getName();
        org.joda.time.PeriodType periodType23 = periodType20.withHoursRemoved();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        java.util.Locale locale30 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology28, locale30, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale36);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        org.joda.time.Chronology chronology40 = chronology28.withZone(dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 39246272, periodType20, chronology28);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(859, 53644753, 2023, 279, (-419), 39305775, 0, 86399, periodType20);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Standard" + "'", str22, "Standard");
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withWeekyear((int) (short) 10);
        int int20 = localDateTime19.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withSecondOfMinute(39);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withSecondOfMinute(34);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.months();
        boolean boolean26 = localDateTime22.equals((java.lang.Object) durationFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusSeconds(39);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.secondOfMinute();
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration46, (int) (short) 100);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.Interval interval52 = duration46.toIntervalTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = duration42.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration64 = duration56.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Seconds seconds65 = duration56.toStandardSeconds();
        boolean boolean66 = duration53.isEqual((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime36.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime22, (org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime22.minusSeconds(279);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-23T19:00:04.181+52:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-23T19:00:04.181+52:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(478);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale11);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology29, locale31, (java.lang.Integer) 10);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale38 = java.util.Locale.UK;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale11, locale15, locale17, locale21, locale24, locale25, locale27, locale31, locale35, locale37, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList40, filteringMode42);
        boolean boolean44 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        boolean boolean47 = strSet2.remove((java.lang.Object) duration46);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration56 = duration52.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration60 = duration52.plus((org.joda.time.ReadableDuration) duration58);
        boolean boolean61 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration63 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration52, 32);
        org.joda.time.Duration duration65 = duration46.minus(86500L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 1, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime68.toDateTime();
        int int70 = dateTime68.getYear();
        int int71 = dateTime68.getSecondOfDay();
        org.joda.time.DateTime dateTime73 = dateTime68.minusMillis(97);
        org.joda.time.DateTime dateTime75 = dateTime68.withMillis(1645455600000L);
        org.joda.time.DateTime.Property property76 = dateTime68.year();
        org.joda.time.Interval interval77 = duration46.toIntervalTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.LocalTime localTime78 = dateTime68.toLocalTime();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period(readableDuration79, readableInstant80);
        org.joda.time.Period period83 = period81.withDays((int) (byte) 1);
        org.joda.time.Period period85 = period83.minusWeeks(100);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((-60494601599990L));
        org.joda.time.MutablePeriod mutablePeriod88 = mutablePeriod87.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType89 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod87.add(durationFieldType89, 1970);
        int int92 = period83.get(durationFieldType89);
        org.joda.time.LocalTime localTime94 = localTime78.withFieldAdded(durationFieldType89, 72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "deu" + "'", str20, "deu");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(mutablePeriod88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(localTime94);
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant3.toMutableDateTimeISO();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration19 = duration11.plus((org.joda.time.ReadableDuration) duration17);
        boolean boolean20 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        long long21 = duration11.getStandardMinutes();
        org.joda.time.Instant instant22 = instant3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutableDateTime mutableDateTime23 = instant3.toMutableDateTimeISO();
        mutableDateTime23.add(129383503200000L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getSecondOfMinute();
        boolean boolean30 = dateTime28.isEqualNow();
        int int31 = dateTime28.getDayOfYear();
        org.joda.time.Chronology chronology32 = dateTime28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (-3268332), chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfYear();
        long long38 = chronology32.add(82800004L, (long) (byte) 0, 86399999);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.monthOfYear();
        long long42 = dateTimeField39.getDifferenceAsLong((long) 22, (-41907196799950L));
        mutableDateTime23.setRounding(dateTimeField39);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1440L + "'", long21 == 1440L);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 44 + "'", int29 == 44);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 82800004L + "'", long38 == 82800004L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 15935L + "'", long42 == 15935L);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1973-05-31T23:59:56.191Z");
        mutableDateTime1.setTime((long) 846);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay((-17251129));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17251129 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant11.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        boolean boolean20 = dateTime15.isEqual((long) 53);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.DateTime dateTime25 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-292275054));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(0L, dateTimeZone27);
        mutableDateTime28.addMillis(50);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime28);
        mutablePeriod31.addYears(53689989);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) ' ');
        org.joda.time.Chronology chronology38 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.minuteOfHour();
        org.joda.time.DurationField durationField41 = chronology38.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.minuteOfDay();
        java.lang.String str43 = chronology38.toString();
        mutablePeriod31.setPeriod(3L, chronology38);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime49 = property46.set(0);
        org.joda.time.DateTime dateTime50 = mutableDateTime49.toDateTime();
        org.joda.time.Duration duration51 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime49);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration51);
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.Period period7 = org.joda.time.Period.millis(100);
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant9, readableInstant10, periodType11);
        mutablePeriod12.setYears((int) '#');
        org.joda.time.Chronology chronology16 = null;
        mutablePeriod12.add((long) 1, chronology16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        mutablePeriod12.setPeriod(readableInterval18);
        mutablePeriod12.setMillis((int) '4');
        org.joda.time.Period period22 = period8.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Period period23 = mutablePeriod12.toPeriod();
        org.joda.time.LocalDate localDate25 = localDate5.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 1970);
        org.joda.time.DateTime dateTime26 = localDate25.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime28 = dateTime26.minus((long) 53772966);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.property(dateTimeFieldType13);
        int int16 = localDateTime12.getMinuteOfHour();
        org.joda.time.DateTime dateTime17 = localDateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, dateTimeZone19);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone19);
        java.lang.String str26 = dateTimeZone19.getName((long) (short) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime28.toString(dateTimeFormatter30);
        org.joda.time.DateTime dateTime33 = dateTime28.plusMonths(86396191);
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded((long) 23, 21);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        boolean boolean38 = dateTimeZone19.equals((java.lang.Object) dateTime36);
        org.joda.time.DateTime dateTime39 = localDateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T15:00:44.321Z" + "'", str31, "2022-02-21T15:00:44.321Z");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration5.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Hours hours17 = duration5.toStandardHours();
        org.joda.time.Duration duration18 = duration5.toDuration();
        org.joda.time.Duration duration20 = duration18.minus(360206L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(86400L, periodType24);
        org.joda.time.PeriodType periodType28 = periodType24.withDaysRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str31 = dateTimeFieldType30.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        java.util.Locale locale38 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology36, locale38, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        int int46 = property44.get();
        org.joda.time.LocalDateTime localDateTime47 = property44.roundHalfFloorCopy();
        long long49 = chronology36.set((org.joda.time.ReadablePartial) localDateTime47, (long) 2022);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField52 = chronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType30.getField(chronology36);
        java.lang.String str54 = chronology36.toString();
        org.joda.time.Period period55 = duration20.toPeriod(periodType28, chronology36);
        java.lang.String str56 = period55.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "secondOfDay" + "'", str31, "secondOfDay");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645455600000L + "'", long49 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[UTC]" + "'", str54, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT23H54M3.480S" + "'", str56, "PT23H54M3.480S");
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMonths(86396191);
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) 23, 21);
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        boolean boolean16 = dateTime14.isEqualNow();
        int int17 = dateTime14.getDayOfYear();
        org.joda.time.Chronology chronology18 = dateTime14.getChronology();
        long long19 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime20 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear(9);
        org.joda.time.DateTime dateTime27 = dateTime9.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.DateTime dateTime30 = dateTime27.plusMinutes(53726991);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillis(168L);
        org.joda.time.DateTime dateTime34 = dateTime30.plusDays(96);
        long long35 = dateTime34.getMillis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T15:00:44.382Z" + "'", str4, "2022-02-21T15:00:44.382Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 44 + "'", int15 == 44);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-55775084895618L) + "'", long35 == (-55775084895618L));
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = null;
        java.lang.String str5 = nameProvider0.getName(locale2, "DateTimeField[year]", "minuteOfDay");
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.util.Locale.setDefault(category6, locale12);
        java.lang.String str15 = locale12.getDisplayCountry();
        java.lang.String str18 = nameProvider0.getShortName(locale12, "PT10H100M97.021S", "57");
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = locale19.getVariant();
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.lang.String str25 = nameProvider0.getName(locale19, "Property[millisOfSecond]", "2022-02-01T00:00:00.000");
        java.util.Locale locale27 = new java.util.Locale("2022-02-21T14:57:48.630Z");
        java.lang.String str28 = locale27.getCountry();
        java.lang.String str31 = nameProvider0.getShortName(locale27, "en_CA", "10:55:52.575");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "15" + "'", str13, "15");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United States" + "'", str15, "United States");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko" + "'", str20, "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-21t14:57:48.630z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property4.setCopy((int) ' ');
        org.joda.time.Instant instant8 = org.joda.time.Instant.parse("14");
        int int9 = property4.compareTo((org.joda.time.ReadableInstant) instant8);
        org.joda.time.LocalDateTime localDateTime11 = property4.setCopy(39243612);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusDays(164);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.weekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        int int21 = localDateTime13.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusSeconds(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 1, chronology25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) instant27, periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime0, (org.joda.time.ReadablePartial) localDateTime23, periodType28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = localDateTime0.toDateTime(dateTimeZone31);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        timeZone37.setRawOffset((int) (byte) 100);
        int int40 = timeZone37.getRawOffset();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfDay" + "'", str20, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.DateTime dateTime10 = dateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.DateTime.Property property11 = dateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime1.toMutableDateTimeISO();
        int int13 = dateTime1.getMinuteOfDay();
        int int14 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int16 = dateTime1.get(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 44 + "'", int2 == 44);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT10H100M97.021S" + "'", str9, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 900 + "'", int13 == 900);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 570 + "'", int14 == 570);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54044 + "'", int16 == 54044);
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        mutableDateTime1.addYears(3);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) 38, (int) 'a');
        long long26 = duration21.getStandardMinutes();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime1.toMutableDateTimeISO();
        int int29 = mutableDateTime28.getMonthOfYear();
        long long30 = mutableDateTime28.getMillis();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1440L + "'", long26 == 1440L);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 94780796191L + "'", long30 == 94780796191L);
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfMonth();
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        java.util.Locale locale41 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology39, locale41, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField50 = localDateTime48.getField((int) (byte) 0);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = dateTimeField50.getAsShortText((long) (byte) 1, locale52);
        java.lang.String str54 = locale41.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField33.getAsShortText(41, locale41);
        int int56 = mutableDateTime23.get(dateTimeField33);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime23.centuryOfEra();
        mutableDateTime23.setMillis(26L);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime23.yearOfCentury();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (United Kingdom)" + "'", str54, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "41" + "'", str55, "41");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime dateTime22 = dateTime1.plusDays(22);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        boolean boolean31 = property28.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        int int35 = dateTime33.getYearOfEra();
        int int36 = property28.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime40 = dateTime33.withDurationAdded((long) (byte) 0, 22);
        boolean boolean41 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime1.plusMillis(39469866);
        java.lang.Object obj44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(0L, dateTimeZone46);
        int int49 = dateTimeZone46.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(obj44, dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime43.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime53 = dateTime51.withYear(504);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 44 + "'", int34 == 44);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        boolean boolean6 = dateTime4.isEqualNow();
        int int7 = dateTime4.getDayOfYear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology8.hours();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(0L, chronology8);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime23 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withYear(53644753);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField32 = localDateTime30.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime30.getFields();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime40 = localDateTime30.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str48 = dateTimeFieldType47.getName();
        int int49 = localDateTime41.indexOf(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime41.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime41.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str55 = dateTimeFieldType54.getName();
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.property(dateTimeFieldType54);
        int int57 = localDateTime53.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.withMillisOfDay(1);
        int int60 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period65 = duration64.toPeriod();
        org.joda.time.Duration duration68 = duration64.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, readableInstant69);
        org.joda.time.Duration duration71 = duration68.toDuration();
        int int72 = duration62.compareTo((org.joda.time.ReadableDuration) duration71);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime30.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean75 = localDateTime30.isSupported(dateTimeFieldType74);
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.lang.String str80 = locale78.getDisplayVariant(locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology77, locale79, (java.lang.Integer) 10);
        org.joda.time.Chronology chronology83 = dateTimeParserBucket82.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType74.getField(chronology83);
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType74.getDurationType();
        org.joda.time.DateTime dateTime88 = dateTime23.withField(dateTimeFieldType74, 1986);
        boolean boolean89 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 44 + "'", int5 == 44);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "clockhourOfDay" + "'", str48, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "dayOfMonth" + "'", str55, "dayOfMonth");
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.DateTime dateTime10 = dateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.DateTime.Property property11 = dateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime1.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        int int14 = localDate13.getDayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 1, chronology17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) instant19, periodType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int23 = instant19.get(dateTimeFieldType22);
        java.lang.String str24 = dateTimeFieldType22.getName();
        boolean boolean25 = localDate13.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime.Property property26 = dateTime1.property(dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime1.withMinuteOfHour(39298055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39298055 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 44 + "'", int2 == 44);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT10H100M97.021S" + "'", str9, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 900 + "'", int23 == 900);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "minuteOfDay" + "'", str24, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime.Property property21 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        int int23 = dateTimeField22.getMaximumValue();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86399999 + "'", int23 == 86399999);
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean4 = localDate2.isSupported(durationFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths(52);
        org.joda.time.LocalDate.Property property7 = localDate6.year();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.Period period18 = period13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration22 = period17.toDurationTo((org.joda.time.ReadableInstant) instant21);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration22, 39);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (byte) 0);
        mutableDateTime28.setZoneRetainFields(dateTimeZone29);
        java.lang.String str34 = dateTimeZone29.getNameKey((long) 3);
        org.joda.time.DateTime dateTime35 = localDate6.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = dateTime35.get(dateTimeFieldType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology7.halfdays();
        long long14 = durationField11.subtract((long) 31, (long) '#');
        long long17 = durationField11.subtract(654L, 819);
        long long20 = durationField11.getValueAsLong((long) 27, 86396L);
        java.lang.String str21 = durationField11.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = durationField11.subtract(39444709L, 2363254620000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -2363254620000 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 44 + "'", int4 == 44);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1511999969L) + "'", long14 == (-1511999969L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-35380799346L) + "'", long17 == (-35380799346L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DurationField[halfdays]" + "'", str21, "DurationField[halfdays]");
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = property10.addNoWrapToCopy(31);
        org.joda.time.LocalTime localTime15 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property10.getLocalTime();
        org.joda.time.LocalTime localTime19 = localTime17.minusSeconds((-1026726689));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 466);
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withDurationAdded((long) 6, 12);
        org.joda.time.DateTime.Property property6 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property6.setCopy(613);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 613 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 44 + "'", int2 == 44);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getName((long) 290);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3L + "'", long5 == 3L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfMonth();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime26 = property23.add((long) (-1));
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        java.util.Locale locale34 = dateTimeParserBucket32.getLocale();
        java.util.Locale locale35 = dateTimeParserBucket32.getLocale();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 1, chronology37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) instant39, periodType40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int43 = instant39.get(dateTimeFieldType42);
        java.lang.String str44 = dateTimeFieldType42.getName();
        java.lang.String str45 = dateTimeFieldType42.toString();
        dateTimeParserBucket32.saveField(dateTimeFieldType42, 36);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.monthOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 1, chronology51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) instant53, periodType54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int57 = instant53.get(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime48.withField(dateTimeFieldType56, 39);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusSeconds(52);
        int int62 = localDateTime61.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.plusWeeks(22);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 1, chronology66);
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) instant68, periodType69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int72 = instant68.get(dateTimeFieldType71);
        java.lang.String str73 = dateTimeFieldType71.getName();
        java.lang.String str74 = dateTimeFieldType71.toString();
        int int75 = localDateTime64.indexOf(dateTimeFieldType71);
        dateTimeParserBucket32.saveField(dateTimeFieldType71, (int) '4');
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField82 = property81.getField();
        dateTimeParserBucket32.saveField(dateTimeField82, 979);
        mutableDateTime26.setRounding(dateTimeField82);
        boolean boolean87 = dateTimeField82.isLeap((-14L));
        java.lang.String str88 = dateTimeField82.toString();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 900 + "'", int43 == 900);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "minuteOfDay" + "'", str44, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minuteOfDay" + "'", str45, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 900 + "'", int57 == 900);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 900 + "'", int72 == 900);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "minuteOfDay" + "'", str73, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "minuteOfDay" + "'", str74, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DateTimeField[hourOfDay]" + "'", str88, "DateTimeField[hourOfDay]");
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) (short) 100);
        org.joda.time.DateTime.Property property4 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfWeek();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = locale10.stripExtensions();
        int int12 = property9.getMaximumTextLength(locale10);
        org.joda.time.DateTime dateTime13 = property9.roundHalfCeilingCopy();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        boolean boolean17 = dateTime15.isBefore((long) (short) 100);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period28 = period23.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period28.withMillis(39251693);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        java.lang.String str40 = period37.toString();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.PeriodType periodType42 = period37.getPeriodType();
        org.joda.time.Period period43 = period33.normalizedStandard(periodType42);
        java.lang.String str44 = periodType42.getName();
        org.joda.time.PeriodType periodType45 = periodType42.withMinutesRemoved();
        org.joda.time.PeriodType periodType46 = periodType45.withMonthsRemoved();
        org.joda.time.Period period47 = period30.normalizedStandard(periodType45);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType45);
        org.joda.time.DateTime dateTime49 = dateTime13.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) 100, 1L, periodType52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period58 = period53.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Duration duration62 = period57.toDurationTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Seconds seconds63 = duration62.toStandardSeconds();
        boolean boolean64 = duration19.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTime dateTime65 = dateTime5.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime67 = dateTime5.withMillisOfSecond(25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.099S" + "'", str40, "PT0.099S");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Standard" + "'", str44, "Standard");
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(seconds63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths(41);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths(16);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period20 = period15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration24 = period19.toDurationTo((org.joda.time.ReadableInstant) instant23);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration24, 39);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime11.secondOfMinute();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime11.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (byte) 0);
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        java.lang.String str36 = dateTimeZone31.getNameKey((long) 3);
        org.joda.time.DateTime dateTime37 = localDate7.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.Chronology chronology38 = localDate7.getChronology();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(chronology38);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate localDate6 = localDate0.withField(dateTimeFieldType4, 6);
        java.lang.String str7 = dateTimeFieldType4.getName();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "weekyearOfCentury" + "'", str7, "weekyearOfCentury");
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField20 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField21 = chronology4.weekyear();
        long long24 = dateTimeField21.add((long) (byte) 10, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) long24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32054400010L + "'", long24 == 32054400010L);
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(2019, 39622105, 94, 53807822, 609, 763, 39557783, 39441072);
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("eras");
        java.util.Locale.Builder builder4 = builder0.clear();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology6, locale8, (java.lang.Integer) 10);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDate16, 16, locale18);
        java.lang.String str23 = locale18.getDisplayName();
        java.util.Locale.Builder builder24 = builder4.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder24.setUnicodeLocaleKeyword("2022-02-21T15:00:18.136Z", "weekyearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-21T15:00:18.136Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "16" + "'", str22, "16");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "German" + "'", str23, "German");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 4, dateTimeZone2);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int13 = mutablePeriod12.getWeeks();
        int int14 = mutablePeriod12.getMonths();
        org.joda.time.LocalTime localTime15 = localTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime17 = localTime7.withMillisOfSecond(54);
        org.joda.time.LocalTime.Property property18 = localTime7.hourOfDay();
        org.joda.time.LocalTime localTime20 = property18.setCopy(4);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration22, readableInstant23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period30 = period28.minusSeconds((-1));
        java.lang.String str31 = period28.toString();
        org.joda.time.Period period32 = period28.toPeriod();
        org.joda.time.PeriodType periodType33 = period28.getPeriodType();
        org.joda.time.Period period34 = period24.normalizedStandard(periodType33);
        java.lang.String str35 = periodType33.getName();
        org.joda.time.PeriodType periodType36 = periodType33.withHoursRemoved();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        java.util.Locale locale43 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology41, locale43, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology47, locale49);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = chronology41.withZone(dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((long) 39246272, periodType33, chronology41);
        boolean boolean55 = localTime20.equals((java.lang.Object) periodType33);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(periodType33);
        mutablePeriod56.setDays(54001068);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.099S" + "'", str31, "PT0.099S");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Standard" + "'", str35, "Standard");
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology7, locale8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 47, chronology7);
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = durationField12.getMillis(53750160);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 5375016000 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 45 + "'", int4 == 45);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = instant3.get(dateTimeFieldType6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant12 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration10, 0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        boolean boolean16 = duration10.isShorterThan(readableDuration15);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 900 + "'", int7 == 900);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(22);
        java.util.Locale locale6 = new java.util.Locale("dayOfMonth", "en-CA", "2022-02-21T14:53:55.782Z");
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = dateTimeZone1.getName((long) 365, locale6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder10.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("Mo");
        java.util.Locale.Builder builder15 = builder10.setLocale(locale14);
        java.util.Locale.setDefault(locale14);
        java.lang.String str17 = dateTimeZone1.getShortName(4752003686L, locale14);
        java.lang.String str18 = locale14.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals(locale6.toString(), "dayofmonth_EN-CA_2022-02-21T14:53:55.782Z");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+22:00" + "'", str8, "+22:00");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "mo");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+22:00" + "'", str17, "+22:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        int int21 = localDateTime13.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusSeconds(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 1, chronology25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) instant27, periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime0, (org.joda.time.ReadablePartial) localDateTime23, periodType28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        mutablePeriod34.setYears((int) '#');
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod34.add((long) 1, chronology38);
        java.lang.Object obj40 = mutablePeriod34.clone();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod34, 57);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strMap49);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology52, locale54);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str63 = locale60.getISO3Language();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getDisplayName();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.lang.String str75 = locale73.getDisplayVariant(locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology72, locale74, (java.lang.Integer) 10);
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.lang.String str79 = locale78.getDisplayName();
        java.util.Locale locale80 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale81 = java.util.Locale.UK;
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale54, locale58, locale60, locale64, locale67, locale68, locale70, locale74, locale78, locale80, locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList83, filteringMode85);
        boolean boolean87 = strSet45.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47);
        org.joda.time.Duration duration89 = org.joda.time.Duration.standardDays((long) (byte) 1);
        boolean boolean90 = strSet45.remove((java.lang.Object) duration89);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime42.plus((org.joda.time.ReadableDuration) duration89);
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime96 = localDateTime91.withDate((-198), 808, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 808 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfDay" + "'", str20, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "P35YT0.001S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "P35YT0.001S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "P35YT0.001S");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "deu" + "'", str63, "deu");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "German" + "'", str69, "German");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "German" + "'", str79, "German");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode85.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime7 = localTime3.minusSeconds(46);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology8);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime13 = property10.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime14 = property10.roundFloorCopy();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime.Property property13 = dateTime1.weekOfWeekyear();
        int int14 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property15 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime17 = dateTime1.minusHours(10);
        org.joda.time.DateTime dateTime19 = dateTime1.plusMonths(46);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra(897);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime19.withMillisOfSecond(39374894);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39374894 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(53735132);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(0);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration25, 39);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.secondOfMinute();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime12.hourOfDay();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime12.dayOfWeek();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        java.util.Locale locale38 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology36, locale38, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        int int46 = property44.get();
        org.joda.time.LocalDateTime localDateTime47 = property44.roundHalfFloorCopy();
        long long49 = chronology36.set((org.joda.time.ReadablePartial) localDateTime47, (long) 2022);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DurationField durationField52 = chronology36.eras();
        java.util.Locale locale56 = new java.util.Locale("hi!", "clockhourOfDay", "java.io.IOException");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology36, locale56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket57.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter8.withZone(dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter8.withDefaultYear(39297267);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645455600000L + "'", long49 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period10 = period8.negated();
        org.joda.time.Period period12 = period10.withSeconds(53833003);
        int int13 = period12.getMonths();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.yearOfCentury();
        int int7 = mutableDateTime1.getYearOfCentury();
        mutableDateTime1.setMonthOfYear(7);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean5 = property3.isLeap();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale7.getCountry();
        java.lang.String str10 = property3.getAsShortText(locale7);
        org.joda.time.LocalDateTime localDateTime12 = property3.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withWeekyear(894);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.centuryOfEra();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays(2712);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CA" + "'", str9, "CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "15" + "'", str10, "15");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0894-02-22T19:00:45.358Z" + "'", str21, "0894-02-22T19:00:45.358Z");
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 193238535600000L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.Period period17 = period15.withSeconds(10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        boolean boolean19 = period15.isSupported(durationFieldType18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        boolean boolean25 = dateTime23.isEqualNow();
        int int26 = dateTime23.getDayOfYear();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.minuteOfDay();
        org.joda.time.DurationField durationField33 = durationFieldType18.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.secondOfMinute();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clear();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        boolean boolean42 = property40.isLeap();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale44.getCountry();
        java.lang.String str47 = property40.getAsShortText(locale44);
        java.util.Set<java.lang.String> strSet48 = locale44.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder49 = builder36.setLocale(locale44);
        int int50 = dateTimeField34.getMaximumShortTextLength(locale44);
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.getDefault(category51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.US;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.util.Locale.setDefault(category51, locale57);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology61, locale63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale.Category category68 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale69 = java.util.Locale.getDefault(category68);
        java.lang.String str70 = locale69.getVariant();
        dateTimeParserBucket65.saveField(dateTimeFieldType66, "2022-02-21T14:53:55.782Z", locale69);
        java.util.Locale.setDefault(category51, locale69);
        java.util.Locale locale73 = java.util.Locale.getDefault(category51);
        java.lang.String str74 = locale44.getDisplayLanguage(locale73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = localDate1.toString("2022-02-21T15:00:00.000", locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 45 + "'", int24 == 45);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CA" + "'", str46, "CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "15" + "'", str47, "15");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "mo");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "15" + "'", str58, "15");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + category68 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category68.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "English" + "'", str74, "English");
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(945, 53711646, 7222, 552, 524, 226);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 552 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str10 = dateTimeFieldType9.getName();
        int int11 = localDateTime3.indexOf(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.property(dateTimeFieldType16);
        int int19 = localDateTime15.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfDay(1);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap25);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale30);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology48, locale50, (java.lang.Integer) 10);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale57 = java.util.Locale.UK;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale30, locale34, locale36, locale40, locale43, locale44, locale46, locale50, locale54, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        boolean boolean63 = localDateTime21.equals((java.lang.Object) languageRangeList23);
        boolean boolean64 = strSet1.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23);
        int int65 = strSet1.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "clockhourOfDay" + "'", str10, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfMonth" + "'", str17, "dayOfMonth");
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "deu" + "'", str39, "deu");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "German" + "'", str55, "German");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode61.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime4 = dateTime1.toLocalTime();
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfSecond();
        org.joda.time.LocalTime localTime7 = localTime4.plusSeconds(53650665);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 45 + "'", int2 == 45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isParser();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) instant14, periodType15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) ' ');
        org.joda.time.Chronology chronology20 = localDate17.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 1, periodType15, chronology20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) ' ');
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate28 = localDate22.withFieldAdded(durationFieldType26, (int) (byte) 100);
        boolean boolean29 = periodType15.isSupported(durationFieldType26);
        org.joda.time.PeriodType periodType30 = periodType15.withDaysRemoved();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfMonth();
        org.joda.time.Chronology chronology33 = localDate31.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 43, periodType15, chronology33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration40 = duration36.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        java.util.Locale locale49 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology47, locale49, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 53, chronology47);
        org.joda.time.DateTimeField dateTimeField53 = chronology47.dayOfYear();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.monthOfYear();
        org.joda.time.Period period55 = duration36.toPeriod(periodType41, chronology47);
        org.joda.time.Period period56 = new org.joda.time.Period((long) '#', periodType15, chronology47);
        org.joda.time.DateTimeField dateTimeField57 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology47.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter2.withChronology(chronology47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter59.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeFormatter59.print((-568026347895L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("33");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"33\": Value 33 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths((int) (byte) -1);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withSecondOfMinute(59);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str19 = dateTimeFieldType18.getName();
        int int20 = localDateTime12.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType25);
        boolean boolean28 = localDateTime11.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime11.withSecondOfMinute(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime11.property(dateTimeFieldType31);
        int int33 = property32.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "clockhourOfDay" + "'", str19, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        boolean boolean26 = instant11.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35);
        org.joda.time.Duration duration37 = duration34.toDuration();
        int int38 = duration28.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant39 = instant11.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = instant39.getZone();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period52 = period47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Duration duration56 = period51.toDurationTo((org.joda.time.ReadableInstant) instant55);
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration56, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean60 = mutableDateTime43.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        long long63 = dateTimeZone61.nextTransition(10L);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone61);
        mutableDateTime43.setZone(dateTimeZone61);
        int int66 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) mutableDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setMinuteOfDay(39543695);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39543695 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(6);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        mutablePeriod24.setYears((int) '#');
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod24.add((long) 1, chronology28);
        mutablePeriod24.addDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        int int33 = mutablePeriod24.getDays();
        mutablePeriod24.add((long) 53600069);
        mutablePeriod24.addYears(39573276);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime13 = property10.roundHalfEvenCopy();
        java.lang.String str14 = localTime13.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "15:00:46.000" + "'", str14, "15:00:46.000");
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.Period period12 = org.joda.time.Period.millis(100);
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        mutablePeriod17.setYears((int) '#');
        org.joda.time.Chronology chronology21 = null;
        mutablePeriod17.add((long) 1, chronology21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        mutablePeriod17.setPeriod(readableInterval23);
        mutablePeriod17.setMillis((int) '4');
        org.joda.time.Period period27 = period13.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime28 = dateTime10.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period39 = period34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Duration duration43 = period38.toDurationTo((org.joda.time.ReadableInstant) instant42);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration43, 39);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime30.yearOfEra();
        mutableDateTime30.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime30.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime51 = property49.addWrapField((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime52 = property49.roundHalfFloor();
        org.joda.time.Period period54 = org.joda.time.Period.hours(44);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(2022, (int) ' ', 6, (int) (short) 100);
        org.joda.time.Period period60 = period54.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        mutablePeriod59.addMonths((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period(readableDuration65, readableInstant66);
        org.joda.time.Period period69 = period67.withDays((int) (byte) 1);
        org.joda.time.Period period71 = period69.minusWeeks(100);
        org.joda.time.Period period73 = period69.minusWeeks(2023);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) ' ');
        org.joda.time.Chronology chronology77 = localDate74.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.minuteOfHour();
        org.joda.time.DurationField durationField80 = chronology77.weekyears();
        org.joda.time.DateTimeField dateTimeField81 = chronology77.minuteOfDay();
        org.joda.time.DurationField durationField82 = chronology77.hours();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) period69, chronology77);
        mutablePeriod59.setPeriod((long) 751, (long) 31, chronology77);
        org.joda.time.DateTimeField dateTimeField85 = chronology77.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = dateTimeField85.getType();
        boolean boolean87 = mutableDateTime52.isSupported(dateTimeFieldType86);
        boolean boolean88 = dateTime28.isSupported(dateTimeFieldType86);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 45 + "'", int4 == 45);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime6.add((long) '#');
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime6.getRoundingField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3L + "'", long5 == 3L);
        org.junit.Assert.assertNull(dateTimeField9);
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime(dateTimeZone18);
        boolean boolean21 = mutableDateTime1.isBefore((long) 100);
        mutableDateTime1.addYears(6);
        mutableDateTime1.addWeekyears(69);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField34 = localDateTime32.getField((int) (byte) 0);
        long long36 = dateTimeField34.roundHalfEven((long) 1);
        int int37 = dateTime27.get(dateTimeField34);
        mutableDateTime1.setRounding(dateTimeField34);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 1L, periodType3);
        org.joda.time.Period period6 = period4.minusSeconds((-1));
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        int int11 = period9.get(durationFieldType10);
        boolean boolean12 = period4.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.withFieldAdded(durationFieldType10, 52);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.minusDays(55);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMonths(33);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(31536000000L);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Hours hours3 = duration1.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT1892160000000S" + "'", str2, "PT1892160000000S");
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.secondOfMinute();
        int int8 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withMillisOfDay(24);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        boolean boolean14 = dateTime12.isEqualNow();
        int int15 = dateTime12.getDayOfYear();
        org.joda.time.Chronology chronology16 = dateTime12.getChronology();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.DateTime dateTime19 = dateTime12.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime21.toString(dateTimeFormatter23);
        org.joda.time.DateTime dateTime26 = dateTime21.plusMonths(86396191);
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded((long) 23, 21);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis(44);
        org.joda.time.Interval interval32 = duration18.toIntervalFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime4.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getSecondOfMinute();
        boolean boolean41 = dateTime39.isEqualNow();
        int int42 = dateTime39.getDayOfYear();
        org.joda.time.Chronology chronology43 = dateTime39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology43);
        org.joda.time.DurationField durationField45 = chronology43.hours();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfWeek();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 39246272, (long) 5, chronology43);
        org.joda.time.DurationField durationField48 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.yearOfEra();
        boolean boolean52 = localDateTime33.equals((java.lang.Object) dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 658 + "'", int8 == 658);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 45 + "'", int13 == 45);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T15:00:45.658Z" + "'", str24, "2022-02-21T15:00:45.658Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 45 + "'", int40 == 45);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        org.joda.time.Period period1 = org.joda.time.Period.months(653);
        org.joda.time.Period period3 = period1.plusMillis(393);
        org.joda.time.Period period5 = period1.minusMonths(53936740);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DurationField durationField22 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology6.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(4320000000L, (long) 457070, chronology6);
        mutablePeriod24.setPeriod(39391192, (-6), 559, 53715444, 641, 39297267, (-4481732), 68369519);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime4 = dateTime1.withDurationAdded((long) 41, 53);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getSecondOfMinute();
        boolean boolean10 = dateTime8.isEqualNow();
        int int11 = dateTime8.getDayOfYear();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property17 = dateTime1.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 45 + "'", int9 == 45);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = property10.setCopy(2);
        org.joda.time.LocalTime localTime15 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(dateTimeZone16);
        org.joda.time.LocalTime localTime19 = localTime17.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime21 = localTime19.minusHours((-1));
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime24 = property22.addCopy((long) 893);
        org.joda.time.LocalTime localTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        org.joda.time.LocalTime localTime28 = property22.addWrapFieldToCopy(505);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property22.getFieldType();
        int int30 = localTime15.get(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = localTime15.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.centuries();
        long long35 = durationField32.subtract((long) 39419000, 87596);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-276426276699781000L) + "'", long35 == (-276426276699781000L));
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears(86387081);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21, 39);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.secondOfMinute();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime8.minuteOfHour();
        java.lang.String str26 = property25.getAsShortText();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = locale27.stripExtensions();
        int int29 = property25.getMaximumTextLength(locale28);
        java.lang.String str30 = locale28.getDisplayLanguage();
        java.lang.String str31 = locale28.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withLocale(locale28);
        int int33 = dateTimeFormatter32.getDefaultYear();
        boolean boolean34 = dateTimeFormatter32.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 1L, periodType43);
        org.joda.time.Period period45 = period40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Duration duration49 = period44.toDurationTo((org.joda.time.ReadableInstant) instant48);
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration49, 39);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime36.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime36.toMutableDateTime(dateTimeZone53);
        boolean boolean56 = mutableDateTime36.isBefore((long) 100);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime36.monthOfYear();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = locale60.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology59, locale60, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket64.getZone();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localTime66.toDateTimeToday();
        org.joda.time.LocalTime.Property property68 = localTime66.secondOfMinute();
        org.joda.time.LocalTime localTime70 = property68.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime72 = property68.setCopy(2);
        org.joda.time.LocalTime localTime73 = property68.roundFloorCopy();
        org.joda.time.LocalTime localTime75 = property68.addCopy(48L);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        long long81 = dateTimeZone78.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone78);
        org.joda.time.Chronology chronology85 = null;
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.util.Locale locale87 = locale86.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology85, locale86, (java.lang.Integer) 45, (int) '4');
        java.lang.String str91 = dateTimeZone78.getName(31536000000L, locale86);
        java.lang.String str92 = localTime75.toString("10:54:18.439", locale86);
        int int93 = property57.getMaximumShortTextLength(locale86);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter32.withLocale(locale86);
        java.lang.String str95 = locale86.getScript();
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "59" + "'", str26, "59");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "German" + "'", str30, "German");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2000 + "'", int33 == 2000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 100L + "'", long81 == 100L);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10:54:18.439" + "'", str92, "10:54:18.439");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str10 = dateTimeFieldType9.getName();
        org.joda.time.LocalDateTime.Property property11 = localDateTime0.property(dateTimeFieldType9);
        int int12 = localDateTime0.getDayOfWeek();
        int int13 = localDateTime0.getWeekyear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 100);
        int int16 = dateTime15.getCenturyOfEra();
        org.joda.time.DateTime dateTime18 = dateTime15.minusMonths(5);
        org.joda.time.DateTime dateTime19 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property20 = dateTime15.year();
        org.joda.time.DateTime.Property property21 = dateTime15.minuteOfDay();
        org.joda.time.DateTime dateTime23 = dateTime15.minusYears(884);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "clockhourOfDay" + "'", str10, "clockhourOfDay");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, readableInstant6);
        long long8 = duration5.getStandardDays();
        org.joda.time.Duration duration9 = duration5.toDuration();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.Period period15 = period13.minusSeconds((-1));
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.centuries();
        int int20 = period18.get(durationFieldType19);
        boolean boolean21 = period13.isSupported(durationFieldType19);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period32 = period27.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Duration duration36 = period31.toDurationTo((org.joda.time.ReadableInstant) instant35);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration36, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean40 = mutableDateTime23.isSupported(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType39.getDurationType();
        int int42 = period13.get(durationFieldType41);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        int int53 = dateTime52.getSecondOfMinute();
        boolean boolean54 = dateTime52.isEqualNow();
        int int55 = dateTime52.getDayOfYear();
        org.joda.time.Chronology chronology56 = dateTime52.getChronology();
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology56, locale57);
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType49.getField(chronology56);
        org.joda.time.DurationField durationField60 = durationFieldType48.getField(chronology56);
        mutableDateTime45.setChronology(chronology56);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.fromMillisOfDay(39217210L, chronology56);
        org.joda.time.DateTimeField dateTimeField63 = chronology56.weekOfWeekyear();
        boolean boolean64 = durationFieldType41.isSupported(chronology56);
        org.joda.time.Period period65 = duration9.toPeriod(chronology56);
        org.joda.time.Duration duration66 = org.joda.time.Duration.ZERO;
        org.joda.time.Hours hours67 = duration66.toStandardHours();
        org.joda.time.Duration duration68 = duration66.toDuration();
        boolean boolean69 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Period period70 = duration68.toPeriod();
        java.lang.String str71 = period70.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 45 + "'", int53 == 45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(hours67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT0S" + "'", str71, "PT0S");
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        long long4 = dateTimeZone1.adjustOffset(0L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant3.toMutableDateTimeISO();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration19 = duration11.plus((org.joda.time.ReadableDuration) duration17);
        boolean boolean20 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        long long21 = duration11.getStandardMinutes();
        org.joda.time.Instant instant22 = instant3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTime dateTime23 = instant22.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = instant22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(0L, dateTimeZone26);
        mutableDateTime27.addMillis(50);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        java.util.Locale locale36 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology34, locale36, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        int int44 = property42.get();
        org.joda.time.LocalDateTime localDateTime45 = property42.roundHalfFloorCopy();
        long long47 = chronology34.set((org.joda.time.ReadablePartial) localDateTime45, (long) 2022);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime51 = dateTime49.minusSeconds(69);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfDay();
        org.joda.time.DateTime dateTime54 = dateTime51.withDayOfMonth(26);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str57 = dateTimeZone55.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime58 = dateTime51.toDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone55);
        mutableDateTime27.setZoneRetainFields(dateTimeZone55);
        long long63 = dateTimeZone55.convertLocalToUTC((long) 75596, false);
        boolean boolean64 = dateTimeZone55.isFixed();
        org.joda.time.DateTime dateTime65 = dateTime24.withZoneRetainFields(dateTimeZone55);
        int int66 = dateTime24.getMillisOfSecond();
        org.joda.time.DateTime dateTime68 = dateTime24.minusDays(958);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1440L + "'", long21 == 1440L);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645455600000L + "'", long47 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 75596L + "'", long63 == 75596L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 930 + "'", int66 == 930);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.DateTime dateTime4 = property2.withMinimumValue();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = property2.getAsShortText(locale5);
        org.joda.time.DateTime dateTime8 = property2.setCopy(53700016);
        java.lang.String str9 = property2.getAsText();
        int int10 = property2.get();
        org.joda.time.DateTime dateTime11 = property2.roundCeilingCopy();
        int int12 = dateTime11.getCenturyOfEra();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(39324);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(obj13, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration21, (int) (short) 100);
        mutableDateTime19.setYear(10);
        mutableDateTime19.addSeconds((int) (short) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime19.minuteOfHour();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        int int31 = dateTime17.get(dateTimeField30);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "54046008" + "'", str6, "54046008");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "54046008" + "'", str9, "54046008");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54046008 + "'", int10 == 54046008);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.withLaterOffsetAtOverlap();
        java.lang.String str5 = dateTime3.toString("\uc6d4");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc6d4" + "'", str5, "\uc6d4");
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        java.lang.String str11 = property10.getName();
        org.joda.time.LocalTime localTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.withMaximumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localTime13.getFields();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.addWrapField((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime24 = property20.add((long) 17);
        org.joda.time.MutableDateTime mutableDateTime26 = property20.add(0);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period35 = period30.plus((org.joda.time.ReadablePeriod) period34);
        int int36 = period30.getHours();
        org.joda.time.Period period37 = period30.toPeriod();
        org.joda.time.Period period39 = period30.plusSeconds(42);
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period39);
        mutableDateTime26.setDate(212975660102399999L);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusMillis(2022);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        java.lang.String str15 = period12.toString();
        org.joda.time.Period period16 = period12.toPeriod();
        org.joda.time.LocalTime localTime18 = localTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) (byte) -1);
        org.joda.time.LocalTime localTime20 = localTime5.minusMillis(69);
        org.joda.time.LocalTime.Property property21 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period33 = period28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Duration duration37 = period32.toDurationTo((org.joda.time.ReadableInstant) instant36);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration37, 39);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime24.secondOfMinute();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime24.minuteOfHour();
        java.lang.String str42 = property41.getAsShortText();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = locale43.stripExtensions();
        int int45 = property41.getMaximumTextLength(locale44);
        java.lang.String str46 = property21.getAsText(locale44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime48 = property21.setCopy("2022-02-21T14:58:50.732Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:58:50.732Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39646169 + "'", int6 == 39646169);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.099S" + "'", str15, "PT0.099S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "59" + "'", str42, "59");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 100);
        int int9 = dateTime8.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusYears((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMillis((int) (byte) 0);
        int int27 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks((int) '4');
        int int32 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTime dateTime33 = dateTime8.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.Chronology chronology34 = dateTime8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(39527062, 66, 53638420, 2720, 591, 49, 780, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2720 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths(55);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date9);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate11.withFieldAdded(durationFieldType12, 513);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Jul 21 00:00:00 GMT 12017");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T15:00:22.907Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t15:00:22.907z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfCentury(0);
        int int8 = localDate7.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        java.lang.String str23 = period20.toString();
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.PeriodType periodType25 = period20.getPeriodType();
        org.joda.time.Period period26 = period16.normalizedStandard(periodType25);
        org.joda.time.Period period28 = period26.multipliedBy((int) (short) 100);
        int[] intArray30 = chronology13.get((org.joda.time.ReadablePeriod) period26, 2629746000L);
        org.joda.time.DateTimeField dateTimeField31 = chronology13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        boolean boolean38 = property35.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        int int41 = dateTime40.getSecondOfMinute();
        int int42 = dateTime40.getYearOfEra();
        int int43 = property35.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime44 = property35.roundHalfFloorCopy();
        int int45 = localDateTime44.getMillisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) 100, 1L, periodType54);
        org.joda.time.Period period56 = period51.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Duration duration60 = period55.toDurationTo((org.joda.time.ReadableInstant) instant59);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration60, 39);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime47.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime47.setZone(dateTimeZone64);
        int int66 = mutableDateTime47.getYearOfEra();
        mutableDateTime47.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime47.toMutableDateTimeISO();
        mutableDateTime69.addHours(21);
        boolean boolean73 = mutableDateTime69.isAfter((long) 86396191);
        int int74 = mutableDateTime69.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime69.yearOfEra();
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = locale78.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology77, locale78, (java.lang.Integer) 45, (int) '4');
        java.util.Set<java.lang.Character> charSet83 = locale78.getExtensionKeys();
        java.util.Locale locale84 = locale78.stripExtensions();
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.util.Locale locale86 = java.util.Locale.CANADA;
        java.lang.String str87 = locale85.getDisplayVariant(locale86);
        java.lang.String str88 = locale86.getCountry();
        java.lang.String str89 = locale78.getDisplayLanguage(locale86);
        java.util.Locale.Category category90 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale91 = java.util.Locale.getDefault(category90);
        java.lang.String str93 = locale91.getExtension('a');
        java.lang.String str94 = locale91.getISO3Country();
        java.lang.String str95 = locale78.getDisplayLanguage(locale91);
        int int96 = property75.getMaximumShortTextLength(locale91);
        java.lang.String str97 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, locale91);
        int int98 = dateTimeField31.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.099S" + "'", str23, "PT0.099S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 4, 2, 10, 29, 6, 0]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 46 + "'", int41 == 46);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1969 + "'", int66 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 75596 + "'", int74 == 75596);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "CA" + "'", str88, "CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "German" + "'", str89, "German");
        org.junit.Assert.assertTrue("'" + category90 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category90.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_US");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "USA" + "'", str94, "USA");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "German" + "'", str95, "German");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 9 + "'", int96 == 9);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "0" + "'", str97, "0");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        org.joda.time.Period period7 = period5.withMinutes(1);
        org.joda.time.Period period9 = period7.minusWeeks(32);
        org.joda.time.Period period10 = period7.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = period7.getFieldTypes();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType11 = mutablePeriod9.getPeriodType();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period22 = period17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Duration duration26 = period21.toDurationTo((org.joda.time.ReadableInstant) instant25);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration26, 39);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.yearOfEra();
        mutableDateTime13.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime13.minuteOfDay();
        org.joda.time.DurationField durationField33 = property32.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType34 = durationField33.getType();
        mutablePeriod9.set(durationFieldType34, 120);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod9.copy();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "P120DT0.198S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "P120DT0.198S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "P120DT0.198S");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(mutablePeriod37);
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType5 = periodType4.withDaysRemoved();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        java.util.Locale locale12 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology10, locale12, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        int int20 = property18.get();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundHalfFloorCopy();
        long long23 = chronology10.set((org.joda.time.ReadablePartial) localDateTime21, (long) 2022);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, (long) 53, periodType5, chronology10);
        org.joda.time.PeriodType periodType26 = periodType5.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 54006189, (long) 14396, periodType5);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645455600000L + "'", long23 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(46);
        java.lang.String str6 = property3.getAsString();
        int int7 = property3.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) instant14, periodType15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int18 = instant14.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withField(dateTimeFieldType17, 39);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(52);
        int int23 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusWeeks(22);
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale26.toLanguageTag();
        java.lang.String str28 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str30 = dateTimeFieldType29.toString();
        org.joda.time.LocalDateTime.Property property31 = localDateTime22.property(dateTimeFieldType29);
        java.lang.String str32 = property31.toString();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime35 = property31.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "15" + "'", str6, "15");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 900 + "'", int18 == 900);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en-GB" + "'", str27, "en-GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hourOfHalfday" + "'", str30, "hourOfHalfday");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[hourOfHalfday]" + "'", str32, "Property[hourOfHalfday]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = instant3.get(dateTimeFieldType6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant12 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration10, 0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.Period period15 = duration10.toPeriod();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 900 + "'", int7 == 900);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime6.setWeekyear(19);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (byte) 0);
        long long17 = dateTimeField15.roundHalfEven((long) 1);
        long long20 = dateTimeField15.add((long) '#', (long) 100);
        int int22 = dateTimeField15.getMinimumValue(31536000000L);
        mutableDateTime6.setRounding(dateTimeField15);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        java.util.Locale locale30 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology28, locale30, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        int int38 = property36.get();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfFloorCopy();
        long long41 = chronology28.set((org.joda.time.ReadablePartial) localDateTime39, (long) 2022);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DurationField durationField44 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology28.weekyearOfCentury();
        mutableDateTime6.setChronology(chronology28);
        java.lang.Object obj47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj47);
        org.joda.time.DateTime.Property property49 = dateTime48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.DateTime dateTime51 = property49.withMinimumValue();
        org.joda.time.DateTime dateTime53 = dateTime51.minusHours(2023);
        org.joda.time.DateTime dateTime54 = dateTime51.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = dateTime54.withZoneRetainFields(dateTimeZone55);
        mutableDateTime6.setZone(dateTimeZone55);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = locale59.getDisplayLanguage();
        java.util.Locale locale61 = locale59.stripExtensions();
        java.lang.String str62 = dateTimeZone55.getName(39446190000L, locale59);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3L + "'", long5 == 3L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3155760000035L + "'", long20 == 3155760000035L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-292275054) + "'", int22 == (-292275054));
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645455600000L + "'", long41 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English" + "'", str60, "English");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean8 = property5.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        int int12 = dateTime10.getYearOfEra();
        int int13 = property5.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime10);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime1.toGregorianCalendar();
        org.joda.time.DateTime.Property property16 = dateTime1.yearOfCentury();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration29 = duration21.plus((org.joda.time.ReadableDuration) duration27);
        boolean boolean30 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration21);
        long long31 = duration21.getStandardMinutes();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime34 = dateTime1.minusSeconds(39300);
        int int35 = dateTime1.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 46 + "'", int11 == 46);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1440L + "'", long31 == 1440L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-21T14:58:46.269Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:58:46.269Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.plus((long) (byte) -1);
        org.joda.time.Instant instant17 = instant14.withDurationAdded(1L, (int) (short) -1);
        org.joda.time.Chronology chronology18 = instant14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        java.lang.String str21 = mutableDateTime19.toString();
        mutableDateTime19.setWeekyear(0);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration27, (int) (short) 100);
        mutableDateTime25.setYear(10);
        mutableDateTime25.addSeconds((int) (short) 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.set(168);
        mutableDateTime19.setDate((org.joda.time.ReadableInstant) mutableDateTime36);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T15:00:46.374Z" + "'", str21, "2022-02-21T15:00:46.374Z");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = locale4.stripExtensions();
        int int6 = property3.getMaximumTextLength(locale4);
        org.joda.time.DateTime dateTime7 = property3.withMinimumValue();
        boolean boolean8 = property3.isLeap();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property6 = localTime3.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        boolean boolean8 = localTime3.isSupported(durationFieldType7);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        org.joda.time.Period period1 = org.joda.time.Period.hours(958);
        org.joda.time.Period period3 = period1.minusMonths((int) (byte) 0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-1637));
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 4, dateTimeZone2);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int13 = mutablePeriod12.getWeeks();
        int int14 = mutablePeriod12.getMonths();
        org.joda.time.LocalTime localTime15 = localTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay(642);
        org.joda.time.LocalTime.Property property18 = localTime15.millisOfSecond();
        org.joda.time.LocalTime.Property property19 = localTime15.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(56L, (long) 961);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        mutablePeriod2.setPeriod((long) 166, (long) 39394476, chronology7);
        int int11 = mutablePeriod2.getHours();
        mutablePeriod2.setSeconds(39277299);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = locale4.stripExtensions();
        int int6 = property3.getMaximumTextLength(locale4);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) dateTime7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTimeISO();
        java.lang.String str10 = dateTime7.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str10, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(1970);
        int int2 = period1.getYears();
        int int3 = period1.size();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.Period period14 = period9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration18 = period13.toDurationTo((org.joda.time.ReadableInstant) instant17);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration18, 39);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime5.yearOfEra();
        mutableDateTime5.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime5.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(57);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone28.getShortName(55123200000L, locale30);
        long long33 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, 49000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) period1, dateTimeZone28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+57:00" + "'", str31, "+57:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-205151000L) + "'", long33 == (-205151000L));
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(209, 86398147, 945, 895, 39632705, 39391533);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 895 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(69);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withDayOfMonth(26);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        boolean boolean35 = dateTime33.isEqualNow();
        int int36 = dateTime33.getDayOfYear();
        org.joda.time.Chronology chronology37 = dateTime33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        java.lang.Object obj41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(0L, dateTimeZone43);
        int int46 = dateTimeZone43.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(obj41, dateTimeZone43);
        java.lang.String str48 = dateTimeZone43.toString();
        org.joda.time.Chronology chronology49 = chronology37.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime50 = localDateTime29.toDateTime(dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime50.withWeekOfWeekyear(39600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39600000 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 46 + "'", int34 == 46);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.DateTime dateTime4 = property2.withMinimumValue();
        java.lang.String str5 = property2.getAsString();
        org.joda.time.DurationField durationField6 = property2.getDurationField();
        long long9 = durationField6.subtract((-62135596800000L), 39551738);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "54046580" + "'", str5, "54046580");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-62135636351738L) + "'", long9 == (-62135636351738L));
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long5 = dateTimeZone2.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int8 = dateTimeZone2.getOffset((long) (short) 0);
        java.lang.String str10 = dateTimeZone2.getNameKey((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        java.util.Locale locale20 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology18, locale20, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        int int28 = property26.get();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        long long31 = chronology18.set((org.joda.time.ReadablePartial) localDateTime29, (long) 2022);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DurationField durationField34 = chronology18.eras();
        java.util.Locale locale38 = new java.util.Locale("hi!", "clockhourOfDay", "java.io.IOException");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology18, locale38);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        java.util.Locale locale41 = dateTimeParserBucket39.getLocale();
        java.lang.String str42 = dateTimeZone2.getName((long) 56, locale41);
        java.lang.String str43 = dateTimeZone2.getID();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 39410, dateTimeZone2);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) "445", dateTimeZone2);
        java.lang.String str47 = dateTimeZone2.getNameKey((long) 170);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455600000L + "'", long31 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.minus((long) 417);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        int int10 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        java.lang.String str16 = duration1.toString();
        org.joda.time.Duration duration18 = duration1.minus((long) 39221019);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate24 = localDate19.plusWeeks(56);
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate.Property property26 = localDate24.era();
        org.joda.time.LocalDate localDate28 = localDate24.minusDays(55);
        int int29 = localDate24.size();
        org.joda.time.Chronology chronology30 = localDate24.getChronology();
        org.joda.time.Period period31 = duration1.toPeriod(chronology30);
        org.joda.time.Period period32 = period31.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = period31.getValue(54774180);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54774180");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(46);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(39266896);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes(490);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate6 = localDate0.plusDays(1439);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration7, readableInstant8);
        int int10 = period9.getMinutes();
        org.joda.time.LocalDate localDate11 = localDate6.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period9.minusMinutes(925);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.secondOfMinute();
        mutableDateTime7.addYears(3);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField34 = localDateTime32.getField((int) (byte) 0);
        long long36 = dateTimeField34.roundHalfEven((long) 1);
        int int37 = dateTime27.get(dateTimeField34);
        boolean boolean38 = dateTime27.isBeforeNow();
        org.joda.time.DateTime.Property property39 = dateTime27.weekOfWeekyear();
        mutableDateTime7.setTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period41 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Seconds seconds42 = duration5.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long46 = dateTimeZone43.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(0L, dateTimeZone48);
        int int50 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) 100, 1L, periodType55);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) 100, 1L, periodType59);
        org.joda.time.Period period61 = period56.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Duration duration65 = period60.toDurationTo((org.joda.time.ReadableInstant) instant64);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration65, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean69 = mutableDateTime52.isSupported(dateTimeFieldType68);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 1, chronology73);
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTime();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (short) 1, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime78.toDateTime();
        int int80 = dateTime75.compareTo((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration85 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration82, 10);
        org.joda.time.Duration duration86 = duration85.toDuration();
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration85);
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration85, 28);
        org.joda.time.Duration duration90 = duration5.plus((org.joda.time.ReadableDuration) duration85);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration90);
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(0L, dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj1, dateTimeZone3);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 40, dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setMillisOfSecond(39305775);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39305775 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        java.util.Locale locale7 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology5, locale7, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 53, chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.centuryOfEra();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.lang.String str15 = locale13.getCountry();
        java.lang.String str16 = locale13.getDisplayName();
        java.lang.String str18 = locale13.getExtension('a');
        int int19 = dateTimeField11.getMaximumShortTextLength(locale13);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) ' ');
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate26 = localDate20.withFieldAdded(durationFieldType24, (int) (byte) 100);
        org.joda.time.LocalDate.Property property27 = localDate20.dayOfWeek();
        org.joda.time.LocalDate localDate29 = property27.addWrapFieldToCopy(3);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        boolean boolean35 = dateTime33.isEqualNow();
        int int36 = dateTime33.getDayOfYear();
        org.joda.time.Chronology chronology37 = dateTime33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate29.plusWeeks(21);
        int int44 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate29);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CA" + "'", str15, "CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 46 + "'", int34 == 46);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2922789 + "'", int44 == 2922789);
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale12);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = chronology4.withZone(dateTimeZone15);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.LocalTime localTime19 = localTime17.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime.Property property21 = localTime17.secondOfMinute();
        java.lang.Object obj22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period31 = period29.minusSeconds((-1));
        java.lang.String str32 = period29.toString();
        org.joda.time.Period period33 = period29.toPeriod();
        org.joda.time.PeriodType periodType34 = period29.getPeriodType();
        org.joda.time.Period period35 = period25.normalizedStandard(periodType34);
        java.lang.String str36 = periodType34.getName();
        org.joda.time.PeriodType periodType37 = periodType34.withHoursRemoved();
        org.joda.time.PeriodType periodType38 = periodType34.withSecondsRemoved();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(obj22, periodType34, chronology39);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) -1);
        java.lang.Object obj43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(obj43);
        mutableDateTime42.add((org.joda.time.ReadablePeriod) mutablePeriod44, 120);
        mutablePeriod40.add((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.lang.String str48 = mutablePeriod40.toString();
        org.joda.time.LocalTime localTime50 = localTime17.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod40, 270);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.099S" + "'", str32, "PT0.099S");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Standard" + "'", str36, "Standard");
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0S" + "'", str48, "PT0S");
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        long long7 = dateTimeZone0.convertLocalToUTC((long) 7, false, 86500000L);
        long long9 = dateTimeZone0.convertUTCToLocal((long) 903);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 7L + "'", long7 == 7L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 903L + "'", long9 == 903L);
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.Period period11 = org.joda.time.Period.millis(100);
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.Period period14 = period12.multipliedBy((int) 'x');
        org.joda.time.LocalTime localTime15 = localTime8.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy((-6));
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(39532174);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = localTime18.withMinuteOfHour(253);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 253 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime8 = localTime6.plusMillis((int) (byte) 100);
        org.joda.time.DateTime dateTime9 = dateTime2.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateTime.Property property10 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(53777457);
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(14400000);
        java.lang.String str15 = dateTime12.toString();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T14:56:17.458Z" + "'", str15, "1970-01-01T14:56:17.458Z");
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        boolean boolean26 = instant11.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.MutableDateTime mutableDateTime27 = instant11.toMutableDateTimeISO();
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis(26L);
        org.joda.time.Instant instant30 = instant11.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Seconds seconds31 = duration29.toStandardSeconds();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(seconds31);
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 100);
        int int2 = dateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 1, chronology4);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) instant6, periodType7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int10 = instant6.get(dateTimeFieldType9);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant15 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration13, 0);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTime dateTime19 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) '4');
        org.joda.time.DateTime dateTime21 = dateTime1.plusHours((int) 'a');
        long long22 = dateTime21.getMillis();
        int int23 = dateTime21.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 900 + "'", int10 == 900);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 349200100L + "'", long22 == 349200100L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean13 = localDate11.isSupported(durationFieldType12);
        org.joda.time.LocalDate localDate15 = localDate11.plusMonths(52);
        int int16 = localDate15.getCenturyOfEra();
        int int17 = localDate15.getEra();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDate15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean6 = property3.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getSecondOfMinute();
        int int10 = dateTime8.getYearOfEra();
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalDateTime localDateTime12 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusHours(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = localDateTime12.getField(39527062);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 39527062");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 46 + "'", int9 == 46);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        boolean boolean9 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8);
        org.joda.time.DurationField[] durationFieldArray10 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray11 = strSet3.toArray(durationFieldArray10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMillis((int) (byte) 0);
        int int23 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks((int) '4');
        java.util.Date date28 = localDateTime25.toDate();
        boolean boolean29 = strSet3.equals((java.lang.Object) localDateTime25);
        int int30 = localDateTime25.getYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.plusDays((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(69);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationFieldArray10);
        org.junit.Assert.assertNotNull(durationFieldArray11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Feb 21 10:00:46 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime4 = dateTime1.toLocalTime();
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfSecond();
        org.joda.time.LocalTime localTime6 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(647);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 46 + "'", int2 == 46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21, 39);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.secondOfMinute();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime8.minuteOfHour();
        java.lang.String str26 = property25.getAsShortText();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = locale27.stripExtensions();
        int int29 = property25.getMaximumTextLength(locale28);
        java.lang.String str30 = dateTimeZone1.getName((long) 3, locale28);
        java.util.Locale locale34 = new java.util.Locale("clockhourOfDay", "java.io.IOException", "");
        boolean boolean35 = dateTimeZone1.equals((java.lang.Object) locale34);
        long long39 = dateTimeZone1.convertLocalToUTC((long) 646, true, (long) 53768216);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) ' ');
        int int43 = localDate40.size();
        org.joda.time.LocalDate.Property property44 = localDate40.era();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        boolean boolean46 = localDate40.equals((java.lang.Object) periodType45);
        org.joda.time.PeriodType periodType47 = periodType45.withMonthsRemoved();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        boolean boolean49 = dateTimeZone1.equals((java.lang.Object) periodType47);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "59" + "'", str26, "59");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals(locale34.toString(), "clockhourofday_JAVA.IO.IOEXCEPTION");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 646L + "'", long39 == 646L);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime(dateTimeZone18);
        boolean boolean21 = mutableDateTime1.isBefore((long) 100);
        boolean boolean23 = mutableDateTime1.isAfter(893L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(785);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 785 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.Interval interval9 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) mutableDateTime11);
        int int13 = mutableDateTime11.getDayOfYear();
        mutableDateTime11.addHours(276);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundFloor();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfWeek();
        int int20 = mutableDateTime18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("58");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"58\": Value 58 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        long long15 = instant13.getMillis();
        org.joda.time.Instant instant17 = instant13.minus((long) (byte) 1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) 49);
        org.joda.time.Instant instant21 = instant17.withDurationAdded((org.joda.time.ReadableDuration) duration19, 16);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.Period period23 = new org.joda.time.Period(57L, periodType1, chronology22);
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = durationField24.getMillis(17228215090756L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 17228215090756 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusDays(1439);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-21T12:59:24.320");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T12:59:24.320\" is malformed at \"22-02-21T12:59:24.320\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-21T14:56:24.646Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:56:24.646Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) -1);
        int int15 = localDateTime12.getCenturyOfEra();
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDayOfYear(5);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime12.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.minusMonths(39243612);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths(53833716);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMinutes(39243612);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) 39221019);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 1, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTime();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 1, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        int int38 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration40, 10);
        org.joda.time.Duration duration44 = duration40.toDuration();
        boolean boolean45 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) 100, 1L, periodType54);
        org.joda.time.Period period56 = period51.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Duration duration60 = period55.toDurationTo((org.joda.time.ReadableInstant) instant59);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration60, 39);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime47.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime47.setZone(dateTimeZone64);
        int int66 = mutableDateTime47.getYearOfEra();
        mutableDateTime47.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime47.toMutableDateTimeISO();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str74 = duration73.toString();
        org.joda.time.Duration duration75 = duration71.plus((org.joda.time.ReadableDuration) duration73);
        java.lang.String str76 = duration73.toString();
        mutableDateTime69.add((org.joda.time.ReadableDuration) duration73, 24);
        org.joda.time.Duration duration79 = duration44.minus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period82 = duration81.toPeriod();
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period85 = duration84.toPeriod();
        org.joda.time.Duration duration88 = duration84.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration90 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period91 = duration90.toPeriod();
        org.joda.time.Duration duration92 = duration84.plus((org.joda.time.ReadableDuration) duration90);
        boolean boolean93 = duration81.isLongerThan((org.joda.time.ReadableDuration) duration84);
        boolean boolean94 = duration44.isEqual((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration95 = duration44.toDuration();
        org.joda.time.LocalDateTime localDateTime96 = localDateTime21.plus((org.joda.time.ReadableDuration) duration95);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1969 + "'", int66 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT86400S" + "'", str74, "PT86400S");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT86400S" + "'", str76, "PT86400S");
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        java.lang.Object obj11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(0L, dateTimeZone13);
        int int16 = dateTimeZone13.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj11, dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.toString();
        org.joda.time.Chronology chronology19 = chronology7.withZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setMonthOfYear(312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 312 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale11);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology29, locale31, (java.lang.Integer) 10);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale38 = java.util.Locale.UK;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale11, locale15, locale17, locale21, locale24, locale25, locale27, locale31, locale35, locale37, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList40, filteringMode42);
        boolean boolean44 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4);
        strSet2.clear();
        boolean boolean46 = strSet2.isEmpty();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        org.joda.time.LocalDate.Property property50 = localDate47.dayOfWeek();
        org.joda.time.LocalDate localDate52 = localDate47.plusWeeks(56);
        org.joda.time.LocalDate localDate54 = localDate47.plusMonths(41);
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths(16);
        boolean boolean57 = strSet2.contains((java.lang.Object) localDate54);
        int int58 = localDate54.getYearOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "deu" + "'", str20, "deu");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2025 + "'", int58 == 2025);
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("February");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"February\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(3155760003135L);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.monthOfYear();
        long long6 = dateTimeField4.roundHalfFloor((long) 948);
        int int8 = dateTimeField4.getMinimumValue((long) 39478203);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant11.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        boolean boolean20 = dateTime15.isEqual((long) 53);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.DateTime dateTime25 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTime.Property property27 = dateTime15.property(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = property27.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        int int3 = timeZone1.getOffset((long) 23);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone4);
        java.lang.String str6 = timeZone4.getID();
        int int7 = timeZone4.getRawOffset();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("United States");
        boolean boolean10 = timeZone4.hasSameRules(timeZone9);
        boolean boolean11 = timeZone1.hasSameRules(timeZone9);
        boolean boolean12 = timeZone9.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        java.io.IOException iOException2 = new java.io.IOException("2022-02-21T14:57:59.445Z");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("2022-02-21T14:54:16.756", (java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException();
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        java.io.IOException iOException8 = new java.io.IOException();
        iOException6.addSuppressed((java.lang.Throwable) iOException8);
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException(throwable10);
        java.io.IOException iOException12 = new java.io.IOException();
        iOException11.addSuppressed((java.lang.Throwable) iOException12);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException16 = new java.io.IOException("PT86400S", (java.lang.Throwable) iOException15);
        iOException2.addSuppressed((java.lang.Throwable) iOException16);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 1L, periodType9);
        org.joda.time.Period period11 = period6.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration15 = period10.toDurationTo((org.joda.time.ReadableInstant) instant14);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration15, 39);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.yearOfEra();
        mutableDateTime2.setWeekOfWeekyear(14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) ' ');
        org.joda.time.Chronology chronology24 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        mutableDateTime2.setChronology(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.Period period37 = period32.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Duration duration41 = period36.toDurationTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant43 = instant40.plus((long) (byte) -1);
        org.joda.time.Instant instant46 = instant43.withDurationAdded(1L, (int) (short) -1);
        org.joda.time.Chronology chronology47 = instant43.getChronology();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = locale50.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology49, locale50, (java.lang.Integer) 45, (int) '4');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale50, (java.lang.Integer) 1970);
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale50.getDisplayScript(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 16, chronology24, locale50, (java.lang.Integer) 2022);
        java.lang.Object obj61 = dateTimeParserBucket60.saveState();
        org.joda.time.Chronology chronology62 = dateTimeParserBucket60.getChronology();
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.yearOfEra();
        org.joda.time.Period period70 = new org.joda.time.Period((long) ' ', chronology67);
        org.joda.time.DateTimeField dateTimeField71 = chronology67.halfdayOfDay();
        boolean boolean72 = dateTimeParserBucket60.restoreState((java.lang.Object) chronology67);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (short) 1, chronology74);
        org.joda.time.DateTime dateTime76 = dateTime75.toDateTime();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (short) 1, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime79.toDateTime();
        int int81 = dateTime76.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateMidnight dateMidnight85 = dateTime79.toDateMidnight();
        org.joda.time.Period period87 = org.joda.time.Period.seconds(5);
        org.joda.time.DateTime dateTime88 = dateTime79.minus((org.joda.time.ReadablePeriod) period87);
        int int89 = period87.getMinutes();
        boolean boolean90 = dateTimeParserBucket60.restoreState((java.lang.Object) int89);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant11.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        boolean boolean20 = dateTime15.isEqual((long) 53);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.DateTime dateTime25 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTime.Property property27 = dateTime15.property(dateTimeFieldType26);
        org.joda.time.DateTime.Property property28 = dateTime15.minuteOfDay();
        org.joda.time.DateTime.Property property29 = dateTime15.minuteOfDay();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) 'a', 1447200000, 505, 9999);
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(3155760003135L);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.dayOfWeek();
        long long7 = dateTimeField5.roundHalfCeiling(2366403180000L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2366409600000L + "'", long7 == 2366409600000L);
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        java.util.Locale locale10 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology8, locale10, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        int int18 = property16.get();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfFloorCopy();
        long long21 = chronology8.set((org.joda.time.ReadablePartial) localDateTime19, (long) 2022);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField24 = chronology8.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 39251693, (long) 292278993, periodType3, chronology8);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        boolean boolean32 = dateTime30.isEqualNow();
        int int33 = dateTime30.getDayOfYear();
        org.joda.time.Chronology chronology34 = dateTime30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology34);
        mutablePeriod25.add((long) 59, chronology34);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod25.setPeriod(163, 97, (-17251129), 53684566, 813, 39409698, 53779570, 348);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455600000L + "'", long21 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 47 + "'", int31 == 47);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime8 = localTime6.plusMillis((int) (byte) 100);
        org.joda.time.DateTime dateTime9 = dateTime2.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        boolean boolean15 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.withYearOfCentury(56);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        boolean boolean6 = dateTime4.isEqualNow();
        int int7 = dateTime4.getDayOfYear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(49L, chronology8);
        mutableDateTime11.setTime(86400L);
        mutableDateTime11.setMillis((long) 54005185);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        mutablePeriod4.addDays(53);
        int int7 = mutablePeriod4.getMonths();
        org.joda.time.Period period8 = mutablePeriod4.toPeriod();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalDate localDate9 = property6.setCopy(49);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfEra();
        org.joda.time.LocalDate localDate12 = property10.setCopy(53726991);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(226);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDate12.getValue(958);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 958");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) -1);
        int int15 = localDateTime12.getCenturyOfEra();
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDayOfYear(5);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime12.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.minusMonths(39243612);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekOfWeekyear(27);
        java.lang.String[] strArray35 = new java.lang.String[] { "dayOfMonth", "2022-02-21T10:53:40.615", "clockhourOfDay", "hi!", "PeriodType[Standard]", "Standard", "dayOfMonth", "59", "deu", "1970", "Standard" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        java.util.Spliterator<java.lang.String> strSpliterator38 = strSet36.spliterator();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getSecondOfMinute();
        boolean boolean44 = dateTime42.isEqualNow();
        int int45 = dateTime42.getDayOfYear();
        org.joda.time.Chronology chronology46 = dateTime42.getChronology();
        long long47 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime48 = property40.getLocalDateTime();
        boolean boolean49 = strSet36.equals((java.lang.Object) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusWeeks(39324);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(0L, dateTimeZone56);
        int int59 = dateTimeZone56.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str60 = dateTimeZone56.getID();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) 100, 1L, periodType66);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) 100, 1L, periodType70);
        org.joda.time.Period period72 = period67.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Duration duration76 = period71.toDurationTo((org.joda.time.ReadableInstant) instant75);
        mutableDateTime63.add((org.joda.time.ReadableDuration) duration76, 39);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime63.secondOfMinute();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime63.minuteOfHour();
        java.lang.String str81 = property80.getAsShortText();
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale locale83 = locale82.stripExtensions();
        int int84 = property80.getMaximumTextLength(locale83);
        java.lang.String str85 = dateTimeZone56.getName((long) 3, locale83);
        java.lang.String str86 = localDateTime53.toString("53811155", locale83);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime53.plusYears(226);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime23, (org.joda.time.ReadablePartial) localDateTime53);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 47 + "'", int43 == 47);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "59" + "'", str81, "59");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "53811155" + "'", str86, "53811155");
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.halfdayOfDay();
        boolean boolean15 = dateTimeField14.isLenient();
        int int17 = dateTimeField14.getMaximumValue((long) 68361073);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(6, 0);
        org.joda.time.LocalTime localTime4 = localTime2.plusMinutes(3);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds(86396);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 46, periodType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 0L, periodType10, chronology12);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.LocalTime localTime16 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, 0);
        org.joda.time.DateTime dateTime17 = localTime16.toDateTimeToday();
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(239);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate.Property property7 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(3);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        int int11 = dateTimeField10.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField10.getType();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period24 = period19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration28 = period23.toDurationTo((org.joda.time.ReadableInstant) instant27);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration28, 39);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime15.secondOfMinute();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime15.minuteOfHour();
        java.lang.String str33 = property32.getAsShortText();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = locale34.stripExtensions();
        int int36 = property32.getMaximumTextLength(locale35);
        java.lang.String str37 = locale35.getDisplayScript();
        java.lang.String str38 = dateTimeField10.getAsShortText((long) 39251167, locale35);
        long long41 = dateTimeField10.add((long) 955, (long) '#');
        org.joda.time.DurationField durationField42 = dateTimeField10.getLeapDurationField();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.format.DateTimeParser dateTimeParser47 = dateTimeFormatter46.getParser();
        java.lang.Integer int48 = dateTimeFormatter46.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter46.getPrinter();
        boolean boolean50 = dateTimeFormatter46.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter46.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter46.withPivotYear(4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(dateTimeZone57);
        org.joda.time.LocalTime localTime60 = localTime58.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime62 = localTime60.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime64 = localTime60.plusSeconds(40);
        int int65 = localTime60.getMillisOfSecond();
        org.joda.time.LocalTime localTime67 = localTime60.minusSeconds(86396191);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        int int70 = dateTime69.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = dateTime69.toString(dateTimeFormatter71);
        org.joda.time.DateTime dateTime74 = dateTime69.plusMonths(86396191);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology77);
        int int79 = dateTime78.getSecondOfMinute();
        boolean boolean80 = dateTime78.isEqualNow();
        int int81 = dateTime78.getDayOfYear();
        org.joda.time.Chronology chronology82 = dateTime78.getChronology();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology82);
        org.joda.time.DateTime dateTime84 = dateTime74.toDateTime(chronology82);
        org.joda.time.DurationField durationField85 = chronology82.eras();
        boolean boolean86 = localTime60.equals((java.lang.Object) chronology82);
        org.joda.time.DateTimeField dateTimeField87 = chronology82.dayOfMonth();
        java.util.Locale locale88 = java.util.Locale.CANADA;
        java.lang.String str89 = locale88.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket((long) 39282046, chronology82, locale88, (java.lang.Integer) 53670254, (int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter53.withLocale(locale88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = dateTimeField10.getAsShortText(206, locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 206");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "59" + "'", str33, "59");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Do" + "'", str38, "Do");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3024000955L + "'", long41 == 3024000955L);
        org.junit.Assert.assertNull(durationField42);
        org.junit.Assert.assertNull(dateTimeParser47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNull(dateTimePrinter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 591 + "'", int65 == 591);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 22 + "'", int70 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-21T15:00:47.591Z" + "'", str72, "2022-02-21T15:00:47.591Z");
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 47 + "'", int79 == 47);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = locale22.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        long long29 = dateTimeZone18.getMillisKeepLocal(dateTimeZone27, 315532800097L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 315532800097L + "'", long29 == 315532800097L);
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        int int6 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfSecond(44);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.minuteOfHour();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        java.util.Locale locale17 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology15, locale17, (java.lang.Integer) 39221019);
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = mutableDateTime5.toString("-1", locale17);
        java.lang.String str22 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder23 = builder0.setLocale(locale17);
        java.lang.Object obj24 = locale17.clone();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "United Kingdom" + "'", str22, "United Kingdom");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "en_GB");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "en_GB");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "en_GB");
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = localDate5.plusMonths(44);
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(55);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay();
        int int12 = localDate8.getWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292275051) + "'", int12 == (-292275051));
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours((-1));
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime7 = property6.roundCeilingCopy();
        boolean boolean8 = property6.isLeap();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        boolean boolean12 = dateTime10.isEqualNow();
        int int13 = dateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology14);
        int int16 = mutablePeriod15.getDays();
        org.joda.time.DateTime dateTime18 = dateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, (int) (byte) 0);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) ' ');
        org.joda.time.Chronology chronology24 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        org.joda.time.DurationField durationField26 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.hourOfDay();
        mutablePeriod15.setPeriod((-1900799884L), (long) 50, chronology24);
        int int29 = mutablePeriod15.getMillis();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 47 + "'", int2 == 47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 47 + "'", int11 == 47);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 934 + "'", int29 == 934);
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        int int4 = dateTime2.getYear();
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfYear();
        org.joda.time.DateTime.Property property6 = dateTime2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime2.withDate(806, 785, 39396100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 785 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime8 = localTime6.plusMillis((int) (byte) 100);
        org.joda.time.DateTime dateTime9 = dateTime2.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        boolean boolean15 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.withYearOfCentury(56);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds(54);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes((-625));
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime23.withDate(934, 53768216, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53768216 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime1.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, (int) (short) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime5, periodType12);
        mutableDateTime1.setTime((long) 37);
        mutableDateTime1.add(2363254620000L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        java.lang.String str7 = timeZone0.getID();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        org.joda.time.tz.Provider provider1 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet2 = provider1.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider1);
        java.util.Set<java.lang.String> strSet4 = provider1.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap9);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale14);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology32, locale34, (java.lang.Integer) 10);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale41 = java.util.Locale.UK;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale14, locale18, locale20, locale24, locale27, locale28, locale30, locale34, locale38, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList43, filteringMode45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet4, filteringMode45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "German" + "'", str29, "German");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "German" + "'", str39, "German");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode45.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList46);
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str10 = dateTimeFieldType9.getName();
        org.joda.time.LocalDateTime.Property property11 = localDateTime0.property(dateTimeFieldType9);
        int int12 = localDateTime0.getDayOfWeek();
        int int13 = localDateTime0.getWeekyear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 100);
        int int16 = dateTime15.getCenturyOfEra();
        org.joda.time.DateTime dateTime18 = dateTime15.minusMonths(5);
        org.joda.time.DateTime dateTime19 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property20 = dateTime15.year();
        org.joda.time.DateTime dateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = property20.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "clockhourOfDay" + "'", str10, "clockhourOfDay");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime29.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime33 = property31.set(4471931);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4471931 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = localDate5.plusMonths(59);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean4 = localDate2.isSupported(durationFieldType3);
        int int5 = localDate2.getWeekyear();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(0);
        org.joda.time.LocalDate localDate9 = localDate2.withCenturyOfEra(36);
        org.joda.time.LocalDate.Property property10 = localDate9.era();
        org.joda.time.LocalDate localDate12 = localDate9.plusMonths(414);
        org.joda.time.LocalDate.Property property13 = localDate9.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2025 + "'", int5 == 2025);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean4 = localDate2.isSupported(durationFieldType3);
        int int5 = localDate2.getWeekyear();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(0);
        org.joda.time.LocalDate localDate9 = localDate2.withCenturyOfEra(36);
        org.joda.time.LocalDate localDate11 = localDate2.minusDays(39307184);
        org.joda.time.LocalDate.Property property12 = localDate2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate2.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2025 + "'", int5 == 2025);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime5 = dateTimeFormatter2.parseMutableDateTime("14:58:21.393");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder4.setLanguage("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 234, (long) 53644753, chronology2);
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(53910347, 54005185, 31, 5996, 542, 53772966);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5996 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("United States");
        java.time.ZoneId zoneId3 = timeZone2.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        boolean boolean5 = timeZone2.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(39250942L, dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        int int5 = property3.get();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getSecondOfMinute();
        int int11 = dateTime9.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str17 = mutablePeriod16.toString();
        org.joda.time.DateTime dateTime18 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.TimeOfDay timeOfDay19 = dateTime9.toTimeOfDay();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str28 = dateTimeFieldType27.getName();
        int int29 = localDateTime21.indexOf(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime21.minusSeconds((int) '#');
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.Chronology chronology35 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.Chronology chronology38 = chronology35.withUTC();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        int int42 = localDateTime39.getHourOfDay();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology44, locale46);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) 100, 1L, periodType54);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) 100, 1L, periodType58);
        org.joda.time.Period period60 = period55.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Duration duration64 = period59.toDurationTo((org.joda.time.ReadableInstant) instant63);
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration64, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean68 = mutableDateTime51.isSupported(dateTimeFieldType67);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType67.getDurationType();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        dateTimeParserBucket48.saveField(dateTimeFieldType67, "2022", locale71);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType67.getDurationType();
        boolean boolean74 = localDateTime39.isSupported(durationFieldType73);
        int[] intArray76 = chronology38.get((org.joda.time.ReadablePartial) localDateTime39, (long) 39438309);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay19, 39523087, intArray76, 894);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39523087");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT10H100M97.021S" + "'", str17, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "clockhourOfDay" + "'", str28, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 39438309]");
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths(43);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(12);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.Period period13 = period11.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate14 = localDate8.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((-292275054));
        org.joda.time.LocalDate localDate18 = localDate14.minusYears(21);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType20 = periodType19.withMonthsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate18, periodType19);
        org.joda.time.PeriodType periodType22 = periodType19.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 917, periodType22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.Period period11 = org.joda.time.Period.millis(100);
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.Period period14 = period12.multipliedBy((int) 'x');
        org.joda.time.LocalTime localTime15 = localTime8.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalTime.Property property16 = localTime8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.LocalTime localTime20 = localTime18.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime22 = localTime20.minusHours((-1));
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        org.joda.time.LocalTime localTime25 = property23.addCopy((long) 893);
        org.joda.time.LocalTime localTime26 = property23.roundHalfFloorCopy();
        int int27 = localTime26.getMillisOfDay();
        int int28 = localTime26.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period39 = period34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Duration duration43 = period38.toDurationTo((org.joda.time.ReadableInstant) instant42);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration43, 39);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime30.yearOfEra();
        mutableDateTime30.setDayOfYear((int) ' ');
        mutableDateTime30.add((long) 53);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) 100, 1L, periodType55);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) 100, 1L, periodType59);
        org.joda.time.Period period61 = period56.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Duration duration65 = period60.toDurationTo((org.joda.time.ReadableInstant) instant64);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration65, 39);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime52.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime52.setZone(dateTimeZone69);
        int int71 = mutableDateTime52.getYearOfEra();
        int int72 = mutableDateTime52.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime52.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property73.getFieldType();
        int int75 = mutableDateTime30.get(dateTimeFieldType74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean77 = mutableDateTime30.isSupported(dateTimeFieldType76);
        org.joda.time.LocalTime.Property property78 = localTime26.property(dateTimeFieldType76);
        boolean boolean79 = localTime8.isSupported(dateTimeFieldType76);
        org.joda.time.LocalTime localTime81 = localTime8.withMillisOfDay(52);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 43200000 + "'", int27 == 43200000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1969 + "'", int71 == 1969);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 59 + "'", int72 == 59);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1969 + "'", int75 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(localTime81);
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        mutablePeriod4.addYears(59);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        java.util.Locale locale14 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology12, locale14, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 53, chronology12);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.PeriodType periodType29 = period24.getPeriodType();
        org.joda.time.Period period30 = period20.normalizedStandard(periodType29);
        boolean boolean31 = localDate17.equals((java.lang.Object) period20);
        org.joda.time.Interval interval32 = localDate17.toInterval();
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval32);
        mutablePeriod4.setPeriod(457070, 0, 54, (int) 'a', 0, 57, 41, (int) ' ');
        mutablePeriod4.setDays((int) (byte) 0);
        int int45 = mutablePeriod4.getSeconds();
        mutablePeriod4.setDays((-14));
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.099S" + "'", str27, "PT0.099S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 41 + "'", int45 == 41);
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant5, periodType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = instant5.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withField(dateTimeFieldType8, 39);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        int int14 = localDateTime11.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 900 + "'", int9 == 900);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths(41);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths(16);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period20 = period15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration24 = period19.toDurationTo((org.joda.time.ReadableInstant) instant23);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration24, 39);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime11.secondOfMinute();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime11.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (byte) 0);
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        java.lang.String str36 = dateTimeZone31.getNameKey((long) 3);
        org.joda.time.DateTime dateTime37 = localDate7.toDateTimeAtStartOfDay(dateTimeZone31);
        java.lang.String str39 = dateTimeZone31.getShortName((long) 120);
        long long41 = dateTimeZone31.convertUTCToLocal((long) 899);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 899L + "'", long41 == 899L);
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime6.toString(dateTimeFormatter8);
        org.joda.time.DateTime dateTime11 = dateTime6.plusMonths(86396191);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getSecondOfMinute();
        boolean boolean17 = dateTime15.isEqualNow();
        int int18 = dateTime15.getDayOfYear();
        org.joda.time.Chronology chronology19 = dateTime15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology19);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(3600100, (-198), 53921, (int) (short) 100, 53987462, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T15:00:48.292Z" + "'", str9, "2022-02-21T15:00:48.292Z");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime9 = property1.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(43);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        int int21 = property19.get();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField23 = property19.getField();
        org.joda.time.LocalDateTime localDateTime24 = property19.withMinimumValue();
        int int25 = localDateTime24.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period39 = period34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Duration duration43 = period38.toDurationTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime30.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.monthOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 1, chronology50);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) instant52, periodType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int56 = instant52.get(dateTimeFieldType55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime47.withField(dateTimeFieldType55, 39);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusSeconds(52);
        int int61 = localDateTime60.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusWeeks(22);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableDuration64, readableInstant65);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) 100, 1L, periodType69);
        org.joda.time.Period period72 = period70.minusSeconds((-1));
        java.lang.String str73 = period70.toString();
        org.joda.time.Period period74 = period70.toPeriod();
        org.joda.time.PeriodType periodType75 = period70.getPeriodType();
        org.joda.time.Period period76 = period66.normalizedStandard(periodType75);
        org.joda.time.Period period78 = period76.withSeconds(10);
        int int79 = period76.size();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime60.plus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.PeriodType periodType81 = period76.getPeriodType();
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime15, (org.joda.time.ReadablePartial) localDateTime44, periodType81);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (short) 1, chronology84);
        org.joda.time.DateTime.Property property86 = dateTime85.dayOfWeek();
        java.util.Locale locale87 = java.util.Locale.GERMAN;
        java.util.Locale locale88 = locale87.stripExtensions();
        int int89 = property86.getMaximumTextLength(locale87);
        org.joda.time.DurationField durationField90 = property86.getRangeDurationField();
        java.lang.String str91 = durationField90.getName();
        org.joda.time.DurationFieldType durationFieldType92 = durationField90.getType();
        int int93 = periodType81.indexOf(durationFieldType92);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 48 + "'", int25 == 48);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 900 + "'", int56 == 900);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT0.099S" + "'", str73, "PT0.099S");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "weeks" + "'", str91, "weeks");
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        java.util.Locale locale7 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology5, locale7, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale13);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = chronology5.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(0L, chronology17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology17);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = dateTime3.minusYears(0);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(3);
        org.joda.time.DateTime dateTime15 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(0);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = period9.plusDays(53600069);
        org.joda.time.Period period14 = period12.plusMonths(39239);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        int int17 = period16.getSeconds();
        boolean boolean18 = periodType0.equals((java.lang.Object) period16);
        org.joda.time.Period period19 = period16.toPeriod();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getSecondOfMinute();
        boolean boolean7 = dateTime5.isEqualNow();
        int int8 = dateTime5.getDayOfYear();
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology9);
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfWeek();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 39246272, (long) 5, chronology9);
        org.joda.time.DurationField durationField14 = chronology9.millis();
        long long17 = durationField14.subtract((long) 53684566, 35);
        java.lang.String str18 = durationField14.getName();
        long long21 = durationField14.subtract((long) 903, 2366403180000L);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53684531L + "'", long17 == 53684531L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millis" + "'", str18, "millis");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-2366403179097L) + "'", long21 == (-2366403179097L));
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        java.time.ZoneId zoneId5 = timeZone2.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = property16.getAsShortText(locale17);
        java.util.Locale.setDefault(category11, locale17);
        int int20 = property10.getMaximumTextLength(locale17);
        java.lang.String str21 = locale17.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = timeZone6.getDisplayName(false, 944, locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 944");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "15" + "'", str18, "15");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "US" + "'", str21, "US");
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        java.lang.Integer int9 = dateTimeParserBucket8.getOffsetInteger();
        int int10 = dateTimeParserBucket8.getOffset();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        java.util.Locale locale17 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology15, locale17, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        int int25 = property23.get();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        long long28 = chronology15.set((org.joda.time.ReadablePartial) localDateTime26, (long) 2022);
        org.joda.time.DateTimeField dateTimeField29 = chronology15.weekOfWeekyear();
        int int30 = dateTimeField29.getMaximumValue();
        int int33 = dateTimeField29.getDifference((long) 642, (long) 31);
        boolean boolean35 = dateTimeField29.isLeap(39251167L);
        dateTimeParserBucket8.saveField(dateTimeField29, 3);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        boolean boolean43 = property41.isLeap();
        boolean boolean44 = property41.isLeap();
        org.joda.time.LocalDateTime localDateTime45 = property41.roundFloorCopy();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale47.getCountry();
        java.lang.String str50 = locale47.getScript();
        java.lang.String str51 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, locale47);
        org.joda.time.LocalDateTime.Property property52 = localDateTime45.dayOfWeek();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645455600000L + "'", long28 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53 + "'", int30 == 53);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "CA" + "'", str49, "CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("Mo");
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder0.addUnicodeLocaleAttribute("54025662");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "mo");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime dateTime22 = dateTime1.plusDays(22);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        boolean boolean31 = property28.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        int int35 = dateTime33.getYearOfEra();
        int int36 = property28.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime40 = dateTime33.withDurationAdded((long) (byte) 0, 22);
        boolean boolean41 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime1.plusMillis(39469866);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfYear();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        java.lang.String str11 = property10.getName();
        org.joda.time.LocalTime localTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.roundCeilingCopy();
        org.joda.time.LocalTime localTime14 = property10.withMaximumValue();
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime.Property property13 = dateTime1.weekOfWeekyear();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (byte) 0);
        long long24 = dateTimeField22.roundHalfEven((long) 1);
        int int25 = dateTime15.get(dateTimeField22);
        int int27 = dateTimeField22.getLeapAmount((long) (byte) 10);
        java.lang.String str29 = dateTimeField22.getAsText((long) 1969);
        int int32 = dateTimeField22.getDifference(31536000000L, (long) 86396);
        int int33 = dateTime1.get(dateTimeField22);
        org.joda.time.LocalDateTime localDateTime34 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970" + "'", str29, "1970");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        java.lang.String str5 = durationField4.getName();
        boolean boolean6 = durationField4.isSupported();
        boolean boolean7 = durationField4.isPrecise();
        org.joda.time.DurationFieldType durationFieldType8 = durationField4.getType();
        org.joda.time.DurationFieldType durationFieldType9 = durationField4.getType();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eras" + "'", str5, "eras");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        org.joda.time.Period period1 = org.joda.time.Period.millis(457071);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfEven();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        java.util.Locale locale30 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology28, locale30, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale36);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        org.joda.time.Chronology chronology40 = chronology28.withZone(dateTimeZone39);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime23.toMutableDateTime(chronology40);
        mutableDateTime42.addMillis(527);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = locale47.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localTime53.toDateTimeToday();
        org.joda.time.LocalTime.Property property55 = localTime53.secondOfMinute();
        org.joda.time.LocalTime localTime57 = property55.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime59 = property55.addNoWrapToCopy(31);
        org.joda.time.LocalTime localTime60 = property55.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean62 = localTime60.isSupported(dateTimeFieldType61);
        mutableDateTime42.set(dateTimeFieldType61, 49);
        int int65 = mutableDateTime42.getDayOfWeek();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.LocalDate localDate12 = localDate10.plusYears(859);
        int int13 = localDate12.getDayOfYear();
        org.joda.time.LocalDate.Property property14 = localDate12.dayOfWeek();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 86396, 0L);
        int int3 = mutablePeriod2.getMonths();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weeks();
        int int5 = mutablePeriod2.get(durationFieldType4);
        mutablePeriod2.setMinutes(0);
        java.lang.String str8 = mutablePeriod2.toString();
        org.joda.time.Period period9 = mutablePeriod2.toPeriod();
        mutablePeriod2.add(39551738, 667, 34, 168, 2013, 39583262, 39236, 53991421);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(9722);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.Period period25 = period23.withDays((int) (byte) 1);
        org.joda.time.Period period27 = period25.minusWeeks(100);
        org.joda.time.Period period29 = period27.withDays(1);
        org.joda.time.Weeks weeks30 = period29.toStandardWeeks();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 1, chronology33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) instant35, periodType36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) ' ');
        org.joda.time.Chronology chronology41 = localDate38.getChronology();
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 1, periodType36, chronology41);
        org.joda.time.DurationField durationField43 = chronology41.centuries();
        long long45 = durationField43.getMillis(41);
        long long48 = durationField43.getValueAsLong((long) 365, (long) 100);
        org.joda.time.DurationFieldType durationFieldType49 = durationField43.getType();
        boolean boolean50 = period29.isSupported(durationFieldType49);
        int int51 = period20.indexOf(durationFieldType49);
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) period20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT-26.396S" + "'", str8, "PT-26.396S");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 129383503200000L + "'", long45 == 129383503200000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("2022-02-21T14:59:01.087Z", "PT0.024S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-21T14:59:01.087Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((int) (byte) -1, 507, 73, 53700016, 90000000, 39391192, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53700016 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 1, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        int int29 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration31, 10);
        org.joda.time.Duration duration35 = duration34.toDuration();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration34);
        mutableDateTime1.setDayOfYear(1);
        mutableDateTime1.addHours(0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 4, dateTimeZone2);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int13 = mutablePeriod12.getWeeks();
        int int14 = mutablePeriod12.getMonths();
        org.joda.time.LocalTime localTime15 = localTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime17 = localTime7.withMillisOfSecond(54);
        org.joda.time.LocalTime.Property property18 = localTime7.hourOfDay();
        org.joda.time.LocalTime localTime20 = property18.setCopy(4);
        org.joda.time.LocalTime localTime22 = property18.addCopy(4062915168L);
        org.joda.time.LocalTime localTime24 = property18.addCopy((long) (-6));
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localTime24.getValue(39402301);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 39402301");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(40394337);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.year();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) ' ');
        org.joda.time.Chronology chronology26 = localDate23.getChronology();
        mutableDateTime1.setChronology(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period38 = period33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Duration duration42 = period37.toDurationTo((org.joda.time.ReadableInstant) instant41);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration42, 39);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime29.yearOfEra();
        mutableDateTime29.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime29.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone49.convertLocalToUTC((long) (byte) 100, false);
        mutableDateTime29.setZone(dateTimeZone49);
        mutableDateTime1.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 1, chronology57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) instant59, periodType60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int63 = instant59.get(dateTimeFieldType62);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant68 = instant59.withDurationAdded((org.joda.time.ReadableDuration) duration66, 0);
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) instant69);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration66);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime1.secondOfMinute();
        int int73 = mutableDateTime1.getHourOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 900 + "'", int63 == 900);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 23 + "'", int73 == 23);
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime(dateTimeZone18);
        boolean boolean21 = mutableDateTime1.isBefore((long) 100);
        boolean boolean23 = mutableDateTime1.isAfter(893L);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.minuteOfHour();
        org.joda.time.Instant instant25 = mutableDateTime1.toInstant();
        mutableDateTime1.add(118140000L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(157, 9, 54006, 39532174);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 157 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.hourOfHalfday();
        int int6 = dateTimeField4.getMaximumValue((long) 68365629);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period12 = period7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Duration duration16 = period11.toDurationTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant18 = instant15.plus((long) (byte) -1);
        org.joda.time.Instant instant21 = instant18.withDurationAdded(1L, (int) (short) -1);
        org.joda.time.Chronology chronology22 = instant18.getChronology();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = locale25.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 45, (int) '4');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale25, (java.lang.Integer) 1970);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 53670306, 1176097622400751L, chronology32);
        org.joda.time.DurationField durationField34 = chronology32.centuries();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 39282046, chronology32);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        java.lang.Appendable appendable7 = null;
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(39);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime9.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime17 = dateTime9.withYearOfEra(209);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable7, (org.joda.time.ReadableInstant) dateTime9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) ' ');
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfHour();
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        java.lang.String str9 = chronology4.toString();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 549, chronology4);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate localDate14 = localDate11.plusYears(1);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtStartOfDay();
        boolean boolean16 = localDate10.equals((java.lang.Object) dateTime15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 1, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 1, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTime();
        int int27 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration29, 10);
        long long33 = duration32.getMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration39 = duration35.withDurationAdded((long) 38, (int) 'a');
        int int40 = duration32.compareTo((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        int int45 = dateTime44.getSecondOfMinute();
        boolean boolean46 = dateTime44.isEqualNow();
        int int47 = dateTime44.getDayOfYear();
        org.joda.time.Chronology chronology48 = dateTime44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology48);
        org.joda.time.DurationField durationField50 = chronology48.hours();
        org.joda.time.Period period51 = duration39.toPeriod(chronology48);
        org.joda.time.DateTime dateTime53 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration39, 53813);
        int int54 = dateTime15.getEra();
        org.joda.time.DateTime.Property property55 = dateTime15.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86500000L + "'", long33 == 86500000L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.hourOfDay();
        mutableDateTime1.setYear((int) ' ');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime1, readableInstant21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.lang.String str7 = locale5.getCountry();
        java.lang.String str8 = locale5.getDisplayName();
        java.lang.String str9 = locale5.getISO3Country();
        java.lang.String str10 = property3.getAsShortText(locale5);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CAN" + "'", str9, "CAN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Thu" + "'", str10, "Thu");
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology11, locale13, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        int int21 = property19.get();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        long long24 = chronology11.set((org.joda.time.ReadablePartial) localDateTime22, (long) 2022);
        org.joda.time.DateTimeField dateTimeField25 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology11.minuteOfHour();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.negated();
        int[] intArray36 = chronology11.get((org.joda.time.ReadablePeriod) period34, (long) 1969);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = property44.getAsShortText(locale45);
        java.util.Locale.setDefault(category39, locale45);
        int int48 = property38.getMaximumTextLength(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 9, chronology11, locale45, (java.lang.Integer) 15, 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withLocale(locale45);
        int int53 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter2.withPivotYear(0);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str63 = dateTimeFieldType62.getName();
        int int64 = localDateTime56.indexOf(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime56.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str76 = dateTimeFieldType75.getName();
        int int77 = localDateTime69.indexOf(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime69.minusSeconds(0);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (short) 1, chronology81);
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) instant83, periodType84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime56, (org.joda.time.ReadablePartial) localDateTime79, periodType84);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.UTC;
        long long90 = dateTimeZone87.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(dateTimeZone87);
        org.joda.time.DateTime dateTime92 = localDateTime56.toDateTime(dateTimeZone87);
        java.util.TimeZone timeZone93 = dateTimeZone87.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter55.withZone(dateTimeZone87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate96 = dateTimeFormatter94.parseLocalDate("53654799");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455600000L + "'", long24 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "15" + "'", str46, "15");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2000 + "'", int53 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "clockhourOfDay" + "'", str63, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "clockhourOfDay" + "'", str76, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 100L + "'", long90 == 100L);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeFormatter94);
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(864, 414, 54032205);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 864 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone2);
        boolean boolean8 = dateTimeZone2.isFixed();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(34999200005L, dateTimeZone2);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        boolean boolean15 = dateTime13.isEqualNow();
        int int16 = dateTime13.getDayOfYear();
        org.joda.time.Chronology chronology17 = dateTime13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfMonth();
        java.lang.Object obj21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, dateTimeZone23);
        int int26 = dateTimeZone23.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj21, dateTimeZone23);
        java.lang.String str28 = dateTimeZone23.toString();
        org.joda.time.Chronology chronology29 = chronology17.withZone(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period39 = period34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Duration duration43 = period38.toDurationTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant45 = instant42.plus((long) (byte) -1);
        org.joda.time.Instant instant48 = instant45.withDurationAdded(1L, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime50.add((org.joda.time.ReadableDuration) duration52, (int) (short) 100);
        mutableDateTime50.setYear(10);
        mutableDateTime50.addSeconds((int) (short) 0);
        boolean boolean59 = instant45.isEqual((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.MutableDateTime mutableDateTime60 = instant45.toMutableDateTime();
        int int61 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) mutableDateTime60);
        long long63 = dateTimeZone2.getMillisKeepLocal(dateTimeZone23, (long) 53730692);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 53730692L + "'", long63 == 53730692L);
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int5 = mutablePeriod4.getWeeks();
        mutablePeriod4.setMinutes(51);
        mutablePeriod4.setMinutes(52);
        mutablePeriod4.setHours(0);
        mutablePeriod4.addSeconds(5);
        mutablePeriod4.setPeriod((long) 647, (long) 153);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours((-1));
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        int int7 = localTime5.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime5.withHourOfDay(457094);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457094 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.Period period7 = period5.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate2.plus((org.joda.time.ReadablePeriod) period7);
        int int9 = localDate8.size();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) instant14, periodType15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) ' ');
        org.joda.time.Chronology chronology20 = localDate17.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 1, periodType15, chronology20);
        org.joda.time.DurationField durationField22 = chronology20.centuries();
        boolean boolean23 = localDate8.equals((java.lang.Object) durationField22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration27, readableInstant28);
        org.joda.time.Period period31 = period29.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate32 = localDate26.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((-292275054));
        org.joda.time.LocalDate localDate36 = localDate32.minusDays(2023);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period47 = period42.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Duration duration51 = period46.toDurationTo((org.joda.time.ReadableInstant) instant50);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration51, 39);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime38.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime38.setZone(dateTimeZone55);
        int int57 = mutableDateTime38.getYearOfEra();
        int int58 = mutableDateTime38.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime38.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property59.getFieldType();
        boolean boolean61 = localDate36.isSupported(dateTimeFieldType60);
        org.joda.time.LocalDate.Property property62 = localDate8.property(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) property62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        java.lang.String str6 = period3.toString();
        org.joda.time.Period period7 = period3.toPeriod();
        int int8 = period3.size();
        org.joda.time.Period period10 = period3.plusSeconds(20);
        org.joda.time.Period period12 = period3.minusMillis(53787332);
        org.joda.time.Weeks weeks13 = period12.toStandardWeeks();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.099S" + "'", str6, "PT0.099S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(weeks13);
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate.Property property7 = localDate0.dayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate0.dayOfWeek();
        org.joda.time.LocalDate.Property property9 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property9.addToCopy(39565758);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        int int2 = mutableDateTime0.getMonthOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime4.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        mutableDateTime7.addSeconds(9722);
        mutableDateTime7.addSeconds(43200000);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.monthOfYear();
        mutableDateTime7.addDays(32);
        java.util.GregorianCalendar gregorianCalendar15 = mutableDateTime7.toGregorianCalendar();
        boolean boolean16 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfDay(53723651);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53723651 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        int int6 = localDate5.getYearOfEra();
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfMinute();
        java.lang.String str9 = property8.getName();
        org.joda.time.DateTime dateTime10 = property8.withMaximumValue();
        org.joda.time.Chronology chronology11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) property8, chronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2023 + "'", int6 == 2023);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfMinute" + "'", str9, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.DateTime dateTime8 = dateTime1.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration12, (int) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.Interval interval18 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime16);
        int int19 = duration7.compareTo((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Period period23 = duration21.toPeriod();
        int int24 = duration7.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period33 = period28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Duration duration37 = period32.toDurationTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant39 = instant36.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant36.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getRangeDurationType();
        org.joda.time.DateTime.Property property43 = dateTime40.property(dateTimeFieldType41);
        boolean boolean45 = dateTime40.isEqual((long) 53);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.DateTime dateTime50 = dateTime40.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-292275054));
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(0L, dateTimeZone52);
        mutableDateTime53.addMillis(50);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        org.joda.time.PeriodType periodType62 = periodType60.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(86400L, periodType60);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime40, periodType60);
        org.joda.time.PeriodType periodType65 = periodType60.withMinutesRemoved();
        org.joda.time.PeriodType periodType66 = periodType65.withHoursRemoved();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 49 + "'", int2 == 49);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(31);
        org.joda.time.LocalDate localDate9 = property6.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period((java.lang.Object) property6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime8 = localTime6.plusMillis((int) (byte) 100);
        org.joda.time.DateTime dateTime9 = dateTime2.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        boolean boolean15 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.withMillis((long) 39);
        int int18 = dateTime17.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 39 + "'", int18 == 39);
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMonths(86396191);
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) 23, 21);
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        boolean boolean16 = dateTime14.isEqualNow();
        int int17 = dateTime14.getDayOfYear();
        org.joda.time.Chronology chronology18 = dateTime14.getChronology();
        long long19 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime20 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear(9);
        org.joda.time.DateTime dateTime27 = dateTime9.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T15:00:49.146Z" + "'", str4, "2022-02-21T15:00:49.146Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 49 + "'", int15 == 49);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.property(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withWeekyear(654);
        int int18 = localDateTime17.getYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 654 + "'", int18 == 654);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        boolean boolean6 = dateTime4.isEqualNow();
        int int7 = dateTime4.getDayOfYear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(41L, chronology8);
        mutableDateTime11.addMonths(0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.secondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49 + "'", int5 == 49);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean2 = dateTime1.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.withZoneRetainFields(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration12 = duration8.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13);
        org.joda.time.Duration duration15 = duration12.toDuration();
        java.lang.String str16 = duration12.toString();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period27 = period22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration31 = period26.toDurationTo((org.joda.time.ReadableInstant) instant30);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration31, 39);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime18.yearOfEra();
        mutableDateTime18.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime18.centuryOfEra();
        org.joda.time.Period period38 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.LocalTime localTime40 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period38, 0);
        org.joda.time.Period period42 = period38.multipliedBy(32);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period48 = period46.minusSeconds((-1));
        java.lang.String str49 = period46.toString();
        org.joda.time.Period period50 = period46.negated();
        org.joda.time.Period period51 = period42.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime52 = dateTime4.minus((org.joda.time.ReadablePeriod) period46);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86403.686S" + "'", str16, "PT86403.686S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.099S" + "'", str49, "PT0.099S");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean4 = localDate2.isSupported(durationFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths(52);
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime8 = localTime6.plusMillis((int) (byte) 100);
        org.joda.time.DateTime dateTime9 = dateTime2.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        boolean boolean15 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.withMillis((long) 39);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfMinute();
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = dateTimeField10.getAsShortText((int) (byte) 100, locale12);
        java.lang.String str18 = dateTimeField10.getAsShortText((long) 457070);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField10.getType();
        long long21 = dateTimeField10.roundHalfEven(0L);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 49 + "'", int4 == 49);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "deu" + "'", str15, "deu");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100" + "'", str16, "100");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setMillis((long) 958);
        mutableDateTime1.addMonths(14);
        mutableDateTime1.addHours(15);
        boolean boolean26 = mutableDateTime1.isAfterNow();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone2);
        java.lang.String str8 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 736226, dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        int int11 = dateTime9.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period22 = period17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Duration duration26 = period21.toDurationTo((org.joda.time.ReadableInstant) instant25);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration26, 39);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.yearOfEra();
        mutableDateTime13.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime13.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.addWrapField((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime35 = property32.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        long long38 = dateTimeZone36.nextTransition(10L);
        boolean boolean39 = dateTimeZone36.isFixed();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, 1L, periodType49);
        org.joda.time.Period period51 = period46.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Duration duration55 = period50.toDurationTo((org.joda.time.ReadableInstant) instant54);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration55, 39);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime42.secondOfMinute();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime42.minuteOfHour();
        java.lang.String str60 = property59.getAsShortText();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = locale61.stripExtensions();
        int int63 = property59.getMaximumTextLength(locale62);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField70 = localDateTime68.getField((int) (byte) 0);
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.lang.String str73 = dateTimeField70.getAsShortText((long) (byte) 1, locale72);
        java.lang.String str74 = locale62.getDisplayName(locale72);
        java.lang.String str75 = locale62.getISO3Country();
        java.lang.String str76 = dateTimeZone36.getName((long) 23, locale62);
        mutableDateTime35.setZone(dateTimeZone36);
        long long78 = mutableDateTime35.getMillis();
        org.joda.time.Instant instant79 = mutableDateTime35.toInstant();
        mutableDateTime35.addMonths(1971);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) mutableDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.setSecondOfDay(54007830);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54007830 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "59" + "'", str60, "59");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970" + "'", str73, "1970");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "German" + "'", str74, "German");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 7782000000L + "'", long78 == 7782000000L);
        org.junit.Assert.assertNotNull(instant79);
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        int int3 = timeZone1.getOffset((long) 23);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone4);
        java.lang.String str6 = timeZone4.getID();
        int int7 = timeZone4.getRawOffset();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("United States");
        boolean boolean10 = timeZone4.hasSameRules(timeZone9);
        boolean boolean11 = timeZone1.hasSameRules(timeZone9);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("days");
        boolean boolean14 = timeZone1.hasSameRules(timeZone13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("");
        int int18 = timeZone16.getOffset((long) 23);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone19);
        java.lang.String str21 = timeZone19.getID();
        int int22 = timeZone19.getRawOffset();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("United States");
        boolean boolean25 = timeZone19.hasSameRules(timeZone24);
        boolean boolean26 = timeZone16.hasSameRules(timeZone24);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("days");
        boolean boolean29 = timeZone16.hasSameRules(timeZone28);
        boolean boolean30 = timeZone1.hasSameRules(timeZone16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = timeZone16.getDisplayName(false, 53697431);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53697431");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GMT" + "'", str21, "GMT");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withZoneUTC();
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withDefaultYear(737);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        int int15 = localDateTime11.getDayOfMonth();
        int int16 = localDateTime11.getMinuteOfHour();
        org.joda.time.Chronology chronology17 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter10.withChronology(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022-02-21T14:56:35.613Z", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) ' ');
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField9 = chronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.Period period18 = period16.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate13.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period21 = period18.plusSeconds(45);
        long long24 = chronology6.add((org.joda.time.ReadablePeriod) period21, (long) 168, 47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(128, 39243612, 7584190, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39243612 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4062915168L + "'", long24 == 4062915168L);
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(10L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(149059);
        int int8 = localDateTime7.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49 + "'", int8 == 49);
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(1);
        int int21 = localDateTime18.getHourOfDay();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration26 = duration23.withDurationAdded((long) 20, 0);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 1, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTime();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 1, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        int int37 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration39, 10);
        java.lang.String str43 = duration28.toString();
        boolean boolean44 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period45 = duration26.toPeriod();
        org.joda.time.Period period47 = period45.plusMinutes(393);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime18.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime18.plusMonths(39321381);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMonths(290);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.year();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT86400S" + "'", str43, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        boolean boolean19 = mutableDateTime1.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(54065791, 40475569, 53670254);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40475569 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.Period period7 = period5.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(56);
        int int11 = localDate8.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(40);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration21 = duration17.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration25, (int) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getYearOfCentury();
        org.joda.time.Interval interval31 = duration25.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = duration21.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 1, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 1, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        int int41 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType43 = periodType42.withDaysRemoved();
        org.joda.time.Period period44 = duration25.toPeriodTo((org.joda.time.ReadableInstant) dateTime39, periodType42);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period47 = period45.minusMinutes(70);
        org.joda.time.Period period48 = period47.normalizedStandard();
        int int49 = period48.getWeeks();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) 100, 1L, periodType54);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) 100, 1L, periodType58);
        org.joda.time.Period period60 = period55.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Duration duration64 = period59.toDurationTo((org.joda.time.ReadableInstant) instant63);
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration64, 39);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime51.secondOfMinute();
        org.joda.time.Instant instant68 = mutableDateTime51.toInstant();
        mutableDateTime51.setWeekyear(39250977);
        org.joda.time.Duration duration71 = period48.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.LocalDate localDate72 = localDate8.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period74 = period48.minusMonths(903);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 1, chronology20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) instant22, periodType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int26 = instant22.get(dateTimeFieldType25);
        java.lang.String str27 = dateTimeFieldType25.getName();
        java.lang.String str28 = dateTimeFieldType25.toString();
        int int29 = localDateTime4.get(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime4.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime4.withDayOfYear(5);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks(40475569);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.era();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusMinutes(279);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 900 + "'", int26 == 900);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfDay" + "'", str27, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 600 + "'", int29 == 600);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "2022-02-21");
        java.util.Locale.Builder builder6 = builder1.setVariant("");
        java.util.Locale.Builder builder7 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("53800965");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 53800965 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        java.lang.String str34 = property33.getAsString();
        org.joda.time.LocalTime localTime35 = property33.roundHalfFloorCopy();
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.millisOfSecond();
        org.joda.time.DurationField durationField39 = dateTimeField38.getDurationField();
        long long40 = durationField39.getUnitMillis();
        int int43 = durationField39.getDifference((long) 70, 39250942L);
        boolean boolean44 = durationField39.isPrecise();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "16" + "'", str34, "16");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-39250872) + "'", int43 == (-39250872));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("United States");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("United States");
        java.time.ZoneId zoneId6 = timeZone5.toZoneId();
        java.time.ZoneId zoneId7 = timeZone5.toZoneId();
        boolean boolean8 = timeZone1.hasSameRules(timeZone5);
        int int9 = timeZone1.getRawOffset();
        int int11 = timeZone1.getOffset((long) ' ');
        java.lang.Object obj12 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Days days3 = period2.toStandardDays();
        int[] intArray4 = period2.getValues();
        org.joda.time.Period period6 = period2.withSeconds((-1));
        org.joda.time.Period period8 = period2.minusMonths(847);
        org.joda.time.Period period9 = period8.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale13);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period27 = period22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration31 = period26.toDurationTo((org.joda.time.ReadableInstant) instant30);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration31, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean35 = mutableDateTime18.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getDurationType();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        dateTimeParserBucket15.saveField(dateTimeFieldType34, "2022", locale38);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType34.getDurationType();
        org.joda.time.Period period42 = period9.withField(durationFieldType40, 793);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 24, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(46);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        org.joda.time.LocalTime localTime7 = property4.addCopy((long) 53735132);
        boolean boolean8 = property4.isLeap();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        int int7 = localDateTime6.getYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        int int9 = property8.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9722 + "'", int7 == 9722);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        int int4 = dateTime2.getYear();
        int int5 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis(97);
        org.joda.time.DateTime dateTime9 = dateTime2.withMillis(1645455600000L);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime.Property property11 = dateTime2.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTime.Property property4 = dateTime2.weekOfWeekyear();
        boolean boolean6 = dateTime2.isAfter((long) 25);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21, 39);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.yearOfEra();
        mutableDateTime8.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime8.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone28.convertLocalToUTC((long) (byte) 100, false);
        mutableDateTime8.setZone(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime2.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone34.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.DateTime dateTime38 = dateTime2.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime.Property property39 = dateTime2.minuteOfHour();
        org.joda.time.DateTime.Property property40 = dateTime2.weekyear();
        java.lang.String str41 = property40.getName();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L + "'", long31 == 100L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "weekyear" + "'", str41, "weekyear");
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(7, 86396191, 34, 27, (-625), 53711646, 39377696, 56);
        org.joda.time.Period period10 = org.joda.time.Period.millis(69);
        org.joda.time.Period period12 = period10.minusDays(100);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration23, (int) (short) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        org.joda.time.Interval interval29 = duration23.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration30 = duration19.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Period period33 = period31.plusMillis((int) (short) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) ' ');
        org.joda.time.Chronology chronology39 = localDate36.getChronology();
        org.joda.time.Period period40 = duration35.toPeriod(chronology39);
        boolean boolean41 = period33.equals((java.lang.Object) duration35);
        org.joda.time.Period period42 = period10.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.format.PeriodFormatter periodFormatter43 = null;
        java.lang.String str44 = period42.toString(periodFormatter43);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT-23H-59M-53.627S" + "'", str44, "PT-23H-59M-53.627S");
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period34 = period29.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Duration duration38 = period33.toDurationTo((org.joda.time.ReadableInstant) instant37);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration38, 39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.centuries();
        int int45 = period43.get(durationFieldType44);
        mutableDateTime25.add((org.joda.time.ReadablePeriod) period43, 54);
        int int48 = property22.getDifference((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime mutableDateTime50 = property22.add((long) 39266896);
        mutableDateTime50.addSeconds(14400000);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.DateTime dateTime4 = property2.withMinimumValue();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = property2.getAsShortText(locale5);
        org.joda.time.DateTime dateTime8 = property2.setCopy(53700016);
        java.lang.String str9 = property2.getAsText();
        int int10 = property2.get();
        org.joda.time.DateTimeField dateTimeField11 = property2.getField();
        org.joda.time.DateTime dateTime13 = property2.addToCopy(55);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale16.getCountry();
        java.lang.String str19 = locale16.getDisplayName();
        java.lang.String str21 = locale16.getExtension('a');
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField29 = localDateTime27.getField((int) (byte) 0);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = dateTimeField29.getAsShortText((long) (byte) 1, locale31);
        java.lang.String str35 = nameProvider22.getShortName(locale31, "2022-02-21", "59");
        java.lang.String str36 = locale16.getDisplayLanguage(locale31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = property2.setCopy("2022-02-21T14:58:11.255Z", locale31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:58:11.255Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "54049727" + "'", str6, "54049727");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "54049727" + "'", str9, "54049727");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54049727 + "'", int10 == 54049727);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CA" + "'", str18, "CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970" + "'", str32, "1970");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English" + "'", str36, "English");
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        boolean boolean26 = instant11.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35);
        org.joda.time.Duration duration37 = duration34.toDuration();
        int int38 = duration28.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant39 = instant11.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime41 = instant39.toMutableDateTime();
        mutableDateTime41.add((long) 53861022);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.era();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        java.io.IOException iOException1 = new java.io.IOException("1973-09-02T23:59:56.191Z");
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period12.multipliedBy((int) (short) 100);
        org.joda.time.Duration duration15 = period14.toStandardDuration();
        org.joda.time.Period period17 = period14.minusMinutes(0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.Period period22 = period20.withDays((int) (byte) 1);
        org.joda.time.Period period24 = period22.minusWeeks(100);
        org.joda.time.Period period26 = period24.withMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration27, readableInstant28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period35 = period33.minusSeconds((-1));
        java.lang.String str36 = period33.toString();
        org.joda.time.Period period37 = period33.toPeriod();
        org.joda.time.PeriodType periodType38 = period33.getPeriodType();
        org.joda.time.Period period39 = period29.normalizedStandard(periodType38);
        org.joda.time.Period period41 = period29.plusSeconds(45);
        org.joda.time.Period period42 = period26.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) 100, 1L, periodType51);
        org.joda.time.Period period53 = period48.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Duration duration57 = period52.toDurationTo((org.joda.time.ReadableInstant) instant56);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration57, 39);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.centuries();
        int int64 = period62.get(durationFieldType63);
        mutableDateTime44.add((org.joda.time.ReadablePeriod) period62, 54);
        org.joda.time.Period period67 = period42.withFields((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DurationFieldType[] durationFieldTypeArray68 = period42.getFieldTypes();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.forFields(durationFieldTypeArray68);
        org.joda.time.PeriodType periodType70 = periodType69.withHoursRemoved();
        org.joda.time.PeriodType periodType71 = periodType69.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period72 = new org.joda.time.Period((java.lang.Object) 0, periodType71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0.099S" + "'", str36, "PT0.099S");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(durationFieldTypeArray68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 1L, periodType9);
        org.joda.time.Period period11 = period6.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration15 = period10.toDurationTo((org.joda.time.ReadableInstant) instant14);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration15, 39);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.secondOfMinute();
        mutableDateTime2.addYears(3);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime2.add(readablePeriod21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime2.dayOfYear();
        mutableDateTime2.setMillis((long) 81);
        mutableDateTime2.addHours((int) 'x');
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 1L, periodType43);
        org.joda.time.Period period45 = period40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Duration duration49 = period44.toDurationTo((org.joda.time.ReadableInstant) instant48);
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration49, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean53 = mutableDateTime36.isSupported(dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType52.getDurationType();
        java.util.Locale locale56 = java.util.Locale.CANADA;
        dateTimeParserBucket33.saveField(dateTimeFieldType52, "2022", locale56);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant60 = instant58.withMillis(0L);
        org.joda.time.Chronology chronology61 = instant60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.eras();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType52.getField(chronology61);
        mutableDateTime2.setChronology(chronology61);
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.fromMillisOfDay(39427838L, chronology61);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localTime65);
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        int int10 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        java.lang.String str16 = duration1.toString();
        org.joda.time.Period period17 = duration1.toPeriod();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime19.toString(dateTimeFormatter21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime19, periodType23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.millis(1645455600000L);
        org.joda.time.Minutes minutes27 = duration26.toStandardMinutes();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration33 = duration29.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration37, (int) (short) 100);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getYearOfCentury();
        org.joda.time.Interval interval43 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = duration33.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Duration duration49 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration46, 54);
        org.joda.time.Duration duration50 = duration26.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration51 = duration26.toDuration();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = dateTime53.getSecondOfMinute();
        boolean boolean55 = dateTime53.isEqualNow();
        int int56 = dateTime53.getDayOfYear();
        org.joda.time.Chronology chronology57 = dateTime53.getChronology();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.DateTime dateTime60 = dateTime53.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime62.add((org.joda.time.ReadableDuration) duration64, (int) (short) 100);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        int int69 = dateTime68.getYearOfCentury();
        org.joda.time.Interval interval70 = duration64.toIntervalTo((org.joda.time.ReadableInstant) dateTime68);
        int int71 = duration59.compareTo((org.joda.time.ReadableDuration) duration64);
        boolean boolean72 = duration51.isEqual((org.joda.time.ReadableDuration) duration64);
        boolean boolean73 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration51);
        long long74 = duration1.getStandardDays();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate77 = localDate75.plusMonths(43);
        org.joda.time.DateMidnight dateMidnight78 = localDate75.toDateMidnight();
        org.joda.time.Chronology chronology79 = dateMidnight78.getChronology();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.Period period81 = period80.toPeriod();
        org.joda.time.Period period83 = period80.withYears(0);
        org.joda.time.Period period85 = period83.minusWeeks(53865310);
        int int86 = period83.getMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T15:00:49.859Z" + "'", str22, "2022-02-21T15:00:49.859Z");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 49 + "'", int54 == 49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 22 + "'", int69 == 22);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getSecondOfMinute();
        boolean boolean7 = dateTime5.isEqualNow();
        int int8 = dateTime5.getDayOfYear();
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology9);
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfWeek();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 39246272, (long) 5, chronology9);
        org.joda.time.DurationField durationField14 = chronology9.millis();
        long long16 = durationField14.getMillis(53813);
        int int19 = durationField14.getValue((long) 53854723, 1692665045348227651L);
        long long22 = durationField14.getMillis(276435975563992L, (long) 39391533);
        long long25 = durationField14.getDifferenceAsLong((long) 53736402, (long) 9);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 49 + "'", int6 == 49);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 53813L + "'", long16 == 53813L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53854723 + "'", int19 == 53854723);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 276435975563992L + "'", long22 == 276435975563992L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 53736393L + "'", long25 == 53736393L);
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 1, chronology2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.DateTime.Property property5 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime6, periodType7);
        mutablePeriod8.setMillis(261);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = null;
        java.lang.String str5 = nameProvider0.getName(locale2, "DateTimeField[year]", "minuteOfDay");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.secondOfMinute();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime7.minuteOfHour();
        java.lang.String str25 = property24.getAsShortText();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        int int28 = property24.getMaximumTextLength(locale27);
        java.lang.String str31 = nameProvider0.getName(locale27, "f\351vrier", "2022-02-21T14:56:21.097Z");
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.lang.String str36 = nameProvider0.getShortName(locale33, "2022-02-21T14:56:06.238Z", "11");
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale38.getCountry();
        java.lang.String str41 = locale38.getDisplayName();
        java.lang.String str43 = locale38.getExtension('a');
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField51 = localDateTime49.getField((int) (byte) 0);
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = dateTimeField51.getAsShortText((long) (byte) 1, locale53);
        java.lang.String str57 = nameProvider44.getShortName(locale53, "2022-02-21", "59");
        java.lang.String str58 = locale38.getDisplayLanguage(locale53);
        java.lang.String str61 = nameProvider0.getName(locale38, "minuteOfDay", "2022-02-21T14:59:52.549Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "59" + "'", str25, "59");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CA" + "'", str40, "CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English (Canada)" + "'", str41, "English (Canada)");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970" + "'", str54, "1970");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English" + "'", str58, "English");
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        java.lang.String[] strArray11 = new java.lang.String[] { "dayOfMonth", "2022-02-21T10:53:40.615", "clockhourOfDay", "hi!", "PeriodType[Standard]", "Standard", "dayOfMonth", "59", "deu", "1970", "Standard" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet12.spliterator();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        boolean boolean20 = dateTime18.isEqualNow();
        int int21 = dateTime18.getDayOfYear();
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        long long23 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime24 = property16.getLocalDateTime();
        boolean boolean25 = strSet12.equals((java.lang.Object) localDateTime24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withHourOfDay(1286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1286 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        boolean boolean7 = dateTimeFormatter3.isParser();
        boolean boolean8 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (byte) 0);
        int int14 = dateTimeZone10.getStandardOffset(315532800097L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone15.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(39);
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter3.withZone(dateTimeZone10);
        java.util.Locale locale24 = dateTimeFormatter23.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.parse("53943397", dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(locale24);
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField6 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField8 = chronology3.hours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        boolean boolean14 = dateTime12.isEqualNow();
        int int15 = dateTime12.getDayOfYear();
        org.joda.time.Chronology chronology16 = dateTime12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology16);
        org.joda.time.DurationField durationField18 = chronology16.hours();
        int int19 = durationField8.compareTo(durationField18);
        long long22 = durationField18.subtract((long) 86396191, (long) (short) 100);
        long long24 = durationField18.getMillis(116);
        long long27 = durationField18.add(3024000955L, (long) 53941221);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 49 + "'", int13 == 49);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-273603809L) + "'", long22 == (-273603809L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 417600000L + "'", long24 == 417600000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 194191419600955L + "'", long27 == 194191419600955L);
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        boolean boolean9 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        boolean boolean19 = strSet13.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        boolean boolean20 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream21 = languageRangeList18.parallelStream();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale33);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale39.getISO3Language();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale49 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology51, locale53, (java.lang.Integer) 10);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale57.getDisplayName();
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale33, locale37, locale39, locale43, locale46, locale47, locale49, locale53, locale57, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList62, filteringMode64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap66);
        boolean boolean68 = strSet23.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList18, (java.util.Collection<java.lang.String>) strSet23);
        int int70 = strSet23.size();
        int int71 = strSet23.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeStream21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "deu" + "'", str42, "deu");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "German" + "'", str48, "German");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "German" + "'", str58, "German");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode64.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(39);
        org.joda.time.DateTime.Property property4 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime3.withDurationAdded((long) 898, 54038);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 164, (long) 54029070);
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        int int10 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        java.lang.String str16 = duration1.toString();
        org.joda.time.Duration duration18 = duration1.minus((long) 39221019);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate24 = localDate19.plusWeeks(56);
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate.Property property26 = localDate24.era();
        org.joda.time.LocalDate localDate28 = localDate24.minusDays(55);
        int int29 = localDate24.size();
        org.joda.time.Chronology chronology30 = localDate24.getChronology();
        org.joda.time.Period period31 = duration1.toPeriod(chronology30);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = chronology30.getDateTimeMillis((long) 53876712, 54029070, 53921, 312, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54029070 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime1.toString(dateTimeFormatter22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime1.toMutableDateTime();
        int int26 = mutableDateTime25.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setDayOfMonth(39527062);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39527062 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-02-01T23:59:56.244Z" + "'", str23, "1969-02-01T23:59:56.244Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime21, readableDuration22);
        mutableDateTime21.addMonths(53670254);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatter29.getParser();
        java.lang.Integer int31 = dateTimeFormatter29.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatter29.getPrinter();
        boolean boolean33 = dateTimeFormatter29.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter29.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeFormatter34.getZone();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(10L, dateTimeZone35);
        mutableDateTime21.setZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone35);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNull(dateTimeParser30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(dateTimePrinter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale3, (java.lang.Integer) 10);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        int int11 = dateTimeZone8.getStandardOffset((long) 164);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-19T14:54:47.026");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusDays(292275055);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(46);
        java.lang.String str6 = property3.getAsString();
        int int7 = property3.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property3.withMaximumValue();
        int int9 = localDateTime8.getCenturyOfEra();
        int int10 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekyear(490);
        int int13 = localDateTime8.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withMinuteOfHour(1974);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1974 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "15" + "'", str6, "15");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period41 = period36.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Duration duration45 = period40.toDurationTo((org.joda.time.ReadableInstant) instant44);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration45, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean49 = mutableDateTime32.isSupported(dateTimeFieldType48);
        org.joda.time.LocalTime.Property property50 = localTime5.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 1, chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(dateTimeZone54);
        org.joda.time.LocalTime localTime57 = localTime55.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime59 = localTime57.plusMillis((int) (byte) 100);
        org.joda.time.DateTime dateTime60 = dateTime53.withFields((org.joda.time.ReadablePartial) localTime59);
        int int61 = dateTime60.getSecondOfDay();
        boolean boolean63 = dateTime60.isBefore((long) '#');
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.util.TimeZone.setDefault(timeZone64);
        timeZone64.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTime dateTime70 = dateTime60.withZoneRetainFields(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = localTime5.toDateTimeToday(dateTimeZone69);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 39650 + "'", int61 == 39650);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        org.joda.time.DateTime dateTime3 = localTime2.toDateTimeToday();
        org.joda.time.LocalTime localTime5 = localTime2.plusMinutes(39307184);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        mutableDateTime7.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime7.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.convertLocalToUTC((long) (byte) 100, false);
        mutableDateTime7.setZone(dateTimeZone27);
        long long34 = dateTimeZone27.adjustOffset(315532800097L, true);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 28);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.monthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getSecondOfMinute();
        boolean boolean43 = dateTime41.isEqualNow();
        int int44 = dateTime41.getDayOfYear();
        org.joda.time.Chronology chronology45 = dateTime41.getChronology();
        long long46 = property39.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDateTime localDateTime47 = property39.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((-1511999969L));
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str52 = dateTimeFieldType51.toString();
        org.joda.time.LocalDateTime.Property property53 = localDateTime47.property(dateTimeFieldType51);
        int int54 = dateTime37.get(dateTimeFieldType51);
        int int55 = mutableDateTime35.get(dateTimeFieldType51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime57 = localTime5.withField(dateTimeFieldType51, 432);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 432 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 315532800097L + "'", long34 == 315532800097L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hourOfHalfday" + "'", str52, "hourOfHalfday");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period2.plusSeconds(45);
        org.joda.time.Period period16 = period14.minusYears(31);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration19, readableInstant20);
        org.joda.time.Period period23 = period21.withDays((int) (byte) 1);
        org.joda.time.Period period25 = period23.minusWeeks(100);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period31 = period29.minusSeconds((-1));
        java.lang.String str32 = period29.toString();
        org.joda.time.Period period33 = period29.toPeriod();
        org.joda.time.PeriodType periodType34 = period29.getPeriodType();
        org.joda.time.Period period35 = period25.withPeriodType(periodType34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 41, (long) 'x', periodType34);
        org.joda.time.Period period37 = period14.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period46 = period41.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period48 = period45.plusDays(53600069);
        org.joda.time.Period period50 = period48.plusMonths(39239);
        org.joda.time.Period period52 = period50.minusSeconds((-1));
        org.joda.time.DurationFieldType durationFieldType54 = period50.getFieldType(0);
        int int55 = mutablePeriod36.get(durationFieldType54);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(53711646, 39246272, 163, (int) '#', 276, 35, 55, 2922789, periodType64);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period68 = period65.plusYears(39251167);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.099S" + "'", str32, "PT0.099S");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) -1);
        java.lang.Object obj25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(obj25);
        mutableDateTime24.add((org.joda.time.ReadablePeriod) mutablePeriod26, 120);
        mutablePeriod26.setMinutes(14);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.Period period42 = period37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Duration duration46 = period41.toDurationTo((org.joda.time.ReadableInstant) instant45);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration46, 39);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime33.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime33.setZone(dateTimeZone50);
        int int52 = mutableDateTime33.getYearOfEra();
        int int53 = mutableDateTime33.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime33.year();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) ' ');
        org.joda.time.Chronology chronology58 = localDate55.getChronology();
        mutableDateTime33.setChronology(chronology58);
        int int60 = mutableDateTime33.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) 100, 1L, periodType66);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) 100, 1L, periodType70);
        org.joda.time.Period period72 = period67.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Duration duration76 = period71.toDurationTo((org.joda.time.ReadableInstant) instant75);
        mutableDateTime63.add((org.joda.time.ReadableDuration) duration76, 39);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime63.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime63.setZone(dateTimeZone80);
        int int82 = mutableDateTime63.getYearOfEra();
        int int83 = mutableDateTime63.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime63.year();
        mutableDateTime63.setSecondOfDay(50);
        org.joda.time.Chronology chronology87 = mutableDateTime63.getChronology();
        mutablePeriod26.setPeriod((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) mutableDateTime63);
        mutableDateTime63.addWeekyears(815);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1969 + "'", int52 == 1969);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 59 + "'", int53 == 59);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 86396 + "'", int60 == 86396);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1969 + "'", int82 == 1969);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 59 + "'", int83 == 59);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property4.setCopy((int) ' ');
        org.joda.time.Instant instant8 = org.joda.time.Instant.parse("14");
        int int9 = property4.compareTo((org.joda.time.ReadableInstant) instant8);
        org.joda.time.MutableDateTime mutableDateTime10 = instant8.toMutableDateTimeISO();
        org.joda.time.Instant instant12 = instant8.withMillis(1645455286500L);
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        int int10 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        java.lang.String str16 = duration1.toString();
        org.joda.time.Duration duration18 = duration1.minus((long) 39221019);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap25);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale30);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology48, locale50, (java.lang.Integer) 10);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale57 = java.util.Locale.UK;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale30, locale34, locale36, locale40, locale43, locale44, locale46, locale50, locale54, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        boolean boolean63 = strSet21.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        boolean boolean66 = strSet21.remove((java.lang.Object) duration65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period69 = duration68.toPeriod();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period72 = duration71.toPeriod();
        org.joda.time.Duration duration75 = duration71.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period78 = duration77.toPeriod();
        org.joda.time.Duration duration79 = duration71.plus((org.joda.time.ReadableDuration) duration77);
        boolean boolean80 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration82 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration71, 32);
        org.joda.time.Duration duration83 = duration18.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) 49);
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType87 = periodType86.withMinutesRemoved();
        org.joda.time.PeriodType periodType88 = periodType86.withDaysRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime85, periodType88);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "deu" + "'", str39, "deu");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "German" + "'", str55, "German");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode61.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(periodType88);
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.yearOfEra();
        org.joda.time.Period period7 = new org.joda.time.Period((long) ' ', chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        long long13 = chronology4.getDateTimeMillis(39239, (int) (byte) 1, 19, 751);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology4);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology16, locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = dateTime14.withZone(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        boolean boolean28 = dateTime26.isBefore((long) (short) 100);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTime(chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 1, chronology35);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) instant37, periodType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int41 = instant37.get(dateTimeFieldType40);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant46 = instant37.withDurationAdded((org.joda.time.ReadableDuration) duration44, 0);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) instant47);
        java.lang.String str49 = duration44.toString();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType51 = periodType50.withMillisRemoved();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration44, periodType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = new org.joda.time.Period((java.lang.Object) localDateTime24, periodType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1176097622400751L + "'", long13 == 1176097622400751L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 900 + "'", int41 == 900);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT-0.007S" + "'", str49, "PT-0.007S");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        mutableDateTime1.setYear(10);
        mutableDateTime1.addSeconds((int) (short) 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) ' ');
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str23 = dateTimeField20.getAsText(81, locale22);
        int int24 = dateTimeField13.getMaximumShortTextLength(locale22);
        java.lang.String str25 = locale22.getCountry();
        java.lang.String str26 = locale22.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "81" + "'", str23, "81");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr_CA" + "'", str26, "fr_CA");
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 1, chronology9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) instant11, periodType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int15 = instant11.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withField(dateTimeFieldType14, 39);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(52);
        int int20 = localDateTime19.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusWeeks(22);
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period34 = period29.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Duration duration38 = period33.toDurationTo((org.joda.time.ReadableInstant) instant37);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration38, 39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime25.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime25.setZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime23.withZone(dateTimeZone42);
        org.joda.time.Interval interval45 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 1, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTime();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 1, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTime();
        int int56 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration61 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration58, 10);
        long long62 = duration61.getMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period65 = duration64.toPeriod();
        org.joda.time.Duration duration68 = duration64.withDurationAdded((long) 38, (int) 'a');
        int int69 = duration61.compareTo((org.joda.time.ReadableDuration) duration68);
        boolean boolean70 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime72.add((org.joda.time.ReadableDuration) duration74, (int) (short) 100);
        mutableDateTime72.setYear(10);
        mutableDateTime72.addSeconds((int) (short) 0);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime72.minuteOfHour();
        org.joda.time.Period period82 = duration68.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime72.copy();
        mutableDateTime83.addWeekyears(39632705);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 900 + "'", int15 == 900);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86500000L + "'", long62 == 86500000L);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) 0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        int int9 = property1.getMaximumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property1.getAsText(locale10);
        int int12 = property1.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime14 = property1.addToCopy(35L);
        int int15 = property1.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property1.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime16.getFieldType(33);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 33");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "February" + "'", str11, "February");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        mutablePeriod6.setYears((int) '#');
        org.joda.time.Period period9 = period2.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Period period11 = period9.minusMillis(20);
        org.joda.time.Period period12 = period11.toPeriod();
        org.joda.time.Period period14 = period11.plusSeconds(24);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = locale4.stripExtensions();
        int int6 = property3.getMaximumTextLength(locale4);
        org.joda.time.DateTime dateTime7 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = property3.roundFloorCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond(56);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        int int9 = dateTime7.getYearOfEra();
        org.joda.time.LocalTime localTime10 = dateTime7.toLocalTime();
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = locale14.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale14, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.LocalTime.Property property22 = localTime20.secondOfMinute();
        org.joda.time.LocalTime localTime24 = property22.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime26 = property22.addNoWrapToCopy(31);
        org.joda.time.LocalTime localTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean29 = localTime27.isSupported(dateTimeFieldType28);
        boolean boolean30 = localTime10.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime dateTime32 = dateTime2.withField(dateTimeFieldType28, 100);
        org.joda.time.DateTime dateTime35 = dateTime2.withDurationAdded((long) 530, 0);
        org.joda.time.DateTime dateTime37 = dateTime35.plusWeeks(864);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add((long) 42996291, (long) 73, 53723651);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial11 = null;
        int int12 = dateTimeField10.getMaximumValue(readablePartial11);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3964822814L + "'", long8 == 3964822814L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        int int4 = localDateTime0.getDayOfMonth();
        int int5 = localDateTime0.getMinuteOfHour();
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        long long11 = dateTimeField8.addWrapField((long) (-292275054), 0);
        java.util.Locale locale12 = null;
        int int13 = dateTimeField8.getMaximumShortTextLength(locale12);
        long long15 = dateTimeField8.roundFloor((long) 13);
        java.util.Locale locale17 = java.util.Locale.PRC;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, dateTimeZone19);
        int int22 = dateTimeZone19.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str23 = dateTimeZone19.getID();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period35 = period30.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Duration duration39 = period34.toDurationTo((org.joda.time.ReadableInstant) instant38);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration39, 39);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime26.secondOfMinute();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime26.minuteOfHour();
        java.lang.String str44 = property43.getAsShortText();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = locale45.stripExtensions();
        int int47 = property43.getMaximumTextLength(locale46);
        java.lang.String str48 = dateTimeZone19.getName((long) 3, locale46);
        java.util.Locale locale52 = new java.util.Locale("clockhourOfDay", "java.io.IOException", "");
        boolean boolean53 = dateTimeZone19.equals((java.lang.Object) locale52);
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale17.getDisplayVariant(locale52);
        java.lang.String str56 = dateTimeField8.getAsShortText(43180006, locale52);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-292275054L) + "'", long11 == (-292275054L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "59" + "'", str44, "59");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals(locale52.toString(), "clockhourofday_JAVA.IO.IOEXCEPTION");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "43180006" + "'", str56, "43180006");
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26);
        int int2 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime7.toString(dateTimeFormatter9);
        org.joda.time.DateTime dateTime12 = dateTime7.plusMonths(86396191);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getSecondOfMinute();
        boolean boolean18 = dateTime16.isEqualNow();
        int int19 = dateTime16.getDayOfYear();
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology20);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime12.getZone();
        java.lang.String str25 = dateTimeZone23.getShortName((-1695323999149023L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(53700016, 53650665, 159, 961, 90000000, 2922789, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 961 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:00:50.822Z" + "'", str10, "2022-02-21T15:00:50.822Z");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = dateTimeFormatter2.parseMillis("2022-02-21");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        int int6 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfSecond(44);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.minuteOfHour();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        java.util.Locale locale17 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology15, locale17, (java.lang.Integer) 39221019);
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = mutableDateTime5.toString("-1", locale17);
        java.lang.String str22 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder23 = builder0.setLocale(locale17);
        java.util.Locale.Builder builder24 = builder0.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "United Kingdom" + "'", str22, "United Kingdom");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.DateTime dateTime4 = property2.withMinimumValue();
        java.lang.String str5 = property2.getAsString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime9 = localTime7.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = localTime9.minusSeconds(46);
        org.joda.time.DateTime dateTime14 = localTime9.toDateTimeToday();
        int int15 = property2.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property16 = dateTime14.year();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "54050855" + "'", str5, "54050855");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14400000 + "'", int15 == 14400000);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekOfWeekyear();
        int int19 = dateTimeField18.getMaximumValue();
        long long21 = dateTimeField18.remainder(3L);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap29);
        boolean boolean31 = strSet25.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30);
        org.joda.time.DurationField[] durationFieldArray32 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray33 = strSet25.toArray(durationFieldArray32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMillis((int) (byte) 0);
        int int45 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks((int) '4');
        java.util.Date date50 = localDateTime47.toDate();
        boolean boolean51 = strSet25.equals((java.lang.Object) localDateTime47);
        int int52 = localDateTime47.getYear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.plusMillis(2);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = property61.getAsShortText(locale62);
        java.util.Locale.setDefault(category56, locale62);
        java.util.Locale locale65 = java.util.Locale.getDefault(category56);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.util.Locale locale68 = java.util.Locale.US;
        java.lang.String str69 = locale66.getDisplayName(locale68);
        java.util.Locale.setDefault(category56, locale66);
        java.lang.String str71 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime47, 69, locale66);
        long long74 = dateTimeField18.add((long) 39394476, 0);
        long long76 = dateTimeField18.roundHalfFloor(0L);
        int int79 = dateTimeField18.getDifference((long) 747, (long) 16);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 259200003L + "'", long21 == 259200003L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldArray32);
        org.junit.Assert.assertNotNull(durationFieldArray33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Mon Feb 21 10:00:50 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "15" + "'", str63, "15");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English (Canada)" + "'", str69, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "69" + "'", str71, "69");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 39394476L + "'", long74 == 39394476L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-259200000L) + "'", long76 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekOfWeekyear();
        int int19 = dateTimeField18.getMaximumValue();
        long long21 = dateTimeField18.remainder(3L);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap29);
        boolean boolean31 = strSet25.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30);
        org.joda.time.DurationField[] durationFieldArray32 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray33 = strSet25.toArray(durationFieldArray32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMillis((int) (byte) 0);
        int int45 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks((int) '4');
        java.util.Date date50 = localDateTime47.toDate();
        boolean boolean51 = strSet25.equals((java.lang.Object) localDateTime47);
        int int52 = localDateTime47.getYear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.plusMillis(2);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = property61.getAsShortText(locale62);
        java.util.Locale.setDefault(category56, locale62);
        java.util.Locale locale65 = java.util.Locale.getDefault(category56);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.util.Locale locale68 = java.util.Locale.US;
        java.lang.String str69 = locale66.getDisplayName(locale68);
        java.util.Locale.setDefault(category56, locale66);
        java.lang.String str71 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime47, 69, locale66);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.monthOfYear();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (short) 1, chronology75);
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) instant77, periodType78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int81 = instant77.get(dateTimeFieldType80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime72.withField(dateTimeFieldType80, 39);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusSeconds(52);
        int int86 = localDateTime85.getYearOfCentury();
        int int87 = localDateTime85.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.plusWeeks(348);
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime47, (org.joda.time.ReadablePartial) localDateTime85);
        int int91 = localDateTime47.getDayOfWeek();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 259200003L + "'", long21 == 259200003L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldArray32);
        org.junit.Assert.assertNotNull(durationFieldArray33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Mon Feb 21 10:00:50 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "15" + "'", str63, "15");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English (Canada)" + "'", str69, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "69" + "'", str71, "69");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 900 + "'", int81 == 900);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 22 + "'", int86 == 22);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfWeek();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str5 = locale4.getScript();
        java.lang.String str6 = property1.getAsText(locale4);
        java.lang.String str7 = property1.getAsShortText();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Monday" + "'", str6, "Monday");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Mon" + "'", str7, "Mon");
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds(40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localTime3.toString(dateTimeFormatter8);
        org.joda.time.LocalTime.Property property10 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime11 = property10.withMaximumValue();
        org.joda.time.LocalTime localTime12 = property10.roundCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property10.addCopy((long) 42);
        java.lang.String str16 = localTime15.toString();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11:00:50.992" + "'", str9, "11:00:50.992");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11:00:51.034" + "'", str16, "11:00:51.034");
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = locale20.stripExtensions();
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.MutableDateTime mutableDateTime23 = property18.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime24 = property18.roundHalfCeiling();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getSecondOfMinute();
        boolean boolean30 = dateTime28.isEqualNow();
        int int31 = dateTime28.getDayOfYear();
        org.joda.time.Chronology chronology32 = dateTime28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.year();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology32.halfdays();
        long long39 = durationField36.subtract((long) 39250977, (long) 39243612);
        long long42 = durationField36.getDifferenceAsLong((long) 0, (long) 12);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getSecondOfMinute();
        boolean boolean48 = dateTime46.isEqualNow();
        int int49 = dateTime46.getDayOfYear();
        org.joda.time.Chronology chronology50 = dateTime46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.year();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology50);
        org.joda.time.DurationField durationField55 = chronology50.years();
        boolean boolean56 = durationField55.isSupported();
        int int57 = durationField36.compareTo(durationField55);
        boolean boolean58 = mutableDateTime24.equals((java.lang.Object) int57);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(0L, dateTimeZone60);
        int int63 = dateTimeZone60.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str64 = dateTimeZone60.getID();
        long long68 = dateTimeZone60.convertLocalToUTC((long) 751, true, 31556952000L);
        mutableDateTime24.setZone(dateTimeZone60);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 51 + "'", int29 == 51);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1695323999149023L) + "'", long39 == (-1695323999149023L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 51 + "'", int47 == 51);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 751L + "'", long68 == 751L);
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("-625", "53987766");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: -625 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = dateTime3.minusYears(0);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfMonth((int) (byte) 10);
        org.joda.time.DateTime.Property property13 = dateTime10.year();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        boolean boolean17 = dateTime15.isBefore((long) (short) 100);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime10.withChronology(chronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.minusHours(27);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(2L);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        org.joda.time.DurationField durationField7 = property3.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime8 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(532);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        int int2 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillisOfSecond(44);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.setYear(12022);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.yearOfEra();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology14);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 1, chronology20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) instant22, periodType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int26 = instant22.get(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime17.withField(dateTimeFieldType25, 39);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusSeconds(52);
        int int31 = localDateTime30.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks(22);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period42 = period40.minusSeconds((-1));
        java.lang.String str43 = period40.toString();
        org.joda.time.Period period44 = period40.toPeriod();
        org.joda.time.PeriodType periodType45 = period40.getPeriodType();
        org.joda.time.Period period46 = period36.normalizedStandard(periodType45);
        org.joda.time.Period period48 = period46.withSeconds(10);
        int int49 = period46.size();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime30.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period52 = period46.plusHours(39250977);
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) period46);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod16, 104);
        mutableDateTime1.setSecondOfDay(341);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 900 + "'", int26 == 900);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.099S" + "'", str43, "PT0.099S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant5, periodType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = instant5.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withField(dateTimeFieldType8, 39);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        int int14 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks(22);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 1, chronology18);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) instant20, periodType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int24 = instant20.get(dateTimeFieldType23);
        java.lang.String str25 = dateTimeFieldType23.getName();
        java.lang.String str26 = dateTimeFieldType23.toString();
        int int27 = localDateTime16.indexOf(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property28 = localDateTime16.dayOfWeek();
        org.joda.time.DurationField durationField29 = property28.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        java.util.Locale locale34 = new java.util.Locale("dayOfMonth", "en-CA", "2022-02-21T14:53:55.782Z");
        java.lang.String str35 = locale34.getScript();
        boolean boolean36 = locale34.hasExtensions();
        int int37 = dateTimeField30.getMaximumShortTextLength(locale34);
        java.lang.String str38 = locale34.getDisplayName();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 900 + "'", int9 == 900);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 900 + "'", int24 == 900);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minuteOfDay" + "'", str25, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfDay" + "'", str26, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "dayofmonth_EN-CA_2022-02-21T14:53:55.782Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "dayofmonth (EN-CA,2022-02-21T14:53:55.782Z)" + "'", str38, "dayofmonth (EN-CA,2022-02-21T14:53:55.782Z)");
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime1.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, (int) (short) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime5, periodType12);
        int int15 = mutableDateTime1.getWeekyear();
        org.joda.time.Instant instant16 = mutableDateTime1.toInstant();
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = dateTime3.minusYears(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(53);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(47);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withChronology(chronology15);
        org.joda.time.Instant instant17 = dateTime14.toInstant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(39277299, (int) 'a', 737, 39282046, 13, 292278994, 53722178, 895);
        int int28 = mutablePeriod27.getDays();
        int int29 = mutablePeriod27.getWeeks();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 39282046 + "'", int28 == 39282046);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 737 + "'", int29 == 737);
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.year();
        org.joda.time.DurationField durationField8 = chronology5.months();
        java.lang.String str9 = durationField8.toString();
        long long12 = durationField8.add(4924800793L, 925);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 51 + "'", int2 == 51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DurationField[months]" + "'", str9, "DurationField[months]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2437257600793L + "'", long12 == 2437257600793L);
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfMonth();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfEven();
        mutableDateTime24.addHours(8);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period38 = period33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Duration duration42 = period37.toDurationTo((org.joda.time.ReadableInstant) instant41);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration42, 39);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime29.secondOfMinute();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime29.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = locale48.stripExtensions();
        int int50 = property46.getMaximumTextLength(locale49);
        org.joda.time.MutableDateTime mutableDateTime52 = property46.add(53L);
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale53.getCountry();
        java.util.Calendar calendar55 = mutableDateTime52.toCalendar(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = mutableDateTime24.toString("", locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "59" + "'", str47, "59");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "CA" + "'", str54, "CA");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=3176191,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=52,SECOND=56,MILLISECOND=191,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setTime(53750160, 501, 50, 39409698);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53750160 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(0L, dateTimeZone5);
        int int7 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime6);
        mutableDateTime6.addMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime13 = localTime11.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime15 = localTime13.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period26 = period21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Duration duration30 = period25.toDurationTo((org.joda.time.ReadableInstant) instant29);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration30, 39);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime17.setZone(dateTimeZone34);
        int int36 = mutableDateTime17.getYearOfEra();
        int int37 = mutableDateTime17.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime17.year();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundHalfEven();
        org.joda.time.DateTime dateTime40 = localTime15.toDateTime((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalTime localTime42 = localTime15.plusSeconds(958);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) 100, 1L, periodType51);
        org.joda.time.Period period53 = period48.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Duration duration57 = period52.toDurationTo((org.joda.time.ReadableInstant) instant56);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration57, 39);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime44.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) 100, 1L, periodType65);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) 100, 1L, periodType69);
        org.joda.time.Period period71 = period66.plus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Duration duration75 = period70.toDurationTo((org.joda.time.ReadableInstant) instant74);
        mutableDateTime62.add((org.joda.time.ReadableDuration) duration75, 39);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime62.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime62.toMutableDateTime(dateTimeZone79);
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.days();
        mutableDateTime80.add(durationFieldType81, 39267259);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int85 = mutableDateTime80.get(dateTimeFieldType84);
        int int86 = mutableDateTime44.get(dateTimeFieldType84);
        int int87 = localTime15.get(dateTimeFieldType84);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.set(dateTimeFieldType84, 39345000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39345000 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1969 + "'", int36 == 1969);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 11 + "'", int85 == 11);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 11 + "'", int86 == 11);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 11 + "'", int87 == 11);
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 1L, periodType9);
        org.joda.time.Period period11 = period6.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration15 = period10.toDurationTo((org.joda.time.ReadableInstant) instant14);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration15, 39);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime2.setZone(dateTimeZone19);
        int int21 = mutableDateTime2.getYearOfEra();
        int int22 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime2.year();
        mutableDateTime2.setSecondOfDay(50);
        org.joda.time.Chronology chronology26 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology27 = chronology26.withUTC();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.Period period29 = new org.joda.time.Period((long) (-14), chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField30.set((-7391L), 54000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54000000 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addMillis(9722);
        mutableDateTime1.setSecondOfMinute((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = mutableDateTime1.toString("DateTimeField[minuteOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.minusMonths((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        org.joda.time.Period period6 = duration3.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 1, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 1, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        int int17 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration19, 10);
        org.joda.time.Duration duration24 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration19, 26);
        long long25 = duration24.getStandardDays();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 1, chronology27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) instant29, periodType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int33 = instant29.get(dateTimeFieldType32);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant38 = instant29.withDurationAdded((org.joda.time.ReadableDuration) duration36, 0);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.parse("2022-02-21T10:53:38.221");
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration46 = duration42.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, readableInstant47);
        long long49 = duration46.getStandardDays();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) ' ');
        int int53 = localDate50.size();
        org.joda.time.LocalDate.Property property54 = localDate50.era();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDayTime();
        boolean boolean56 = localDate50.equals((java.lang.Object) periodType55);
        org.joda.time.PeriodType periodType57 = periodType55.withMonthsRemoved();
        org.joda.time.PeriodType periodType58 = periodType57.withYearsRemoved();
        org.joda.time.Period period59 = duration46.toPeriod(periodType58);
        org.joda.time.PeriodType periodType60 = periodType58.withMinutesRemoved();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) mutableDateTime40, periodType58);
        int int62 = duration24.compareTo((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration63 = duration36.toDuration();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 900 + "'", int33 == 900);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 121, (long) 39489687);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.Period period12 = period6.plusSeconds((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = period12.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withMinutesRemoved();
        org.joda.time.PeriodType periodType18 = periodType16.withSecondsRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded((long) 41, 53);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime20.toMutableDateTime();
        java.lang.String str25 = dateTime20.toString();
        org.joda.time.DateTime dateTime27 = dateTime20.minus((long) 165);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        boolean boolean33 = dateTime31.isEqualNow();
        int int34 = dateTime31.getDayOfYear();
        org.joda.time.Chronology chronology35 = dateTime31.getChronology();
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology35, locale36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 47, chronology35);
        org.joda.time.DurationField durationField40 = chronology35.centuries();
        org.joda.time.DurationField durationField41 = chronology35.halfdays();
        org.joda.time.DateTime dateTime42 = dateTime27.toDateTime(chronology35);
        org.joda.time.Period period43 = duration2.toPeriod(periodType16, chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) duration2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T15:00:51.455Z" + "'", str25, "2022-02-21T15:00:51.455Z");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 51 + "'", int32 == 51);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(0L, dateTimeZone6);
        long long10 = dateTimeZone6.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtStartOfDay(dateTimeZone6);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfYear();
        long long14 = property13.remainder();
        org.joda.time.DurationField durationField15 = property13.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3L + "'", long10 == 3L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean8 = property5.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        int int12 = dateTime10.getYearOfEra();
        int int13 = property5.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Instant instant15 = dateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDayOfWeek(39527062);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39527062 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField20 = chronology4.eras();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = locale24.toLanguageTag();
        java.lang.String str26 = dateTimeZone22.getName((long) 1973, locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr-FR" + "'", str25, "fr-FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(119, 534, (int) (short) 0, 658, 39527062, 790, 559);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 658 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DateTime dateTime29 = instant27.toDateTimeISO();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration35 = duration31.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36);
        org.joda.time.Duration duration38 = duration35.toDuration();
        java.lang.String str39 = duration35.toString();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period50 = period45.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Duration duration54 = period49.toDurationTo((org.joda.time.ReadableInstant) instant53);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration54, 39);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime41.yearOfEra();
        mutableDateTime41.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime41.centuryOfEra();
        org.joda.time.Period period61 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Instant instant62 = instant27.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period67 = duration66.toPeriod();
        org.joda.time.Duration duration70 = duration66.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, readableInstant71);
        org.joda.time.Duration duration73 = duration70.toDuration();
        int int74 = duration64.compareTo((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) 39221019);
        org.joda.time.Period period77 = duration76.toPeriod();
        org.joda.time.Duration duration79 = duration76.withMillis(10L);
        boolean boolean80 = duration64.isEqual((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration82 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration79, 110);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration35);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT86403.686S" + "'", str39, "PT86403.686S");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime6 = dateTimeFormatter3.parseMutableDateTime("2022-02-21T14:57:10.850Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) ' ');
        int int6 = localDate3.size();
        org.joda.time.LocalDate.Property property7 = localDate3.era();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDayTime();
        boolean boolean9 = localDate3.equals((java.lang.Object) periodType8);
        org.joda.time.PeriodType periodType10 = periodType8.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 'a', periodType10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 1, chronology13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) instant15, periodType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int19 = instant15.get(dateTimeFieldType18);
        java.lang.String str20 = dateTimeFieldType18.getName();
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology26);
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType18.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfSecond();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 39243612, periodType10, chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.weekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology26.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) "14:56:48.000", dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"14:56:48.000\" is malformed at \":56:48.000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 900 + "'", int19 == 900);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "minuteOfDay" + "'", str20, "minuteOfDay");
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 1, chronology4);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) instant6, periodType7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) ' ');
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 1, periodType7, chronology12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) ' ');
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate20 = localDate14.withFieldAdded(durationFieldType18, (int) (byte) 100);
        boolean boolean21 = periodType7.isSupported(durationFieldType18);
        org.joda.time.Period period22 = new org.joda.time.Period(3155760000035L, (long) 457070, periodType7);
        org.joda.time.PeriodType periodType23 = periodType7.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(21600000, 9, 39443128, 793, 58, 39577228);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 793 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        java.lang.Object obj0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.Period period11 = period7.toPeriod();
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.Period period13 = period3.normalizedStandard(periodType12);
        java.lang.String str14 = periodType12.getName();
        org.joda.time.PeriodType periodType15 = periodType12.withHoursRemoved();
        org.joda.time.PeriodType periodType16 = periodType12.withSecondsRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(obj0, periodType12, chronology17);
        mutablePeriod18.setSeconds(0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getSecondOfMinute();
        int int24 = dateTime22.getYearOfEra();
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(3155760003135L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime29.plusMillis(8);
        mutablePeriod18.setPeriod((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime29);
        int int34 = dateTime29.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Standard" + "'", str14, "Standard");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths(55);
        int int9 = localDate6.getWeekyear();
        org.joda.time.LocalDate localDate11 = localDate6.withCenturyOfEra(21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate11.withYearOfCentury(941);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 941 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12022 + "'", int9 == 12022);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((int) (short) -1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusSeconds(13);
        int int17 = localDateTime13.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer8, (org.joda.time.ReadablePartial) localDateTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        java.lang.String str5 = localDate0.toString();
        org.joda.time.LocalDate localDate7 = localDate0.withYearOfEra(54);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsShortText(locale10);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21" + "'", str5, "2022-02-21");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "54" + "'", str11, "54");
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        boolean boolean15 = dateTime13.isEqualNow();
        int int16 = dateTime13.getDayOfYear();
        org.joda.time.Chronology chronology17 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.halfdays();
        mutablePeriod8.setPeriod((long) (byte) -1, 51L, chronology17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period32 = period27.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Duration duration36 = period31.toDurationTo((org.joda.time.ReadableInstant) instant35);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration36, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean40 = mutableDateTime23.isSupported(dateTimeFieldType39);
        boolean boolean41 = mutableDateTime23.isBeforeNow();
        mutableDateTime23.add((long) 86396191);
        int int44 = mutableDateTime23.getMonthOfYear();
        int int45 = mutableDateTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 42, (long) 49, chronology48);
        mutablePeriod49.setPeriod((-1511999969L));
        mutablePeriod49.setSeconds(0);
        mutablePeriod49.add((int) 'x', 12022, 41, 86396, 1, 16, 15, (int) ' ');
        mutableDateTime23.add((org.joda.time.ReadablePeriod) mutablePeriod49);
        long long66 = chronology17.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 53833003, 86340);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 382 + "'", int45 == 382);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3703083270952432423L + "'", long66 == 3703083270952432423L);
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.millisOfSecond();
        int int20 = mutableDateTime1.getDayOfMonth();
        int int21 = mutableDateTime1.getSecondOfMinute();
        int int22 = mutableDateTime1.getSecondOfDay();
        int int23 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period35 = period30.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Duration duration39 = period34.toDurationTo((org.joda.time.ReadableInstant) instant38);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration39, 39);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime26.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime26.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = locale47.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        long long54 = dateTimeZone43.getMillisKeepLocal(dateTimeZone52, 315532800097L);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 31, dateTimeZone43);
        mutableDateTime1.setZoneRetainFields(dateTimeZone43);
        int int57 = mutableDateTime1.getYear();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 56 + "'", int21 == 56);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 86396 + "'", int22 == 86396);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 315532800097L + "'", long54 == 315532800097L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DurationField durationField8 = chronology3.hours();
        org.joda.time.DurationField durationField9 = chronology3.millis();
        long long12 = durationField9.add((long) 53697431, 2760);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 53700191L + "'", long12 == 53700191L);
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfWeek();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("2022-02-21");
        boolean boolean4 = localDate0.equals((java.lang.Object) "2022-02-21");
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfEra(51);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration7, readableInstant8);
        org.joda.time.Period period11 = period9.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) ' ');
        org.joda.time.Chronology chronology15 = localDate12.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 1, chronology17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) instant19, periodType20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) ' ');
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate28 = localDate22.withFieldAdded(durationFieldType26, (int) (byte) 100);
        int int29 = periodType20.indexOf(durationFieldType26);
        boolean boolean30 = localDate12.isSupported(durationFieldType26);
        int int31 = period9.get(durationFieldType26);
        org.joda.time.LocalDate localDate33 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 39277299);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime36 = dateTime34.withMillisOfSecond(25);
        org.joda.time.DateTime dateTime37 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology38 = dateTime34.getChronology();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean10 = property6.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration25, 39);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.secondOfMinute();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime12.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = locale31.stripExtensions();
        int int33 = property29.getMaximumTextLength(locale32);
        java.lang.String str34 = locale32.getDisplayLanguage();
        int int35 = property6.getMaximumShortTextLength(locale32);
        java.lang.String str36 = property6.getAsText();
        int int37 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "59" + "'", str30, "59");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-292275055" + "'", str36, "-292275055");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DurationField durationField13 = chronology7.seconds();
        int int16 = durationField13.getDifference((long) 53794713, 2013L);
        long long19 = durationField13.getValueAsLong((-39378860L), 193783338000000L);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53792 + "'", int16 == 53792);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-39378L) + "'", long19 == (-39378L));
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str23 = dateTimeZone21.getNameKey((long) (byte) 0);
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period33 = period28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Duration duration37 = period32.toDurationTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period46 = period41.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Duration duration50 = period45.toDurationTo((org.joda.time.ReadableInstant) instant49);
        boolean boolean51 = instant36.isEqual((org.joda.time.ReadableInstant) instant49);
        boolean boolean52 = mutableDateTime20.isEqual((org.joda.time.ReadableInstant) instant36);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) 100, 1L, periodType57);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) 100, 1L, periodType61);
        org.joda.time.Period period63 = period58.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Duration duration67 = period62.toDurationTo((org.joda.time.ReadableInstant) instant66);
        mutableDateTime54.add((org.joda.time.ReadableDuration) duration67, 39);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime54.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime54.setZone(dateTimeZone71);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = locale75.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology74, locale75, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone80 = dateTimeParserBucket79.getZone();
        long long82 = dateTimeZone71.getMillisKeepLocal(dateTimeZone80, 315532800097L);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        long long85 = dateTimeZone80.getMillisKeepLocal(dateTimeZone83, (long) 53);
        mutableDateTime20.setZoneRetainFields(dateTimeZone80);
        mutableDateTime20.addMonths(0);
        int int89 = mutableDateTime20.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setMinuteOfHour(53871092);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53871092 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 315532800097L + "'", long82 == 315532800097L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 53L + "'", long85 == 53L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1970 + "'", int89 == 1970);
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 1, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 1, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        int int41 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration43, 10);
        long long47 = duration46.getMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) 38, (int) 'a');
        int int54 = duration46.compareTo((org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableDuration) duration46, periodType56);
        mutableDateTime29.addMinutes(49);
        int int60 = mutableDateTime29.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime29.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime63 = property61.roundFloor();
        mutableDateTime63.addHours(0);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime63.minuteOfDay();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86500000L + "'", long47 == 86500000L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.DateTime dateTime4 = property2.withMinimumValue();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = property2.getAsShortText(locale5);
        org.joda.time.DateTimeField dateTimeField7 = property2.getField();
        org.joda.time.DateTimeField dateTimeField8 = property2.getField();
        org.joda.time.DateTime dateTime9 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "54052091" + "'", str6, "54052091");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear(39267259);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTimeFormatter11.parseDateTime("2022-02-21T14:58:07.656Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.roundFloorCopy();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate11 = localDate6.plusWeeks(56);
        org.joda.time.LocalDate localDate13 = localDate6.plusMonths(41);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(16);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period26 = period21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Duration duration30 = period25.toDurationTo((org.joda.time.ReadableInstant) instant29);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration30, 39);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime17.secondOfMinute();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime17.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        java.lang.String str42 = dateTimeZone37.getNameKey((long) 3);
        org.joda.time.DateTime dateTime43 = localDate13.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.LocalDate.Property property44 = localDate13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, 1L, periodType49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) 100, 1L, periodType53);
        org.joda.time.Period period55 = period50.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Duration duration59 = period54.toDurationTo((org.joda.time.ReadableInstant) instant58);
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration59, 39);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime46.yearOfEra();
        mutableDateTime46.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime46.minuteOfDay();
        long long66 = property44.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime46);
        java.util.Locale.Category category67 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.lang.String str70 = locale68.getExtension('a');
        java.lang.String str71 = property44.getAsShortText(locale68);
        java.lang.String str72 = property2.getAsText(locale68);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 20199L + "'", long66 == 20199L);
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category67.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Mon" + "'", str71, "Mon");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "54052129" + "'", str72, "54052129");
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) ' ');
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 27, (long) 'u', chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfHalfday();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(53786443, (-292275051), 53671205, 0, 243, 945, 4017, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 243 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        int int8 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) ' ');
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate19 = localDate13.withFieldAdded(durationFieldType17, (int) (byte) 100);
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths(55);
        boolean boolean22 = dateTime6.equals((java.lang.Object) localDate19);
        org.joda.time.DateTime dateTime24 = dateTime6.withSecondOfMinute(12);
        org.joda.time.DateTime.Property property25 = dateTime6.era();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime6.toMutableDateTime(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        boolean boolean6 = dateTime4.isEqualNow();
        int int7 = dateTime4.getDayOfYear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(276);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        long long6 = duration5.getStandardHours();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022-02-21T14:57:13.338Z");
        org.joda.time.Interval interval9 = duration5.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 24L + "'", long6 == 24L);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        java.lang.String str13 = periodType11.getName();
        org.joda.time.PeriodType periodType14 = periodType11.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType11.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period27 = period22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration31 = period26.toDurationTo((org.joda.time.ReadableInstant) instant30);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration31, 39);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime18.yearOfEra();
        mutableDateTime18.setDayOfYear((int) ' ');
        mutableDateTime18.addHours(11);
        java.lang.String str39 = mutableDateTime18.toString();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) 20, 0);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration41);
        boolean boolean46 = periodType11.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.setYear(53839567);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Standard" + "'", str13, "Standard");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969-02-02T10:59:56.191Z" + "'", str39, "1969-02-02T10:59:56.191Z");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 39543695);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 893);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) -1);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale6);
        mutableDateTime5.addMonths(20);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17);
        org.joda.time.Duration duration19 = duration16.toDuration();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period34 = period29.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Duration duration38 = period33.toDurationTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant40 = instant37.plus((long) (byte) -1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 1, chronology42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) instant44, periodType45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) instant37, periodType45);
        int int48 = duration16.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 1, chronology52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) instant54, periodType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int58 = instant54.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime49.withField(dateTimeFieldType57, 39);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusSeconds(52);
        int int63 = localDateTime62.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.plusWeeks(22);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period(readableDuration66, readableInstant67);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) 100, 1L, periodType71);
        org.joda.time.Period period74 = period72.minusSeconds((-1));
        java.lang.String str75 = period72.toString();
        org.joda.time.Period period76 = period72.toPeriod();
        org.joda.time.PeriodType periodType77 = period72.getPeriodType();
        org.joda.time.Period period78 = period68.normalizedStandard(periodType77);
        org.joda.time.Period period80 = period78.withSeconds(10);
        int int81 = period78.size();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime62.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.PeriodType periodType83 = period78.getPeriodType();
        org.joda.time.PeriodType periodType84 = periodType83.withMonthsRemoved();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableDuration) duration16, periodType84);
        org.joda.time.Period period86 = new org.joda.time.Period(45747072000022L, periodType84);
        java.lang.Object obj87 = null;
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(obj87);
        org.joda.time.DateTime.Property property89 = dateTime88.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = property89.getField();
        org.joda.time.DateTime dateTime91 = property89.roundHalfFloorCopy();
        org.joda.time.Duration duration92 = period86.toDurationTo((org.joda.time.ReadableInstant) dateTime91);
        boolean boolean93 = duration1.isEqual((org.joda.time.ReadableDuration) duration92);
        org.joda.time.Duration duration94 = duration1.toDuration();
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German" + "'", str7, "German");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 900 + "'", int58 == 900);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0.099S" + "'", str75, "PT0.099S");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean8 = property5.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        int int12 = dateTime10.getYearOfEra();
        int int13 = property5.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Instant instant15 = dateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setMinuteOfDay(39239);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39239 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime1.toString(dateTimeFormatter22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period32 = period27.plus((org.joda.time.ReadablePeriod) period31);
        int int33 = period27.getHours();
        org.joda.time.Period period34 = period27.toPeriod();
        org.joda.time.Period period36 = period27.plusSeconds(42);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period36, 0);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime1.secondOfMinute();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-02-01T23:59:56.244Z" + "'", str23, "1969-02-01T23:59:56.244Z");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime9 = property1.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(9722);
        int int12 = localDateTime9.getMillisOfSecond();
        int int13 = localDateTime9.getDayOfYear();
        org.joda.time.Chronology chronology14 = localDateTime9.getChronology();
        int int15 = localDateTime9.getCenturyOfEra();
        int int16 = localDateTime9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = localDate5.toString("2022-02-21T14:55:16.916Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = instant3.get(dateTimeFieldType6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant12 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration10, 0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        java.util.Locale locale22 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology20, locale22, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        int int30 = property28.get();
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfFloorCopy();
        long long33 = chronology20.set((org.joda.time.ReadablePartial) localDateTime31, (long) 2022);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DurationField durationField36 = chronology20.eras();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology20);
        mutablePeriod14.setPeriod((long) (short) -1, chronology20);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str46 = dateTimeFieldType45.getName();
        int int47 = localDateTime39.indexOf(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str59 = dateTimeFieldType58.getName();
        int int60 = localDateTime52.indexOf(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime52.minusSeconds(0);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 1, chronology64);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) instant66, periodType67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime39, (org.joda.time.ReadablePartial) localDateTime62, periodType67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        long long73 = dateTimeZone70.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(dateTimeZone70);
        org.joda.time.DateTime dateTime75 = localDateTime39.toDateTime(dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime39.minusDays(2);
        java.lang.String str78 = localDateTime77.toString();
        int int79 = localDateTime77.getWeekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.minusYears((int) (short) 1);
        java.lang.String str82 = localDateTime77.toString();
        int[] intArray84 = chronology20.get((org.joda.time.ReadablePartial) localDateTime77, 0L);
        org.joda.time.LocalDateTime.Property property85 = localDateTime77.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime86 = property85.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime88 = property85.addToCopy((-2025));
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 900 + "'", int7 == 900);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645455600000L + "'", long33 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "clockhourOfDay" + "'", str46, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "clockhourOfDay" + "'", str59, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-19T15:00:52.373" + "'", str78, "2022-02-19T15:00:52.373");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertNotNull(localDateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-19T15:00:52.373" + "'", str82, "2022-02-19T15:00:52.373");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 100);
        int int2 = dateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 1, chronology4);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) instant6, periodType7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int10 = instant6.get(dateTimeFieldType9);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant15 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration13, 0);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTime dateTime19 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) '4');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        mutablePeriod23.setYears((int) '#');
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod23.add((long) 1, chronology27);
        java.lang.Object obj29 = mutablePeriod23.clone();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        java.util.Locale locale37 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology35, locale37, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 53, chronology35);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.Period period49 = period47.minusSeconds((-1));
        java.lang.String str50 = period47.toString();
        org.joda.time.Period period51 = period47.toPeriod();
        org.joda.time.PeriodType periodType52 = period47.getPeriodType();
        org.joda.time.Period period53 = period43.normalizedStandard(periodType52);
        boolean boolean54 = localDate40.equals((java.lang.Object) period43);
        org.joda.time.Interval interval55 = localDate40.toInterval();
        mutablePeriod23.setPeriod((org.joda.time.ReadableInterval) interval55);
        mutablePeriod17.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 1, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTime();
        int int62 = dateTime60.getYear();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 21);
        int int65 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime64);
        int int66 = dateTime64.getSecondOfDay();
        org.joda.time.DateTime.Property property67 = dateTime64.year();
        boolean boolean68 = mutablePeriod17.equals((java.lang.Object) dateTime64);
        mutablePeriod17.setHours(69);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 900 + "'", int10 == 900);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P1D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P1D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P1D");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.099S" + "'", str50, "PT0.099S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(53713367);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration5.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.format.PeriodFormatter periodFormatter18 = null;
        java.lang.String str19 = period17.toString(periodFormatter18);
        org.joda.time.Period period21 = period17.withHours(100);
        int int22 = period21.getDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT23H59M53.686S" + "'", str19, "PT23H59M53.686S");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.minuteOfHour();
        int int23 = mutableDateTime21.getSecondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = mutableDateTime21.getRoundingField();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86340 + "'", int23 == 86340);
        org.junit.Assert.assertNull(dateTimeField24);
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-292275054), 169200567L);
        org.joda.time.Period period4 = org.joda.time.Period.seconds(53700016);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period19 = period14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Duration duration23 = period18.toDurationTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant25 = instant22.plus((long) (byte) -1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 1, chronology27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) instant29, periodType30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) instant22, periodType30);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration36, (int) (short) 100);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 1, chronology40);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) instant42, periodType43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) ' ');
        org.joda.time.Chronology chronology48 = localDate45.getChronology();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate51 = localDate45.withFieldAdded(durationFieldType49, (int) (byte) 100);
        int int52 = periodType43.indexOf(durationFieldType49);
        org.joda.time.Period period53 = duration36.toPeriod(periodType43);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period56 = period53.withField(durationFieldType54, 49);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period58 = period4.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period60 = period58.withWeeks(44);
        boolean boolean61 = duration2.equals((java.lang.Object) period60);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        int int2 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillisOfSecond(44);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.minuteOfHour();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology11, locale13, (java.lang.Integer) 39221019);
        java.lang.String str16 = locale13.getDisplayScript();
        java.lang.String str17 = mutableDateTime1.toString("-1", locale13);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 1, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.LocalDate localDate22 = dateTime20.toLocalDate();
        int int23 = dateTime20.getDayOfMonth();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime20);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMillisOfSecond(53812202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53812202 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, (long) 53735132);
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("1969-12-31T23:59:56.191Z");
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("United States");
        java.time.ZoneId zoneId10 = timeZone9.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(24044428800116L, dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(934, 457070, 39514988, 646, (int) (byte) 0, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 646 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        java.lang.String str6 = period3.toString();
        org.joda.time.Period period7 = period3.toPeriod();
        org.joda.time.Period period9 = period3.plusSeconds((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period9.getFieldTypes();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period9.normalizedStandard(periodType11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) periodType11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfYear(91);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 1, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 1, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration28, 10);
        java.lang.String str32 = duration17.toString();
        org.joda.time.Period period33 = duration17.toPeriod();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime35.toString(dateTimeFormatter37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime35, periodType39);
        long long41 = duration17.getStandardDays();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime13.withSecondOfMinute(54000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54000000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.099S" + "'", str6, "PT0.099S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT86400S" + "'", str32, "PT86400S");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21T15:00:52.626Z" + "'", str38, "2022-02-21T15:00:52.626Z");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 530);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.Period period11 = org.joda.time.Period.millis(100);
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.Period period14 = period12.multipliedBy((int) 'x');
        org.joda.time.LocalTime localTime15 = localTime8.minus((org.joda.time.ReadablePeriod) period14);
        java.lang.String str16 = localTime15.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "15:01:04.647" + "'", str16, "15:01:04.647");
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(964);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((java.lang.Object) 964);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration7, readableInstant8);
        org.joda.time.Period period11 = period9.withDays((int) (byte) 1);
        org.joda.time.Period period13 = period11.minusWeeks(100);
        org.joda.time.Period period15 = period13.withMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration16, readableInstant17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period24 = period22.minusSeconds((-1));
        java.lang.String str25 = period22.toString();
        org.joda.time.Period period26 = period22.toPeriod();
        org.joda.time.PeriodType periodType27 = period22.getPeriodType();
        org.joda.time.Period period28 = period18.normalizedStandard(periodType27);
        org.joda.time.Period period30 = period18.plusSeconds(45);
        org.joda.time.Period period31 = period15.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.Period period42 = period37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Duration duration46 = period41.toDurationTo((org.joda.time.ReadableInstant) instant45);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration46, 39);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.centuries();
        int int53 = period51.get(durationFieldType52);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) period51, 54);
        org.joda.time.Period period56 = period31.withFields((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DurationFieldType[] durationFieldTypeArray57 = period31.getFieldTypes();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.forFields(durationFieldTypeArray57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant3, readableInstant6, periodType58);
        mutablePeriod59.setMillis(53684566);
        java.lang.String str62 = mutablePeriod59.toString();
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        java.util.Locale locale69 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology67, locale69, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) ' ');
        org.joda.time.Chronology chronology75 = localDate72.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField76.getType();
        org.joda.time.Chronology chronology80 = null;
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.lang.String str83 = locale81.getDisplayVariant(locale82);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology80, locale82, (java.lang.Integer) 10);
        dateTimeParserBucket71.saveField(dateTimeFieldType77, "PT0.099S", locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.yearOfCentury();
        dateTimeParserBucket71.saveField(dateTimeFieldType87, 43);
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType87.getRangeDurationType();
        boolean boolean91 = mutablePeriod59.isSupported(durationFieldType90);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.099S" + "'", str25, "PT0.099S");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldTypeArray57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT53684.566S" + "'", str62, "PT53684.566S");
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("United States");
        java.time.ZoneId zoneId9 = timeZone8.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean11 = timeZone8.observesDaylightTime();
        boolean boolean12 = timeZone0.hasSameRules(timeZone8);
        java.lang.String str13 = timeZone8.getID();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period26 = period21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Duration duration30 = period25.toDurationTo((org.joda.time.ReadableInstant) instant29);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration30, 39);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime17.secondOfMinute();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime17.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 1L, periodType43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.Period period49 = period44.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Duration duration53 = period48.toDurationTo((org.joda.time.ReadableInstant) instant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 1L, periodType60);
        org.joda.time.Period period62 = period57.plus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Duration duration66 = period61.toDurationTo((org.joda.time.ReadableInstant) instant65);
        boolean boolean67 = instant52.isEqual((org.joda.time.ReadableInstant) instant65);
        boolean boolean68 = mutableDateTime36.isEqual((org.joda.time.ReadableInstant) instant52);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime36.monthOfYear();
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str73 = property69.getAsText(locale71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = timeZone8.getDisplayName(false, 86396191, locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 86396191");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT" + "'", str13, "GMT");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dezember" + "'", str73, "Dezember");
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime dateTime22 = dateTime1.plusDays(22);
        org.joda.time.DateTime dateTime24 = dateTime1.plusSeconds(14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTime24.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        mutablePeriod4.addDays(53);
        mutablePeriod4.setMillis(39250977);
        mutablePeriod4.setMinutes(51);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod4.getFieldTypes();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(69);
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period33 = period28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Duration duration37 = period32.toDurationTo((org.joda.time.ReadableInstant) instant36);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration37, 39);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime24.secondOfMinute();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime24.minuteOfHour();
        mutableDateTime24.setWeekyear(0);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime24.era();
        org.joda.time.DateTimeField dateTimeField45 = mutableDateTime24.getRoundingField();
        boolean boolean46 = dateTime22.isBefore((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime24.setMillisOfDay(513);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = locale9.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale9, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        java.lang.String str16 = dateTimeZone14.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(53973375, 10, 15000, 0, 432, 53768216, 7201704, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 432 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("United States");
        java.time.ZoneId zoneId9 = timeZone8.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean11 = timeZone8.observesDaylightTime();
        boolean boolean12 = timeZone0.hasSameRules(timeZone8);
        timeZone0.setID("2022-02-21T15:00:31.071Z");
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        java.lang.String str34 = property33.getAsString();
        org.joda.time.LocalTime localTime35 = property33.roundHalfFloorCopy();
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.lang.String str47 = locale46.getVariant();
        dateTimeParserBucket42.saveField(dateTimeFieldType43, "2022-02-21T14:53:55.782Z", locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale51 = null;
        dateTimeParserBucket42.saveField(dateTimeFieldType49, "2022-02-21T14:53:55.782Z", locale51);
        int int53 = localTime35.get(dateTimeFieldType49);
        org.joda.time.LocalTime.Property property54 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime55 = property54.roundFloorCopy();
        java.util.Locale locale57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime58 = property54.setCopy("2022-02-21T14:55:19.361Z", locale57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:55:19.361Z\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "16" + "'", str34, "16");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime.Property property13 = dateTime1.weekOfWeekyear();
        int int14 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property15 = dateTime1.weekyear();
        int int16 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime18 = dateTime1.minusHours(39374894);
        org.joda.time.DateTime.Property property19 = dateTime18.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 900 + "'", int16 == 900);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        int int4 = dateTime2.getYear();
        boolean boolean5 = dateTime2.isAfterNow();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate11 = localDate6.plusWeeks(56);
        org.joda.time.LocalDate localDate13 = localDate6.plusMonths(41);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(16);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period26 = period21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Duration duration30 = period25.toDurationTo((org.joda.time.ReadableInstant) instant29);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration30, 39);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime17.secondOfMinute();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime17.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        java.lang.String str42 = dateTimeZone37.getNameKey((long) 3);
        org.joda.time.DateTime dateTime43 = localDate13.toDateTimeAtStartOfDay(dateTimeZone37);
        java.lang.String str45 = dateTimeZone37.getShortName((long) 120);
        org.joda.time.DateTime dateTime46 = dateTime2.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime48 = dateTime2.minusDays(409);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        boolean boolean13 = localDateTime4.isSupported(durationFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withYearOfEra(10);
        org.joda.time.Period period17 = org.joda.time.Period.millis(100);
        org.joda.time.Period period18 = period17.negated();
        org.joda.time.Period period20 = period17.plusSeconds(50);
        org.joda.time.Period period22 = period17.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 41);
        int int25 = localDateTime24.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusDays(39387577);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMonths(53750257);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withCenturyOfEra(292);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 57 + "'", int25 == 57);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property6.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property6.addWrapFieldToCopy((-39250872));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 331525927 for weekyear must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isParser();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        boolean boolean9 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology14 = dateTimeFormatter13.getChronolgy();
        org.joda.time.Chronology chronology15 = dateTimeFormatter13.getChronology();
        java.lang.StringBuffer stringBuffer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(stringBuffer16, (long) 157);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNull(chronology15);
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        boolean boolean19 = mutableDateTime1.isBeforeNow();
        int int20 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 100);
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTimeISO();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime22);
        int int26 = mutableDateTime1.getWeekyear();
        int int27 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setDate((long) 'a');
        org.joda.time.DateTimeField dateTimeField30 = mutableDateTime1.getRoundingField();
        int int31 = mutableDateTime1.getSecondOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 86396 + "'", int20 == 86396);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getSecondOfMinute();
        boolean boolean7 = dateTime5.isEqualNow();
        int int8 = dateTime5.getDayOfYear();
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology9, locale10);
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType2.getField(chronology9);
        org.joda.time.DurationField durationField13 = durationFieldType1.getField(chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        long long19 = chronology9.add((long) 153, 259200000L, 53789333);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 13942195113600153L + "'", long19 == 13942195113600153L);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        java.lang.String str34 = property33.getAsString();
        org.joda.time.LocalTime localTime35 = property33.roundHalfFloorCopy();
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.lang.String str47 = locale46.getVariant();
        dateTimeParserBucket42.saveField(dateTimeFieldType43, "2022-02-21T14:53:55.782Z", locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale51 = null;
        dateTimeParserBucket42.saveField(dateTimeFieldType49, "2022-02-21T14:53:55.782Z", locale51);
        int int53 = localTime35.get(dateTimeFieldType49);
        org.joda.time.LocalTime.Property property54 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime55 = property54.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime57 = property54.addCopy(244633949875295L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 244633949875295 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "16" + "'", str34, "16");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant3.toMutableDateTimeISO();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration19 = duration11.plus((org.joda.time.ReadableDuration) duration17);
        boolean boolean20 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        long long21 = duration11.getStandardMinutes();
        org.joda.time.Instant instant22 = instant3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration23 = duration11.toDuration();
        java.lang.String str24 = duration11.toString();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) (short) 1);
        long long27 = duration26.getStandardSeconds();
        org.joda.time.Days days28 = duration26.toStandardDays();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration32, (int) (short) 100);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getYearOfCentury();
        org.joda.time.Interval interval38 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant45);
        long long47 = duration44.getStandardDays();
        org.joda.time.Duration duration48 = duration44.toDuration();
        org.joda.time.Duration duration49 = duration32.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration50 = duration26.minus((org.joda.time.ReadableDuration) duration32);
        long long51 = duration26.getStandardMinutes();
        boolean boolean52 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration26);
        java.lang.String str53 = duration26.toString();
        org.joda.time.Duration duration55 = duration26.withMillis(1645455600L);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1440L + "'", long21 == 1440L);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT86400S" + "'", str24, "PT86400S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3600L + "'", long27 == 3600L);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 60L + "'", long51 == 60L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT3600S" + "'", str53, "PT3600S");
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.Period period6 = period4.withDays((int) (byte) 1);
        org.joda.time.Period period8 = period6.minusWeeks(100);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        java.lang.String str15 = period12.toString();
        org.joda.time.Period period16 = period12.toPeriod();
        org.joda.time.PeriodType periodType17 = period12.getPeriodType();
        org.joda.time.Period period18 = period8.withPeriodType(periodType17);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 41, (long) 'x', periodType17);
        mutablePeriod19.clear();
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod19.toMutablePeriod();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.099S" + "'", str15, "PT0.099S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutablePeriod21);
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale3, (java.lang.Integer) 10);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfMonth();
        java.lang.String str10 = dateTimeField8.getAsShortText((long) 1970);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration25, 39);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.secondOfMinute();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime12.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = locale31.stripExtensions();
        int int33 = property29.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField40 = localDateTime38.getField((int) (byte) 0);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = dateTimeField40.getAsShortText((long) (byte) 1, locale42);
        java.lang.String str44 = locale32.getDisplayName(locale42);
        java.lang.String str45 = locale42.getDisplayName();
        java.lang.String str46 = locale42.getCountry();
        int int47 = dateTimeField8.getMaximumShortTextLength(locale42);
        long long49 = dateTimeField8.roundCeiling((long) 54001068);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "59" + "'", str30, "59");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970" + "'", str43, "1970");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "German" + "'", str44, "German");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English (Canada)" + "'", str45, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CA" + "'", str46, "CA");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-21T14:58:32.032Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:58:32.032Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        java.lang.String str11 = property10.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = property10.setCopy(478);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 478 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean6 = property3.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getSecondOfMinute();
        int int10 = dateTime8.getYearOfEra();
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTimeISO();
        boolean boolean13 = dateTime8.isBeforeNow();
        int int14 = dateTime8.getEra();
        int int15 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property16 = dateTime8.dayOfMonth();
        java.lang.String str17 = property16.getName();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfMonth" + "'", str17, "dayOfMonth");
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        boolean boolean6 = dateTime4.isEqualNow();
        int int7 = dateTime4.getDayOfYear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology8);
        org.joda.time.DurationField durationField10 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfWeek();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(obj0, chronology8);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.Period period22 = period16.plusSeconds((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray23 = period22.getFieldTypes();
        org.joda.time.LocalDate localDate24 = localDate12.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Hours hours25 = period22.toStandardHours();
        int int26 = period22.getMinutes();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear(18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear((-762));
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period20 = period15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration24 = period19.toDurationTo((org.joda.time.ReadableInstant) instant23);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration24, 39);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime11.yearOfEra();
        mutableDateTime11.setWeekOfWeekyear(14);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        mutableDateTime11.setChronology(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = chronology33.getZone();
        java.util.Locale locale38 = java.util.Locale.US;
        java.lang.String str39 = dateTimeZone36.getName(44L, locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter7.withZone(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.parse("211", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = property10.addNoWrapToCopy(31);
        org.joda.time.LocalTime localTime15 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property10.getLocalTime();
        int int18 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getSecondOfMinute();
        boolean boolean24 = dateTime22.isEqualNow();
        int int25 = dateTime22.getDayOfYear();
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology26, locale27);
        java.lang.String str29 = locale27.getDisplayLanguage();
        java.lang.String str30 = locale27.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime31 = property10.setCopy("YearWeekDay", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"YearWeekDay\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese" + "'", str29, "Chinese");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        java.lang.String str2 = timeZone0.getID();
        int int3 = timeZone0.getRawOffset();
        int int4 = timeZone0.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = timeZone0.getOffset(0, 382, 53985964, 53772966, (-1026726689), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T15:00:31.071Z" + "'", str2, "2022-02-21T15:00:31.071Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = localTime23.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime27 = localTime25.plusMillis((int) (byte) 100);
        int int28 = property21.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.MutableDateTime mutableDateTime29 = property21.roundHalfCeiling();
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTime();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 1L, periodType3);
        org.joda.time.Period period6 = period4.minusSeconds((-1));
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        int int11 = period9.get(durationFieldType10);
        boolean boolean12 = period4.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.withFieldAdded(durationFieldType10, 52);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.minusDays(55);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMonths(33);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDateTime19.getValue(717);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 717");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        int int13 = dateTimeField8.getLeapAmount((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        int int22 = localDateTime14.indexOf(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime14.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str34 = dateTimeFieldType33.getName();
        int int35 = localDateTime27.indexOf(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.minusSeconds(0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 1, chronology39);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) instant41, periodType42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime14, (org.joda.time.ReadablePartial) localDateTime37, periodType42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone45.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDateTime14.toDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime14.minusDays(2);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks(53750205);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int60 = mutablePeriod59.getWeeks();
        mutablePeriod59.setMinutes(51);
        mutablePeriod59.setMinutes(52);
        mutablePeriod59.setHours(0);
        mutablePeriod59.addSeconds(5);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime54.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) 100, 1L, periodType73);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) 100, 1L, periodType77);
        org.joda.time.Period period79 = period74.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = period78.plusDays(53600069);
        org.joda.time.Period period83 = period81.plusMonths(39239);
        org.joda.time.Period period85 = period83.minusSeconds((-1));
        org.joda.time.Period period86 = period85.toPeriod();
        int[] intArray87 = period86.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = dateTimeField8.set((org.joda.time.ReadablePartial) localDateTime69, 68395761, intArray87, 6748930);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 68395761");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "clockhourOfDay" + "'", str21, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "clockhourOfDay" + "'", str34, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 39239, 0, 53600069, 0, 0, 1, -99]");
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8);
        org.joda.time.Duration duration10 = duration7.toDuration();
        java.lang.String str11 = duration7.toString();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period22 = period17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Duration duration26 = period21.toDurationTo((org.joda.time.ReadableInstant) instant25);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration26, 39);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.yearOfEra();
        mutableDateTime13.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime13.centuryOfEra();
        org.joda.time.Period period33 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.LocalTime localTime35 = localTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 1, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond(56);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getSecondOfMinute();
        int int45 = dateTime43.getYearOfEra();
        org.joda.time.LocalTime localTime46 = dateTime43.toLocalTime();
        org.joda.time.LocalTime.Property property47 = localTime46.millisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = locale50.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology49, locale50, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localTime56.toDateTimeToday();
        org.joda.time.LocalTime.Property property58 = localTime56.secondOfMinute();
        org.joda.time.LocalTime localTime60 = property58.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime62 = property58.addNoWrapToCopy(31);
        org.joda.time.LocalTime localTime63 = property58.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean65 = localTime63.isSupported(dateTimeFieldType64);
        boolean boolean66 = localTime46.isSupported(dateTimeFieldType64);
        org.joda.time.DateTime dateTime68 = dateTime38.withField(dateTimeFieldType64, 100);
        boolean boolean69 = localTime1.isSupported(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType64.getRangeDurationType();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT86403.686S" + "'", str11, "PT86403.686S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(durationFieldType70);
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DurationField durationField9 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfHour();
        boolean boolean12 = dateTimeField11.isSupported();
        int int15 = dateTimeField11.getDifference((long) 39471405, 1645455444830L);
        long long18 = dateTimeField11.addWrapField(0L, 53987462);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-27423599) + "'", int15 == (-27423599));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 120000L + "'", long18 == 120000L);
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration11, (int) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.Interval interval17 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration18 = duration7.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime0.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        boolean boolean26 = property23.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getSecondOfMinute();
        int int30 = dateTime28.getYearOfEra();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime28.toMutableDateTimeISO();
        int int33 = mutableDateTime32.getHourOfDay();
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime32);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime32.setMillisOfSecond(39440053);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39440053 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(53731467);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        int int4 = dateTime2.getYear();
        boolean boolean5 = dateTime2.isAfterNow();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate11 = localDate6.plusWeeks(56);
        org.joda.time.LocalDate localDate13 = localDate6.plusMonths(41);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(16);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period26 = period21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Duration duration30 = period25.toDurationTo((org.joda.time.ReadableInstant) instant29);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration30, 39);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime17.secondOfMinute();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime17.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        java.lang.String str42 = dateTimeZone37.getNameKey((long) 3);
        org.joda.time.DateTime dateTime43 = localDate13.toDateTimeAtStartOfDay(dateTimeZone37);
        java.lang.String str45 = dateTimeZone37.getShortName((long) 120);
        org.joda.time.DateTime dateTime46 = dateTime2.withZone(dateTimeZone37);
        int int47 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime2.withYearOfCentury(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str8 = dateTimeFieldType7.getName();
        int int9 = localDateTime1.indexOf(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        int int22 = localDateTime14.indexOf(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.minusSeconds(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) instant28, periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime1, (org.joda.time.ReadablePartial) localDateTime24, periodType29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone32.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = localDateTime1.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType40 = periodType39.withMonthsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) dateTime37, periodType39);
        org.joda.time.DateTime dateTime43 = dateTime37.plusHours(961);
        int int44 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property45 = dateTime37.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "clockhourOfDay" + "'", str8, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "clockhourOfDay" + "'", str21, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 54053 + "'", int44 == 54053);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.Interval interval9 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = dateTime7.isAfterNow();
        int int11 = dateTime7.getMillisOfSecond();
        org.joda.time.DateTime.Property property12 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 506 + "'", int11 == 506);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime9 = property1.getLocalDateTime();
        int int10 = localDateTime9.getWeekyear();
        int int11 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths(43);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(12);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.Period period24 = period22.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate19.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((-292275054));
        org.joda.time.LocalDate localDate29 = localDate25.minusYears(21);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType31 = periodType30.withMonthsRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate29, periodType30);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.Period period38 = period36.minusSeconds((-1));
        java.lang.String str39 = period36.toString();
        org.joda.time.Period period40 = period36.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod41 = period40.toMutablePeriod();
        int int42 = mutablePeriod41.getDays();
        org.joda.time.LocalDate localDate43 = localDate16.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.LocalDate localDate45 = localDate43.minusDays(359);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime9, (org.joda.time.ReadablePartial) localDate45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 518 + "'", int11 == 518);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.099S" + "'", str39, "PT0.099S");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod3.add((long) 1, chronology7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod3.setPeriod(readableInterval9);
        mutablePeriod3.setHours(0);
        int int13 = mutablePeriod3.getMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration23, (int) (short) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        org.joda.time.Interval interval29 = duration23.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration30 = duration19.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration32, 54);
        long long36 = duration32.getMillis();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 1L, periodType43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.Period period49 = period44.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Duration duration53 = period48.toDurationTo((org.joda.time.ReadableInstant) instant52);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration53, 39);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime40.secondOfMinute();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime40.minuteOfHour();
        int int58 = mutableDateTime40.getYearOfEra();
        org.joda.time.Chronology chronology59 = mutableDateTime40.getChronology();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.eras();
        java.util.Locale locale66 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology64, locale66, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = property72.getField();
        int int74 = property72.get();
        org.joda.time.LocalDateTime localDateTime75 = property72.roundHalfFloorCopy();
        long long77 = chronology64.set((org.joda.time.ReadablePartial) localDateTime75, (long) 2022);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology64);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DurationField durationField80 = chronology64.eras();
        org.joda.time.DateTimeField dateTimeField81 = chronology64.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology64.getZone();
        int int84 = dateTimeZone82.getStandardOffset((long) 736226);
        int int86 = dateTimeZone82.getOffsetFromLocal((long) 505);
        org.joda.time.Chronology chronology87 = chronology59.withZone(dateTimeZone82);
        mutablePeriod3.setPeriod((long) 27, chronology59);
        org.joda.time.DateTimeField dateTimeField89 = chronology59.millisOfSecond();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1969 + "'", int58 == 1969);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 15 + "'", int74 == 15);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645455600000L + "'", long77 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isParser();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        boolean boolean9 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology14 = dateTimeFormatter13.getChronolgy();
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        boolean boolean22 = property19.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        int int26 = dateTime24.getYearOfEra();
        int int27 = property19.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime28 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMinutes(54);
        int int31 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusMillis(893);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears(2023);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(stringBuffer15, (org.joda.time.ReadablePartial) localDateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 14 + "'", int31 == 14);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) '4');
        int int16 = localDateTime15.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        int int21 = localDateTime13.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusSeconds(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 1, chronology25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) instant27, periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime0, (org.joda.time.ReadablePartial) localDateTime23, periodType28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = localDateTime0.toDateTime(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(258);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 258 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfDay" + "'", str20, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        java.util.Locale.Category category0 = null;
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale.setDefault(category1, locale7);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.lang.String str20 = locale19.getVariant();
        dateTimeParserBucket15.saveField(dateTimeFieldType16, "2022-02-21T14:53:55.782Z", locale19);
        java.util.Locale.setDefault(category1, locale19);
        java.lang.String str23 = locale19.getISO3Country();
        java.util.Set<java.lang.Character> charSet24 = locale19.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "15" + "'", str8, "15");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "USA" + "'", str23, "USA");
        org.junit.Assert.assertNotNull(charSet24);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21, 39);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.secondOfMinute();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime8.hourOfDay();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime8.dayOfWeek();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        java.util.Locale locale34 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology32, locale34, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        int int42 = property40.get();
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfFloorCopy();
        long long45 = chronology32.set((org.joda.time.ReadablePartial) localDateTime43, (long) 2022);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DurationField durationField48 = chronology32.eras();
        java.util.Locale locale52 = new java.util.Locale("hi!", "clockhourOfDay", "java.io.IOException");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology32, locale52);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        mutableDateTime8.setZoneRetainFields(dateTimeZone54);
        long long58 = dateTimeZone54.adjustOffset((long) 655, true);
        java.lang.String str60 = dateTimeZone54.getShortName((long) 53807822);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(16, 5996, 559, 53804728, 799, 850, 54026849, dateTimeZone54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53804728 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645455600000L + "'", long45 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 655L + "'", long58 == 655L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.halfdayOfDay();
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (byte) 0);
        java.lang.String str23 = localDateTime20.toString();
        int int24 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusDays(53871092);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, dateTimeZone30);
        long long34 = dateTimeZone30.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 4, dateTimeZone30);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int41 = mutablePeriod40.getWeeks();
        int int42 = mutablePeriod40.getMonths();
        org.joda.time.LocalTime localTime43 = localTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.LocalTime localTime45 = localTime35.withMillisOfSecond(54);
        org.joda.time.LocalTime.Property property46 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime48 = property46.setCopy(4);
        int[] intArray49 = localTime48.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = dateTimeField14.addWrapPartial((org.joda.time.ReadablePartial) localDateTime20, 53890892, intArray49, 856);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53890892");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-21T10:00:53.673" + "'", str23, "2022-02-21T10:00:53.673");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[4, 0, 0, 4]");
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 1, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 1, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        int int41 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration43, 10);
        long long47 = duration46.getMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) 38, (int) 'a');
        int int54 = duration46.compareTo((org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableDuration) duration46, periodType56);
        int int58 = mutableDateTime29.getRoundingMode();
        mutableDateTime29.setMillis(129383503200000L);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        long long64 = dateTimeZone61.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(0L, dateTimeZone66);
        int int68 = dateTimeZone61.getOffset((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime29.toMutableDateTime(dateTimeZone61);
        mutableDateTime29.addWeekyears(86387081);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86500000L + "'", long47 == 86500000L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime70);
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTimeISO();
        mutableDateTime1.addHours(4);
        boolean boolean27 = mutableDateTime1.isBefore(893L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 1, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(dateTimeZone31);
        org.joda.time.LocalTime localTime34 = localTime32.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime36 = localTime34.plusMillis((int) (byte) 100);
        org.joda.time.DateTime dateTime37 = dateTime30.withFields((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 1, chronology39);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) instant41, periodType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int45 = instant41.get(dateTimeFieldType44);
        java.lang.String str46 = dateTimeFieldType44.getName();
        boolean boolean47 = localTime36.isSupported(dateTimeFieldType44);
        boolean boolean48 = mutableDateTime1.isSupported(dateTimeFieldType44);
        mutableDateTime1.addWeekyears(958);
        mutableDateTime1.setYear(53650665);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) 53652105);
        org.joda.time.Hours hours55 = duration54.toStandardHours();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration54, 265);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime1.yearOfEra();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Duration duration64 = duration60.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration68, (int) (short) 100);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology71);
        int int73 = dateTime72.getYearOfCentury();
        org.joda.time.Interval interval74 = duration68.toIntervalTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = duration64.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration76 = duration64.toDuration();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration76);
        org.joda.time.Period period79 = period77.plusHours(2124);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 900 + "'", int45 == 900);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "minuteOfDay" + "'", str46, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period79);
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.Period period7 = period5.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate2.plus((org.joda.time.ReadablePeriod) period7);
        int int9 = localDate8.size();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) instant14, periodType15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) ' ');
        org.joda.time.Chronology chronology20 = localDate17.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 1, periodType15, chronology20);
        org.joda.time.DurationField durationField22 = chronology20.centuries();
        boolean boolean23 = localDate8.equals((java.lang.Object) durationField22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration27, readableInstant28);
        org.joda.time.Period period31 = period29.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate32 = localDate26.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((-292275054));
        org.joda.time.LocalDate localDate36 = localDate32.minusDays(2023);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period47 = period42.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Duration duration51 = period46.toDurationTo((org.joda.time.ReadableInstant) instant50);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration51, 39);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime38.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime38.setZone(dateTimeZone55);
        int int57 = mutableDateTime38.getYearOfEra();
        int int58 = mutableDateTime38.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime38.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property59.getFieldType();
        boolean boolean61 = localDate36.isSupported(dateTimeFieldType60);
        org.joda.time.LocalDate.Property property62 = localDate8.property(dateTimeFieldType60);
        org.joda.time.LocalDate localDate64 = property62.setCopy(898);
        org.joda.time.LocalDate localDate65 = property62.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate65);
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField19 = chronology4.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology4.yearOfCentury();
        long long22 = dateTimeField20.roundHalfEven((long) 1969);
        long long24 = dateTimeField20.roundCeiling(28956291L);
        long long26 = dateTimeField20.roundHalfEven((long) 39438309);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 31536000000L + "'", long24 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int6 = dateTimeZone0.getOffset((long) (short) 0);
        java.lang.String str8 = dateTimeZone0.getNameKey((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str11 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isStandardOffset((-61725369600000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(6);
        int int21 = localDateTime20.getDayOfMonth();
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        java.util.Locale locale28 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology26, locale28, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        int int36 = property34.get();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        long long39 = chronology26.set((org.joda.time.ReadablePartial) localDateTime37, (long) 2022);
        boolean boolean40 = localDateTime20.equals((java.lang.Object) long39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime20.plusMinutes(53650665);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455600000L + "'", long39 == 1645455600000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isParser();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        java.io.Writer writer9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(43);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(12);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer9, (org.joda.time.ReadableInstant) dateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime7 = dateTime1.withYearOfEra(751);
        org.joda.time.Chronology chronology8 = dateTime1.getChronology();
        org.joda.time.DateMidnight dateMidnight9 = dateTime1.toDateMidnight();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfCentury();
        java.lang.String str11 = dateTimeField9.getAsShortText((long) 53812);
        java.lang.String str12 = dateTimeField9.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 54 + "'", int4 == 54);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "70" + "'", str11, "70");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str12, "DateTimeField[yearOfCentury]");
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withChronology(chronology5);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) ' ');
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 27, (long) 'u', chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter4.getParser();
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(writer18, (long) 292278830);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeParser17);
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Period period6 = period4.minusWeeks(100);
        org.joda.time.Period period8 = period6.withDays(1);
        int int9 = period8.getMonths();
        org.joda.time.Period period11 = period8.plusWeeks(53735132);
        org.joda.time.Period period13 = period8.plusWeeks(53865310);
        org.joda.time.Weeks weeks14 = period8.toStandardWeeks();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(weeks14);
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.Interval interval9 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.Period period14 = org.joda.time.Period.millis(100);
        org.joda.time.Period period15 = period14.negated();
        org.joda.time.Period period17 = period14.plusMinutes(32);
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration18);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
    }
}

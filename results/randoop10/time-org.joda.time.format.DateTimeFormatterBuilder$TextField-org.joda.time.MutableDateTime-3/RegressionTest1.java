import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period23 = period18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration27 = period22.toDurationTo((org.joda.time.ReadableInstant) instant26);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration27, 39);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime14.secondOfMinute();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime14.minuteOfHour();
        java.lang.String str32 = property31.getAsShortText();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = locale33.stripExtensions();
        int int35 = property31.getMaximumTextLength(locale34);
        java.lang.String str36 = dateTimeZone7.getShortName((long) (short) 1, locale34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localDate5.toString("English (Canada)", locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "59" + "'", str32, "59");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("dayofmonth (EN-CA,2022-02-21T14:53:55.782Z)", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone1.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone1);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = locale9.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale9, (java.lang.Integer) 45, (int) '4');
        java.lang.String str14 = dateTimeZone1.getName(31536000000L, locale9);
        boolean boolean15 = locale9.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) instant28, periodType29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        java.util.Locale locale37 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology35, locale37, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        int int45 = property43.get();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        long long48 = chronology35.set((org.joda.time.ReadablePartial) localDateTime46, (long) 2022);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology35.minuteOfHour();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) 100, 1L, periodType53);
        org.joda.time.Period period56 = period54.minusSeconds((-1));
        java.lang.String str57 = period54.toString();
        org.joda.time.Period period58 = period54.negated();
        int[] intArray60 = chronology35.get((org.joda.time.ReadablePeriod) period58, (long) 1969);
        org.joda.time.DateTimeField dateTimeField61 = chronology35.halfdayOfDay();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 894, 48L, periodType29, chronology35);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours(22);
        java.util.Locale locale69 = new java.util.Locale("dayOfMonth", "en-CA", "2022-02-21T14:53:55.782Z");
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.lang.String str71 = dateTimeZone64.getName((long) 365, locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 642, chronology35, locale69, (java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime74 = property20.set("53664006", locale69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"53664006\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645455600000L + "'", long48 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0.099S" + "'", str57, "PT0.099S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals(locale69.toString(), "dayofmonth_EN-CA_2022-02-21T14:53:55.782Z");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+22:00" + "'", str71, "+22:00");
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period12.withMillis(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType16 = period14.getFieldType(47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        int int6 = localDateTime0.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withTime(40, 365, 35, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 654 + "'", int6 == 654);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-21T10:53:38.221", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime12 = localTime10.plusMillis((int) (byte) 100);
        int int13 = localTime12.getMillisOfDay();
        org.joda.time.LocalTime localTime15 = localTime12.plusMillis(2022);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.LocalTime localTime25 = localTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period23, (int) (byte) -1);
        org.joda.time.LocalTime localTime27 = localTime12.minusMillis(69);
        org.joda.time.LocalTime localTime29 = localTime27.minusSeconds((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 39282066 + "'", int13 == 39282066);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = property2.roundHalfFloorCopy();
        int int4 = dateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean8 = property5.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        int int12 = dateTime10.getYearOfEra();
        int int13 = property5.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = dateTime10.withDurationAdded((long) (byte) 0, 22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime10.withDate(6, 1969, 27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 42 + "'", int11 == 42);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        boolean boolean12 = dateTime10.isEqualNow();
        int int13 = dateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology14);
        org.joda.time.DurationField durationField16 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(39272321, 54, (int) (byte) 1, 15, (int) (byte) 1, 53644753, 70, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53644753 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 42 + "'", int11 == 42);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(86396191, 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        int int3 = timeZone1.getOffset((long) 23);
        java.lang.Object obj4 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 46, periodType3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 0L, periodType3, chronology5);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod6.addMinutes(53600069);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) ' ', (int) '#', 0, 81, (int) 'x', 36, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 46, periodType3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 0L, periodType3, chronology5);
        org.joda.time.MutablePeriod mutablePeriod7 = mutablePeriod6.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod6.setPeriod(86396, 25, (int) '#', 819, 894, 48, 2, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime.Property property13 = dateTime1.weekOfWeekyear();
        int int14 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property15 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        int int17 = dateTime16.getYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2023 + "'", int17 == 2023);
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, 39221019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39221019 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 43 + "'", int4 == 43);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean5 = property3.isLeap();
        boolean boolean6 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(39266896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39266896 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField20 = chronology4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        int int32 = localDateTime24.indexOf(dateTimeFieldType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str34 = dateTimeFieldType33.getName();
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.property(dateTimeFieldType33);
        org.joda.time.LocalDateTime.Property property36 = localDateTime21.property(dateTimeFieldType33);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        int int39 = localDate38.getDayOfMonth();
        org.joda.time.LocalDate localDate41 = localDate38.plusYears(1);
        org.joda.time.Interval interval42 = localDate38.toInterval();
        int[] intArray43 = localDate38.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray45 = dateTimeField20.set((org.joda.time.ReadablePartial) localDateTime21, 10, intArray43, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "clockhourOfDay" + "'", str31, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "clockhourOfDay" + "'", str34, "clockhourOfDay");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 21]");
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.secondOfDay();
        int int21 = mutableDateTime19.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setDateTime(47, 32, 97, 37, 55, 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfCentury(0);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21, 39);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime8.setZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate0.toDateTimeAtMidnight(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime27.withMonthOfYear(23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        java.util.Locale locale7 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology5, locale7, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 53, chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfHalfday();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.Period period26 = period14.plusSeconds(45);
        org.joda.time.Period period28 = period26.minusYears(31);
        int[] intArray31 = chronology5.get((org.joda.time.ReadablePeriod) period26, (long) 34, (long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology5.getDateTimeMillis(2022, 0, 30, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, -33]");
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 1, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        int int29 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration31, 10);
        org.joda.time.Duration duration35 = duration34.toDuration();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = null;
        mutableDateTime1.setChronology(chronology37);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList0, strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime17 = localTime15.plusMillis((int) (byte) 100);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period24 = period22.minusSeconds((-1));
        java.lang.String str25 = period22.toString();
        org.joda.time.Period period26 = period22.toPeriod();
        org.joda.time.Period period28 = period22.plusSeconds((int) '#');
        int[] intArray29 = period22.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = dateTimeField11.addWrapField((org.joda.time.ReadablePartial) localTime15, 819, intArray29, 53684566);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 819");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 44 + "'", int4 == 44);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.099S" + "'", str25, "PT0.099S");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -99]");
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMonths(86396191);
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) 23, 21);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear(86396);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86396 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:54:45.352Z" + "'", str4, "2022-02-21T14:54:45.352Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = dateTimeField9.toString();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = locale13.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localTime19.toDateTimeToday();
        org.joda.time.LocalTime.Property property21 = localTime19.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property21.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime24 = property21.roundCeilingCopy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Days days29 = period28.toStandardDays();
        int[] intArray30 = period28.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = dateTimeField9.set((org.joda.time.ReadablePartial) localTime24, 2025, intArray30, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str10, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 24, 0, 0, 0]");
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.Period period7 = period5.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((-292275054));
        int int11 = localDate10.getDayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate14 = localDate10.minusYears(31);
        int int15 = localDate10.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 73 + "'", int15 == 73);
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = property10.setCopy("PT0.099S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT0.099S\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean2 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime5 = dateTime1.withDurationAdded((long) 75596, 116);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime1.withDate(53600069, 17, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("10:54:26.637");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=10:54:26.637");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration9 = duration1.plus((org.joda.time.ReadableDuration) duration7);
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        boolean boolean18 = property15.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getSecondOfMinute();
        int int22 = dateTime20.getYearOfEra();
        int int23 = property15.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period25 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        int int26 = dateTime11.getYearOfCentury();
        int int27 = dateTime11.getEra();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = dateTime3.minusYears(0);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(3);
        int int15 = dateTime12.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 45 + "'", int4 == 45);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer4, (long) 12022);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 26);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        java.util.Locale locale7 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology5, locale7, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 53, chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean24 = localDate22.isSupported(durationFieldType23);
        org.joda.time.LocalDate localDate26 = localDate22.plusMonths(52);
        int[] intArray27 = localDate22.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = dateTimeField13.add((org.joda.time.ReadablePartial) localDateTime18, 751, intArray27, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 751");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2025, 9, 21]");
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = property4.setCopy(39239);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39239 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(26, (int) 'x', 1969, 17, 24, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) ' ');
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 59, 12);
        long long13 = chronology5.add((long) '#', (long) 1970, 6);
        org.joda.time.DateTimeField dateTimeField14 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology5.minutes();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale16.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 41, chronology5, locale16);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology5.getDateTimeMillis(365, (int) '4', 0, 27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11855L + "'", long13 == 11855L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English" + "'", str17, "English");
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(41, 33, 49, 2023, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) -1);
        int int15 = localDateTime12.getCenturyOfEra();
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDayOfYear(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusMillis(38);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-21T00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T00:00:00.001\" is malformed at \"22-02-21T00:00:00.001\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant5, periodType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = instant5.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withField(dateTimeFieldType8, 39);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusHours(47);
        int int17 = localDateTime13.getEra();
        int int18 = localDateTime13.getYearOfCentury();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology21, locale23, (java.lang.Integer) 10);
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = localDateTime13.toString("PT86400S", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 894 + "'", int9 == 894);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 30);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("en-CA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"en-CA\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate0.withField(dateTimeFieldType4, 15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean7 = property5.isLeap();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale9.getCountry();
        java.lang.String str12 = property5.getAsShortText(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder14 = builder1.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguageTag("2022-02-21T14:53:38.450Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CA" + "'", str11, "CA");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "14" + "'", str12, "14");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.io.IOException iOException2 = new java.io.IOException();
        iOException1.addSuppressed((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException();
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.lang.Throwable[] throwableArray7 = iOException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str23 = dateTimeZone21.getNameKey((long) (byte) 0);
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDate(12, 38, 39266896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone2);
        java.lang.String str9 = dateTimeZone2.getName((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) "UTC", dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"UTC\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTimeFormatter2.parseDateTime("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        mutableDateTime1.addYears(3);
        mutableDateTime1.setSecondOfDay(38);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean5 = property3.isLeap();
        boolean boolean6 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property3.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setLanguage("secondOfMinute");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: secondOfMinute [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime.Property property13 = dateTime1.weekOfWeekyear();
        int int14 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property15 = dateTime1.weekyear();
        java.lang.String str16 = property15.getAsString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("days", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) '4');
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.weekyear();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Jan\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 1, chronology4);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) instant6, periodType7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) ' ');
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 1, periodType7, chronology12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) ' ');
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 39251167, (long) 21, periodType7, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.setMinutes(12022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.minuteOfDay();
        java.util.Date date21 = mutableDateTime1.toDate();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Apr 01 23:59:56 UTC 1970");
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology4.halfdayOfDay();
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = dateTime21.toLocalDateTime();
        org.joda.time.LocalTime localTime24 = localDateTime23.toLocalTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) ' ');
        org.joda.time.Chronology chronology29 = localDate26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology29.days();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period40 = period38.minusSeconds((-1));
        java.lang.String str41 = period38.toString();
        org.joda.time.Period period42 = period38.toPeriod();
        org.joda.time.PeriodType periodType43 = period38.getPeriodType();
        org.joda.time.Period period44 = period34.normalizedStandard(periodType43);
        org.joda.time.Period period46 = period44.multipliedBy((int) (short) 100);
        org.joda.time.Seconds seconds47 = period46.toStandardSeconds();
        org.joda.time.Period period49 = period46.minusWeeks(58);
        int[] intArray51 = chronology29.get((org.joda.time.ReadablePeriod) period49, (long) 59);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = dateTimeField19.set((org.joda.time.ReadablePartial) localDateTime23, 39221019, intArray51, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0.099S" + "'", str41, "PT0.099S");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 59]");
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean7 = property5.isLeap();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale9.getCountry();
        java.lang.String str12 = property5.getAsShortText(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder14 = builder1.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguageTag("2022");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CA" + "'", str11, "CA");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "14" + "'", str12, "14");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate5.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate5.withYearOfCentury(39236);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39236 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-625));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        org.joda.time.Period period7 = period5.minusMillis(1439);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = period5.getValue(46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 46");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 1, chronology4);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) instant6, periodType7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) ' ');
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 1, periodType7, chronology12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) ' ');
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 39251167, (long) 21, periodType7, chronology17);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(periodType7);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod19.addYears(53644753);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.property(dateTimeFieldType13);
        int int16 = localDateTime12.getMinuteOfHour();
        org.joda.time.DateTime dateTime17 = localDateTime12.toDateTime();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localDateTime22.getFields();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period31 = period29.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.plus((org.joda.time.ReadablePeriod) period31);
        int int33 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = localDateTime12.getFieldType((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 120");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        java.io.Writer writer7 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 1, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer7, (org.joda.time.ReadableInstant) dateTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        int int7 = localDate6.getDayOfMonth();
        org.joda.time.LocalDate localDate9 = localDate6.plusYears(1);
        org.joda.time.LocalDate localDate11 = localDate9.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate9);
        int int13 = property2.getDifference((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime15 = property2.addToCopy((long) 53639537);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49 + "'", int5 == 49);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-625) + "'", int13 == (-625));
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.addMillis(39221019);
        int int20 = mutableDateTime1.getCenturyOfEra();
        long long21 = mutableDateTime1.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime((int) '4', 2022, 116, 53639537);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 39217210L + "'", long21 == 39217210L);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plus((org.joda.time.ReadablePeriod) period13);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDateTime14.getValue(12022);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 12022");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) ' ');
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate12 = localDate6.withFieldAdded(durationFieldType10, (int) (byte) 100);
        int int13 = periodType4.indexOf(durationFieldType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = periodType4.getFieldType(642);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 642");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours((-1));
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime8 = property6.addCopy((long) 893);
        org.joda.time.LocalTime localTime9 = property6.roundHalfFloorCopy();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period24 = period19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration28 = period23.toDurationTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant30 = instant27.plus((long) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 1, chronology32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) instant34, periodType35);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) instant27, periodType35);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) 100, 1L, periodType42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.Period period48 = period43.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Duration duration52 = period47.toDurationTo((org.joda.time.ReadableInstant) instant51);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration52, 39);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime39.secondOfMinute();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime39.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 1L, periodType60);
        org.joda.time.Period period63 = period61.minusSeconds((-1));
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period66 = duration65.toPeriod();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.centuries();
        int int68 = period66.get(durationFieldType67);
        boolean boolean69 = period61.isSupported(durationFieldType67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime57.withFieldAdded(durationFieldType67, 52);
        mutableDateTime39.add(durationFieldType67, (int) (byte) 100);
        boolean boolean74 = periodType35.isSupported(durationFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime76 = localTime9.withFieldAdded(durationFieldType67, 39266896);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(2L);
        int int6 = localDateTime5.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = new org.joda.time.Period(97, 39272321, (int) (byte) -1, 1969, 39250977, 2022, 27, 18, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        mutableDateTime1.setYear(10);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) ' ');
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate15 = localDate9.withFieldAdded(durationFieldType13, (int) (byte) 100);
        org.joda.time.LocalDate.Property property16 = localDate9.dayOfWeek();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(3);
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        java.util.Locale locale23 = new java.util.Locale("14", "German", "Jan");
        int int24 = dateTimeField19.getMaximumShortTextLength(locale23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = mutableDateTime1.toString("java.io.IOException", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale23.toString(), "14_GERMAN_Jan");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(5, 12, 53600069, 40, 16, 22, 86396191);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale11);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology29, locale31, (java.lang.Integer) 10);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale38 = java.util.Locale.UK;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale11, locale15, locale17, locale21, locale24, locale25, locale27, locale31, locale35, locale37, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList40, filteringMode42);
        boolean boolean44 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4);
        strSet2.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = strSet2.add("2022-02-21T10:53:38.221");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "deu" + "'", str20, "deu");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(0);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 46, periodType17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod18, 39221019);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        java.util.Locale locale28 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology26, locale28, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        int int36 = property34.get();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        long long39 = chronology26.set((org.joda.time.ReadablePartial) localDateTime37, (long) 2022);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DurationField durationField42 = chronology26.eras();
        java.util.Locale locale46 = new java.util.Locale("hi!", "clockhourOfDay", "java.io.IOException");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology26, locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) 39221019, chronology26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455600000L + "'", long39 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) ' ');
        int int7 = localDate4.size();
        org.joda.time.LocalDate.Property property8 = localDate4.era();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDate localDate12 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths(1969);
        org.joda.time.LocalDate.Property property15 = localDate14.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((int) (short) 10, 38, 53600069, (int) (short) 10);
        org.joda.time.PeriodType periodType6 = mutablePeriod5.getPeriodType();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        boolean boolean12 = dateTime10.isEqualNow();
        int int13 = dateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology14);
        org.joda.time.DurationField durationField16 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((java.lang.Object) periodType0, periodType6, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType6);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        java.io.Writer writer7 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.Period period18 = period13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration22 = period17.toDurationTo((org.joda.time.ReadableInstant) instant21);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration22, 39);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime9.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime9.setZone(dateTimeZone26);
        int int28 = mutableDateTime9.getYearOfEra();
        mutableDateTime9.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime9.toMutableDateTimeISO();
        mutableDateTime9.addHours(4);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime9.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer7, (org.joda.time.ReadableInstant) mutableDateTime9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1969 + "'", int28 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) instant7, periodType8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) ' ');
        org.joda.time.Chronology chronology13 = localDate10.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 1, periodType8, chronology13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) ' ');
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate21 = localDate15.withFieldAdded(durationFieldType19, (int) (byte) 100);
        boolean boolean22 = periodType8.isSupported(durationFieldType19);
        org.joda.time.PeriodType periodType23 = periodType8.withDaysRemoved();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 43, periodType8, chronology26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration33 = duration29.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        java.util.Locale locale42 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology40, locale42, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 53, chronology40);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology40.monthOfYear();
        org.joda.time.Period period48 = duration29.toPeriod(periodType34, chronology40);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#', periodType8, chronology40);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(35L, chronology40);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.eras();
        java.util.Locale locale61 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology59, locale61, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = property67.getField();
        int int69 = property67.get();
        org.joda.time.LocalDateTime localDateTime70 = property67.roundHalfFloorCopy();
        long long72 = chronology59.set((org.joda.time.ReadablePartial) localDateTime70, (long) 2022);
        org.joda.time.DateTimeField dateTimeField73 = chronology59.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField74 = chronology59.minuteOfHour();
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) 100, 1L, periodType77);
        org.joda.time.Period period80 = period78.minusSeconds((-1));
        java.lang.String str81 = period78.toString();
        org.joda.time.Period period82 = period78.negated();
        int[] intArray84 = chronology59.get((org.joda.time.ReadablePeriod) period82, (long) 1969);
        // The following exception was thrown during execution in test generation
        try {
            chronology40.validate((org.joda.time.ReadablePartial) localDate52, intArray84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeField68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 14 + "'", int69 == 14);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645455600000L + "'", long72 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT0.099S" + "'", str81, "PT0.099S");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 1, 969]");
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.yearOfCentury();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField9.getType();
        int int13 = dateTimeField9.getMaximumValue(55123200000L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.yearOfCentury();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        long long12 = dateTimeField9.roundFloor((long) 97);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        int int7 = localDateTime6.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53730692 + "'", int7 == 53730692);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale3, (java.lang.Integer) 10);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = periodType8.getFieldType((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) chronology7, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        int int22 = mutableDateTime21.getMinuteOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1439 + "'", int22 == 1439);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = dateTimeField6.getAsShortText((long) (byte) 1, locale8);
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = locale8.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-CA" + "'", str11, "en-CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en_CA" + "'", str12, "en_CA");
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        boolean boolean13 = localDateTime4.isSupported(durationFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = property14.setCopy("hourOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hourOfDay\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant11.toDateTime();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) ' ');
        int int19 = localDate16.size();
        org.joda.time.DateMidnight dateMidnight20 = localDate16.toDateMidnight();
        boolean boolean21 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) ' ');
        int int25 = localDate22.size();
        org.joda.time.LocalDate.Property property26 = localDate22.era();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        boolean boolean28 = localDate22.equals((java.lang.Object) periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) boolean21, periodType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        java.io.IOException iOException0 = new java.io.IOException();
        java.lang.Throwable[] throwableArray1 = iOException0.getSuppressed();
        java.io.IOException iOException2 = new java.io.IOException();
        iOException0.addSuppressed((java.lang.Throwable) iOException2);
        java.lang.String str4 = iOException2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException" + "'", str4, "java.io.IOException");
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekOfWeekyear();
        int int19 = dateTimeField18.getMaximumValue();
        int int22 = dateTimeField18.getDifference((long) 642, (long) 31);
        boolean boolean24 = dateTimeField18.isLeap(39251167L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 1, chronology28);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) instant30, periodType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int34 = instant30.get(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withField(dateTimeFieldType33, 39);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusSeconds(52);
        int int39 = localDateTime38.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusWeeks(22);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration42, readableInstant43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.Period period50 = period48.minusSeconds((-1));
        java.lang.String str51 = period48.toString();
        org.joda.time.Period period52 = period48.toPeriod();
        org.joda.time.PeriodType periodType53 = period48.getPeriodType();
        org.joda.time.Period period54 = period44.normalizedStandard(periodType53);
        org.joda.time.Period period56 = period54.withSeconds(10);
        int int57 = period54.size();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime38.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.LocalDateTime.Property property59 = localDateTime38.year();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str68 = dateTimeFieldType67.getName();
        int int69 = localDateTime61.indexOf(dateTimeFieldType67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime61.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime61.minusSeconds((int) '#');
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period(readableDuration75, readableInstant76);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((long) 100, 1L, periodType80);
        org.joda.time.Period period83 = period81.minusSeconds((-1));
        java.lang.String str84 = period81.toString();
        org.joda.time.Period period85 = period81.toPeriod();
        org.joda.time.PeriodType periodType86 = period81.getPeriodType();
        org.joda.time.Period period87 = period77.normalizedStandard(periodType86);
        org.joda.time.Period period89 = period87.multipliedBy((int) (short) 100);
        int[] intArray91 = chronology74.get((org.joda.time.ReadablePeriod) period87, 2629746000L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localDateTime38, 29, intArray91, 39282046);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 894 + "'", int34 == 894);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0.099S" + "'", str51, "PT0.099S");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "clockhourOfDay" + "'", str68, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PT0.099S" + "'", str84, "PT0.099S");
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 4, 2, 10, 29, 6, 0]");
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfEven();
        mutableDateTime23.addYears(48);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setDateTime((int) (short) 0, 39282046, 2022, (int) (short) -1, 0, 1970, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears(1);
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime5.withHourOfDay(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime21.setDayOfWeek((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate6 = localDate0.plusDays(1439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate0.withEra(39236);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39236 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 39272321);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period12.withMillis(22);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        int int16 = period12.get(durationFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = period12.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(49, 457070, 53638420, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457070 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, readableInstant6);
        org.joda.time.Duration duration8 = duration5.toDuration();
        org.joda.time.Duration duration10 = org.joda.time.Duration.millis(1645455600000L);
        org.joda.time.Minutes minutes11 = duration10.toStandardMinutes();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration21, (int) (short) 100);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.Interval interval27 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration17.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration30, 54);
        org.joda.time.Duration duration34 = duration10.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration40 = duration36.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration44, (int) (short) 100);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        int int49 = dateTime48.getYearOfCentury();
        org.joda.time.Interval interval50 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = duration40.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = duration44.toPeriodTo(readableInstant52);
        org.joda.time.Duration duration54 = duration34.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration55 = duration5.minus((org.joda.time.ReadableDuration) duration54);
        java.lang.Object obj56 = null;
        boolean boolean57 = duration5.equals(obj56);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.parse("java.io.IOException: Coordinated Universal Time", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(dateTimePrinter6);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(11, 751, 6, 0, 57, 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        int int17 = mutableDateTime1.getDayOfMonth();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) ' ');
        int int21 = localDate18.size();
        org.joda.time.LocalDate.Property property22 = localDate18.era();
        org.joda.time.LocalDate localDate23 = property22.roundCeilingCopy();
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = property24.addWrapFieldToCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean28 = property24.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime1.property(dateTimeFieldType27);
        boolean boolean30 = property29.isLeap();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        int int21 = period19.get(durationFieldType20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period19, 54);
        mutableDateTime1.setMillisOfDay(0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.centuryOfEra();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) ' ');
        org.joda.time.Chronology chronology32 = localDate29.getChronology();
        org.joda.time.Period period33 = duration28.toPeriod(chronology32);
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) 100, 1L, periodType42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.Period period48 = period43.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Duration duration52 = period47.toDurationTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime39.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfDay(1);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str63 = dateTimeFieldType62.getName();
        int int64 = localDateTime56.indexOf(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime56.minusSeconds((int) '#');
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period(readableDuration70, readableInstant71);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) 100, 1L, periodType75);
        org.joda.time.Period period78 = period76.minusSeconds((-1));
        java.lang.String str79 = period76.toString();
        org.joda.time.Period period80 = period76.toPeriod();
        org.joda.time.PeriodType periodType81 = period76.getPeriodType();
        org.joda.time.Period period82 = period72.normalizedStandard(periodType81);
        org.joda.time.Period period84 = period82.multipliedBy((int) (short) 100);
        int[] intArray86 = chronology69.get((org.joda.time.ReadablePeriod) period82, 2629746000L);
        // The following exception was thrown during execution in test generation
        try {
            chronology32.validate((org.joda.time.ReadablePartial) localDateTime55, intArray86);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "clockhourOfDay" + "'", str63, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT0.099S" + "'", str79, "PT0.099S");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 4, 2, 10, 29, 6, 0]");
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTime();
        int int8 = mutableDateTime7.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths(41);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths(16);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = locale12.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period19 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = dateTimeField6.getAsShortText((long) (byte) 1, locale8);
        boolean boolean11 = dateTimeField6.isLeap((long) 43);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField6.set((long) 24, "Etc/UTC");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Etc/UTC\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        mutablePeriod9.addWeeks(14);
        int int12 = mutablePeriod9.size();
        mutablePeriod9.clear();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(39236, 0, (int) (short) 100, (int) ' ', (int) (byte) 0, 2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        java.lang.String str34 = property33.getAsString();
        org.joda.time.LocalTime localTime36 = property33.addCopy((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType38 = localTime36.getFieldType(58);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 58");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "10" + "'", str34, "10");
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMinutes(9722);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekOfWeekyear(86396);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86396 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = dateTimeFormatter2.parseLocalTime("2022-02-21T15:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.secondOfDay();
        int int21 = mutableDateTime19.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setHourOfDay(55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Days days3 = period2.toStandardDays();
        int[] intArray4 = period2.getValues();
        org.joda.time.Period period6 = period2.withHours(4);
        int int7 = period6.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 24, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        mutablePeriod4.addYears(59);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        java.util.Locale locale14 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology12, locale14, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 53, chronology12);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.PeriodType periodType29 = period24.getPeriodType();
        org.joda.time.Period period30 = period20.normalizedStandard(periodType29);
        boolean boolean31 = localDate17.equals((java.lang.Object) period20);
        org.joda.time.Interval interval32 = localDate17.toInterval();
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval32);
        mutablePeriod4.setPeriod((long) 12);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.099S" + "'", str27, "PT0.099S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        timeZone6.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str12 = timeZone6.getID();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(73, 36, 0, 21, 8, 39243612, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39243612 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Etc/UTC" + "'", str12, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        boolean boolean12 = dateTime10.isEqualNow();
        int int13 = dateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfMonth();
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, dateTimeZone20);
        int int23 = dateTimeZone20.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj18, dateTimeZone20);
        java.lang.String str25 = dateTimeZone20.toString();
        org.joda.time.Chronology chronology26 = chronology14.withZone(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(29, 75596, 53652105, 53600069, 70, (int) (short) 10, 56, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53600069 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54 + "'", int11 == 54);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean10 = property6.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration25, 39);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.secondOfMinute();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime12.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = locale31.stripExtensions();
        int int33 = property29.getMaximumTextLength(locale32);
        java.lang.String str34 = locale32.getDisplayLanguage();
        int int35 = property6.getMaximumShortTextLength(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = locale32.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "59" + "'", str30, "59");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay(55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = property2.setCopy("English (Canada)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"English (Canada)\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.parse("UTC", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        java.lang.String str5 = localDate0.toString();
        int int6 = localDate0.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21" + "'", str5, "2022-02-21");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        boolean boolean6 = dateTime4.isEqualNow();
        int int7 = dateTime4.getDayOfYear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.Period period11 = new org.joda.time.Period(1L, chronology8);
        int int12 = period11.size();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 55 + "'", int5 == 55);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(0);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 1, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        int int29 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration31, 10);
        org.joda.time.Duration duration35 = duration34.toDuration();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration34);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime1.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime41 = property39.set("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"English (United Kingdom)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDayOfMonth(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("secondOfDay", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant1, readableInstant2, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(86400L, periodType3);
        java.lang.String str7 = periodType3.getName();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "YearDayTime" + "'", str7, "YearDayTime");
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale3, (java.lang.Integer) 10);
        long long9 = dateTimeParserBucket6.computeMillis(true, "");
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        int int11 = dateTimeParserBucket6.getOffset();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 39266896);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("20");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"20\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) ' ');
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 59, 12);
        long long12 = chronology4.add((long) '#', (long) 1970, 6);
        org.joda.time.DateTimeField dateTimeField13 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField14 = chronology4.minutes();
        long long16 = durationField14.getMillis(4);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 11855L + "'", long12 == 11855L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 240000L + "'", long16 == 240000L);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.parse("2022-02-21T10:54:49.000", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration5.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 1, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 1, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        int int25 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType27 = periodType26.withDaysRemoved();
        org.joda.time.Period period28 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType26);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period35 = period33.minusSeconds((-1));
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.centuries();
        int int40 = period38.get(durationFieldType39);
        boolean boolean41 = period33.isSupported(durationFieldType39);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period52 = period47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Duration duration56 = period51.toDurationTo((org.joda.time.ReadableInstant) instant55);
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration56, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean60 = mutableDateTime43.isSupported(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getDurationType();
        int int62 = period33.get(durationFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod29.set(durationFieldType61, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime9 = property1.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(43);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDateTime13.getValue(2025);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2025");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 56 + "'", int4 == 56);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear(52);
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.LocalDate localDate6 = localDate0.plusWeeks(2022);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localDate6.toString("2022-02-21T14:54:32.435Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime1.toString(dateTimeFormatter22);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        java.util.Locale locale31 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology29, locale31, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        int int39 = property37.get();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfFloorCopy();
        long long42 = chronology29.set((org.joda.time.ReadablePartial) localDateTime40, (long) 2022);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DurationField durationField45 = chronology29.eras();
        java.util.Locale locale49 = new java.util.Locale("hi!", "clockhourOfDay", "java.io.IOException");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology29, locale49);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket50.getZone();
        int int53 = dateTimeZone51.getOffset((long) 40);
        mutableDateTime1.setZoneRetainFields(dateTimeZone51);
        int int55 = mutableDateTime1.getSecondOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-02-01T23:59:56.244Z" + "'", str23, "1969-02-01T23:59:56.244Z");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645455600000L + "'", long42 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_CLOCKHOUROFDAY_java.io.IOException");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 86396 + "'", int55 == 86396);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        boolean boolean13 = localDateTime4.isSupported(durationFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime4.withWeekOfWeekyear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 10, 35, 81, 3, 53638420, 7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53638420 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMillis((int) (byte) 0);
        int int17 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks((int) '4');
        java.util.Date date22 = localDateTime19.toDate();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromDateFields(date22);
        boolean boolean24 = timeZone0.inDaylightTime(date22);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 21 10:54:57 UTC 2022");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = property3.getDifference((org.joda.time.ReadableInstant) dateTime6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = property3.setCopy((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withWeekyear((int) (short) 10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period34 = period29.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Duration duration38 = period33.toDurationTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant40 = instant37.plus((long) (byte) -1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 1, chronology42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) instant44, periodType45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) instant37, periodType45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) 100, 1L, periodType52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period58 = period53.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Duration duration62 = period57.toDurationTo((org.joda.time.ReadableInstant) instant61);
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration62, 39);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime49.secondOfMinute();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime49.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) 100, 1L, periodType70);
        org.joda.time.Period period73 = period71.minusSeconds((-1));
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period76 = duration75.toPeriod();
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.centuries();
        int int78 = period76.get(durationFieldType77);
        boolean boolean79 = period71.isSupported(durationFieldType77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime67.withFieldAdded(durationFieldType77, 52);
        mutableDateTime49.add(durationFieldType77, (int) (byte) 100);
        boolean boolean84 = periodType45.isSupported(durationFieldType77);
        boolean boolean85 = localDateTime15.isSupported(durationFieldType77);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        mutablePeriod6.setYears((int) '#');
        org.joda.time.Period period9 = period2.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMillis((int) (byte) 0);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.millis();
        boolean boolean23 = localDateTime14.isSupported(durationFieldType22);
        mutablePeriod6.set(durationFieldType22, 17);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 4, dateTimeZone2);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int13 = mutablePeriod12.getWeeks();
        int int14 = mutablePeriod12.getMonths();
        org.joda.time.LocalTime localTime15 = localTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        int int16 = localTime15.size();
        org.joda.time.LocalTime localTime18 = localTime15.plusSeconds(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localTime18.toString("clockhourOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        mutableDateTime1.setYear(10);
        mutableDateTime1.addSeconds((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusMillis(2022);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        java.lang.String str15 = period12.toString();
        org.joda.time.Period period16 = period12.toPeriod();
        org.joda.time.LocalTime localTime18 = localTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) (byte) -1);
        org.joda.time.LocalTime localTime20 = localTime5.minusMillis(69);
        org.joda.time.LocalTime localTime22 = localTime20.minusSeconds((int) '4');
        int int23 = localTime22.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39298055 + "'", int6 == 39298055);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.099S" + "'", str15, "PT0.099S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("United States");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Greenwich Mean Time" + "'", str4, "Greenwich Mean Time");
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period2.plusSeconds(45);
        org.joda.time.Period period16 = period14.minusYears(31);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType18 = periodType17.withMonthsRemoved();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology24);
        org.joda.time.DurationField durationField27 = chronology24.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = new org.joda.time.Period((java.lang.Object) period16, periodType18, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate7 = localDate0.minusDays(53638420);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 1L, periodType9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period15 = period10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Duration duration19 = period14.toDurationTo((org.joda.time.ReadableInstant) instant18);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration19, 39);
        mutableDateTime6.setDayOfYear(22);
        boolean boolean24 = dateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = mutableDateTime6.toString("deu");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 58 + "'", int2 == 58);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        java.util.Locale locale40 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology38, locale40, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) ' ');
        org.joda.time.Chronology chronology46 = localDate43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField47.getType();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology51, locale53, (java.lang.Integer) 10);
        dateTimeParserBucket42.saveField(dateTimeFieldType48, "PT0.099S", locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.yearOfCentury();
        dateTimeParserBucket42.saveField(dateTimeFieldType58, 43);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = localTime32.get(dateTimeFieldType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Period period14 = period7.plusYears(0);
        org.joda.time.Period period15 = period7.toPeriod();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        int int27 = period25.get(durationFieldType26);
        boolean boolean28 = period20.isSupported(durationFieldType26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime16.withFieldAdded(durationFieldType26, 52);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getSecondOfMinute();
        boolean boolean36 = dateTime34.isEqualNow();
        int int37 = dateTime34.getDayOfYear();
        org.joda.time.Chronology chronology38 = dateTime34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.yearOfCentury();
        boolean boolean41 = durationFieldType26.isSupported(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) period15, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 58 + "'", int35 == 58);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setRawOffset((int) '#');
        boolean boolean3 = timeZone0.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone0.getOffset(21, 6, 39239, 33, 365, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.Minutes minutes2 = duration1.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) (short) 0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.Period period12 = period10.withDays((int) (byte) 1);
        org.joda.time.Period period14 = period12.minusWeeks(100);
        org.joda.time.Period period16 = period12.minusWeeks(2023);
        org.joda.time.Duration duration17 = period12.toStandardDuration();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period32 = period27.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Duration duration36 = period31.toDurationTo((org.joda.time.ReadableInstant) instant35);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration36, 39);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime23.yearOfEra();
        mutableDateTime23.setWeekOfWeekyear(14);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) ' ');
        org.joda.time.Chronology chronology45 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.minuteOfDay();
        mutableDateTime23.setChronology(chronology45);
        org.joda.time.Period period48 = duration17.toPeriod(periodType18, chronology45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period49 = new org.joda.time.Period(0, 0, 28, 2025, 8, 52, 53652105, (int) (short) 0, periodType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add(69);
        mutableDateTime24.addMonths(32);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 1);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Days days3 = duration1.toStandardDays();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, (int) (short) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getYearOfCentury();
        org.joda.time.Interval interval13 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20);
        long long22 = duration19.getStandardDays();
        org.joda.time.Duration duration23 = duration19.toDuration();
        org.joda.time.Duration duration24 = duration7.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration25 = duration1.minus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration28 = duration7.withDurationAdded((-1511999969L), (int) (short) 1);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.LocalDate localDate32 = localDate29.withWeekyear(52);
        org.joda.time.Interval interval33 = localDate29.toInterval();
        org.joda.time.LocalDate localDate35 = localDate29.plusWeeks(2022);
        boolean boolean36 = duration28.equals((java.lang.Object) localDate35);
        long long37 = duration28.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3600L + "'", long2 == 3600L);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1511989969L) + "'", long37 == (-1511989969L));
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("United States");
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.lang.String str9 = property7.toString();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        int int13 = property7.getMaximumShortTextLength(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = timeZone1.getDisplayName(true, 2, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[hourOfDay]" + "'", str9, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.parse("dayofmonth (EN-CA,2022-02-21T14:53:55.782Z)", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(locale5);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean4 = localDate2.isSupported(durationFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths(52);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        org.joda.time.LocalDate.Property property8 = localDate6.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setRawOffset((int) '#');
        boolean boolean3 = timeZone0.observesDaylightTime();
        int int4 = timeZone0.getRawOffset();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale.setDefault(locale5);
        java.lang.String str8 = timeZone0.getDisplayName(locale5);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Koordinierte Universalzeit" + "'", str8, "Koordinierte Universalzeit");
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.Period period7 = period5.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period10 = period7.plusSeconds(45);
        org.joda.time.Period period12 = period7.withHours(1439);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfCentury(0);
        java.lang.String str7 = localDate6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) localDate6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2000-02-21" + "'", str7, "2000-02-21");
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(53652105, 17, 26, 819, 56, 3, 86396191, 39239, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        boolean boolean7 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.parse("2022-02-19T14:54:47.026", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(6);
        java.lang.String str21 = property18.getAsText();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "5" + "'", str21, "5");
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration14 = duration10.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period23 = period18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration27 = period22.toDurationTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant29 = instant26.plus((long) (byte) -1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 1, chronology31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) instant33, periodType34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) instant26, periodType34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) 39221019, periodType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(12022, 35, 0, 53730692, 44, 0, 2025, 26, periodType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(56);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = period9.plusDays(53600069);
        org.joda.time.Period period14 = period12.plusMonths(39239);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        int int17 = period16.getMonths();
        org.joda.time.Period period18 = period1.minus((org.joda.time.ReadablePeriod) period16);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39239 + "'", int17 == 39239);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        boolean boolean19 = property16.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        int int23 = dateTime21.getYearOfEra();
        int int24 = property16.getDifference((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime25 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(54);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusDays(50);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str38 = dateTimeFieldType37.getName();
        int int39 = localDateTime31.indexOf(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime31.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime31.minusSeconds((int) '#');
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableDuration45, readableInstant46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period53 = period51.minusSeconds((-1));
        java.lang.String str54 = period51.toString();
        org.joda.time.Period period55 = period51.toPeriod();
        org.joda.time.PeriodType periodType56 = period51.getPeriodType();
        org.joda.time.Period period57 = period47.normalizedStandard(periodType56);
        org.joda.time.Period period59 = period57.multipliedBy((int) (short) 100);
        int[] intArray61 = chronology44.get((org.joda.time.ReadablePeriod) period57, 2629746000L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = dateTimeField12.addWrapPartial((org.joda.time.ReadablePartial) localDateTime27, 39300, intArray61, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39300");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "clockhourOfDay" + "'", str38, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.099S" + "'", str54, "PT0.099S");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 4, 2, 10, 29, 6, 0]");
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        int int4 = localDate3.getDayOfMonth();
        org.joda.time.LocalDate localDate6 = localDate3.plusYears(1);
        org.joda.time.LocalDate localDate8 = localDate6.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime1.withFields((org.joda.time.ReadablePartial) localDate6);
        int int10 = localDate6.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDate6.toString("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        java.util.Locale locale3 = new java.util.Locale("Etc/UTC", "10", "23:59:59.999");
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration4, readableInstant5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 1L, periodType9);
        org.joda.time.Period period12 = period10.minusSeconds((-1));
        java.lang.String str13 = period10.toString();
        org.joda.time.Period period14 = period10.toPeriod();
        org.joda.time.PeriodType periodType15 = period10.getPeriodType();
        org.joda.time.Period period16 = period6.normalizedStandard(periodType15);
        org.joda.time.Period period18 = period16.multipliedBy((int) (short) 100);
        org.joda.time.Seconds seconds19 = period18.toStandardSeconds();
        org.joda.time.Period period21 = period18.minusWeeks(58);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period23 = period18.normalizedStandard(periodType22);
        boolean boolean24 = locale3.equals((java.lang.Object) period23);
        org.junit.Assert.assertEquals(locale3.toString(), "etc/utc_10_23:59:59.999");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0.099S" + "'", str13, "PT0.099S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        long long13 = instant11.getMillis();
        org.joda.time.Instant instant15 = instant11.minus((long) (byte) 1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) 49);
        org.joda.time.Instant instant19 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration17, 16);
        boolean boolean20 = instant19.isBeforeNow();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(48L, dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime11.withDate(37, 70, 15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(0L, chronology1);
        boolean boolean3 = dateTime2.isAfterNow();
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime2.withFieldAdded(durationFieldType4, 53684566);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        boolean boolean12 = dateTime10.isEqualNow();
        int int13 = dateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology14);
        int int16 = mutablePeriod15.getDays();
        org.joda.time.DateTime dateTime18 = dateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay19 = dateTime18.toTimeOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        boolean boolean9 = dateTime7.isEqualNow();
        int int10 = dateTime7.getDayOfYear();
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology11);
        org.joda.time.DurationField durationField13 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 39246272, (long) 5, chronology11);
        org.joda.time.Period period16 = new org.joda.time.Period((long) 4017, 1645455600000L, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = period16.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.DateTime dateTime10 = dateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.DateTime.Property property11 = dateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime1.toMutableDateTimeISO();
        int int13 = dateTime1.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period24 = period19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration28 = period23.toDurationTo((org.joda.time.ReadableInstant) instant27);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration28, 39);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime15.yearOfEra();
        mutableDateTime15.setDayOfYear((int) ' ');
        mutableDateTime15.add((long) 39221019);
        mutableDateTime15.setMinuteOfDay(21);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        java.util.Locale locale45 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology43, locale45, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology49, locale51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = chronology43.withZone(dateTimeZone54);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField57.getType();
        int int59 = mutableDateTime15.get(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setDayOfMonth(39298055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39298055 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT10H100M97.021S" + "'", str9, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 895 + "'", int13 == 895);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        int int10 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        long long16 = duration12.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone9.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(39);
        int int16 = localDateTime13.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer8, (org.joda.time.ReadablePartial) localDateTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 55 + "'", int16 == 55);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(24, 893, (-292275054), 18, 2023, 53652105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 1, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 1, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateMidnight dateMidnight18 = dateTime12.toDateMidnight();
        org.joda.time.Period period20 = org.joda.time.Period.seconds(5);
        org.joda.time.DateTime dateTime21 = dateTime12.minus((org.joda.time.ReadablePeriod) period20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.joda.time.Period period8 = new org.joda.time.Period(0, (int) (byte) 0, 893, 1, 9, (int) '#', 86396191, 59);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = property10.setCopy(2);
        org.joda.time.LocalTime localTime15 = property10.roundFloorCopy();
        org.joda.time.LocalTime localTime17 = localTime15.plusSeconds(51);
        int int19 = localTime17.getValue(1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 55 + "'", int19 == 55);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        int int37 = dateTimeField34.getMaximumValue((long) (-292275054));
        mutableDateTime1.setRounding(dateTimeField34);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(39246272);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39246272 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str10 = dateTimeFieldType9.getName();
        int int11 = localDateTime3.indexOf(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.property(dateTimeFieldType16);
        int int19 = localDateTime15.getMinuteOfHour();
        int int20 = localDateTime15.getMillisOfDay();
        boolean boolean21 = property2.equals((java.lang.Object) int20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = property2.set("months");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"months\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "clockhourOfDay" + "'", str10, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfMonth" + "'", str17, "dayOfMonth");
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 54 + "'", int19 == 54);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53667189 + "'", int20 == 53667189);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusMillis(2022);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        java.lang.String str15 = period12.toString();
        org.joda.time.Period period16 = period12.toPeriod();
        org.joda.time.LocalTime localTime18 = localTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) (byte) -1);
        org.joda.time.LocalTime localTime20 = localTime5.minusMillis(69);
        org.joda.time.LocalTime.Property property21 = localTime5.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = property21.addNoWrapToCopy(39239);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39302682 + "'", int6 == 39302682);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.099S" + "'", str15, "PT0.099S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = property18.set("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        timeZone2.setID("2022-02-21T14:53:38.450Z");
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale12);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        java.util.Locale locale16 = dateTimeParserBucket14.getLocale();
        java.util.Locale locale17 = dateTimeParserBucket14.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = timeZone2.getDisplayName(false, 53644753, locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53644753");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property6.roundCeilingCopy();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        java.util.Locale locale15 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology13, locale15, (java.lang.Integer) 39221019);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) property6, chronology13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = mutableDateTime1.toString("hourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = dateTimeFormatter2.parseLocalTime("2022-02-21T14:54:32.435Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean7 = property5.isLeap();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale9.getCountry();
        java.lang.String str12 = property5.getAsShortText(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder14 = builder1.setLocale(locale9);
        java.util.Locale.Builder builder15 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder1.removeUnicodeLocaleAttribute("PT-0.007S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: PT-0.007S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CA" + "'", str11, "CA");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "14" + "'", str12, "14");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("10:54:34.850");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"10:54:34.850\" is malformed at \":54:34.850\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        boolean boolean13 = localDateTime4.isSupported(durationFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withYearOfEra(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime4.withDayOfMonth((-625));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -625 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime localTime3 = localTime0.plusSeconds(58);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration7, readableInstant8);
        org.joda.time.Period period11 = period9.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate6.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((-292275054));
        org.joda.time.LocalDate localDate16 = localDate12.minusYears(21);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime3.compareTo((org.joda.time.ReadablePartial) localDate12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(39);
        org.joda.time.DateTime.Property property4 = dateTime3.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = property4.setCopy("P90YT0.198S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P90YT0.198S\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        boolean boolean11 = dateTime9.isBefore((long) (short) 100);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period22 = period17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period24 = period22.withMillis(39251693);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period33 = period31.minusSeconds((-1));
        java.lang.String str34 = period31.toString();
        org.joda.time.Period period35 = period31.toPeriod();
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.Period period37 = period27.normalizedStandard(periodType36);
        java.lang.String str38 = periodType36.getName();
        org.joda.time.PeriodType periodType39 = periodType36.withMinutesRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withMonthsRemoved();
        org.joda.time.Period period41 = period24.normalizedStandard(periodType39);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13, periodType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period43 = new org.joda.time.Period(39300, 24, 69, 39297267, 10, 81, 0, 21, periodType39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.099S" + "'", str34, "PT0.099S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Standard" + "'", str38, "Standard");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        int int21 = period19.get(durationFieldType20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period19, 54);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) ' ');
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 59, 12);
        long long19 = chronology11.add((long) '#', (long) 1970, 6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(0, 45, 6, 2022, (-292275054), (-625), (int) (short) -1, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 11855L + "'", long19 == 11855L);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(895, 53600069, 4017, 751, 44, 25, 41, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 751 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.Chronology chronology5 = dateTime1.getChronology();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.DateTime dateTime8 = dateTime1.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime10.toString(dateTimeFormatter12);
        org.joda.time.DateTime dateTime15 = dateTime10.plusMonths(86396191);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded((long) 23, 21);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis(44);
        org.joda.time.Interval interval21 = duration7.toIntervalFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = dateTime18.plusSeconds((int) ' ');
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T14:55:03.764Z" + "'", str13, "2022-02-21T14:55:03.764Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration5.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Period period19 = period17.plusMillis((int) (short) 10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) ' ');
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.Period period26 = duration21.toPeriod(chronology25);
        boolean boolean27 = period19.equals((java.lang.Object) duration21);
        int int28 = period19.getMonths();
        int int29 = period19.getSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = dateTimeFormatter2.parseMillis("PT86403.686S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod3.add((long) 1, chronology7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod3.setPeriod(readableInterval9);
        int int11 = mutablePeriod3.getWeeks();
        int int12 = mutablePeriod3.size();
        java.lang.String str13 = mutablePeriod3.toString();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = property10.setCopy(2);
        org.joda.time.LocalTime localTime15 = property10.roundFloorCopy();
        org.joda.time.LocalTime localTime17 = property10.addCopy(48L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone20.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone20);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = locale28.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 45, (int) '4');
        java.lang.String str33 = dateTimeZone20.getName(31536000000L, locale28);
        java.lang.String str34 = localTime17.toString("10:54:18.439", locale28);
        java.lang.String str35 = locale28.getDisplayScript();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "10:54:18.439" + "'", str34, "10:54:18.439");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addMinutes(45);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusMillis((int) (byte) 0);
        int int35 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.millis();
        boolean boolean37 = localDateTime28.isSupported(durationFieldType36);
        mutableDateTime1.add(durationFieldType36, 39221019);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(17, 0, 70, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) ' ');
        int int4 = localDate1.size();
        org.joda.time.LocalDate.Property property5 = localDate1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(0L, dateTimeZone7);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime13 = localDate1.toDateTimeAtStartOfDay(dateTimeZone7);
        java.lang.String str15 = dateTimeZone7.getShortName((long) 50);
        long long17 = dateTimeZone7.convertUTCToLocal((long) 39251167);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(3600L, dateTimeZone7);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone7);
        java.lang.String str21 = dateTimeZone7.getName((long) '4');
        boolean boolean23 = dateTimeZone7.isStandardOffset((long) 59);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3L + "'", long11 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 39251167L + "'", long17 == 39251167L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.property(dateTimeFieldType13);
        int int16 = localDateTime12.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withMillisOfDay(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withSecondOfMinute(39246272);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39246272 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration11, (int) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.Interval interval17 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration18 = duration7.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime0.plus((org.joda.time.ReadableDuration) duration11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, readableInstant6);
        long long8 = duration5.getStandardDays();
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        boolean boolean12 = dateTime10.isBefore((long) (short) 100);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTime(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) duration5, chronology16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(2022, (int) ' ', 6, (int) (short) 100);
        org.joda.time.Period period10 = mutablePeriod9.toPeriod();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        int int22 = period20.get(durationFieldType21);
        boolean boolean23 = period15.isSupported(durationFieldType21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime11.withFieldAdded(durationFieldType21, 52);
        int int26 = period10.indexOf(durationFieldType21);
        boolean boolean27 = periodType2.isSupported(durationFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType29 = periodType2.getFieldType((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration5.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Period period19 = period17.plusMillis((int) (short) 10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) ' ');
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.Period period26 = duration21.toPeriod(chronology25);
        boolean boolean27 = period19.equals((java.lang.Object) duration21);
        int int28 = period19.getMonths();
        org.joda.time.Weeks weeks29 = period19.toStandardWeeks();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(weeks29);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) ' ');
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 59, 12);
        long long12 = chronology4.add((long) '#', (long) 1970, 6);
        org.joda.time.DateTimeField dateTimeField13 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField14 = chronology4.minutes();
        long long17 = durationField14.getValueAsLong((long) 39272321, 129383503200000L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 11855L + "'", long12 == 11855L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 654L + "'", long17 == 654L);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.Period period5 = period3.withDays((int) (byte) 1);
        org.joda.time.Period period7 = period5.minusWeeks(100);
        org.joda.time.Period period9 = period5.minusWeeks(2023);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) ' ');
        org.joda.time.Chronology chronology13 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = chronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField18 = chronology13.hours();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((java.lang.Object) period5, chronology13);
        mutablePeriod0.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 1L, periodType3);
        org.joda.time.Period period6 = period4.minusSeconds((-1));
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        int int11 = period9.get(durationFieldType10);
        boolean boolean12 = period4.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.withFieldAdded(durationFieldType10, 52);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        boolean boolean20 = dateTime18.isEqualNow();
        int int21 = dateTime18.getDayOfYear();
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        boolean boolean25 = durationFieldType10.isSupported(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.weeks();
        long long29 = durationField26.add(26611200022L, 75596);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 45747072000022L + "'", long29 == 45747072000022L);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfSecond();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period29 = period24.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Duration duration33 = period28.toDurationTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant32.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getRangeDurationType();
        org.joda.time.DateTime.Property property39 = dateTime36.property(dateTimeFieldType37);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.set(dateTimeFieldType37, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate.Property property7 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(3);
        java.lang.String str10 = property7.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfWeek]" + "'", str10, "Property[dayOfWeek]");
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        int int7 = localDateTime4.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localDateTime4.getValue(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 55 + "'", int7 == 55);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale12);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = chronology4.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        long long20 = dateTimeField17.getDifferenceAsLong((long) (byte) 1, 10L);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        boolean boolean30 = property28.isLeap();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale32.getCountry();
        java.lang.String str35 = property28.getAsShortText(locale32);
        java.util.Set<java.lang.String> strSet36 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder37 = builder24.setLocale(locale32);
        java.util.Locale locale38 = builder37.build();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = dateTimeField17.set((-60494601599990L), "days", locale38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"days\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CA" + "'", str34, "CA");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "14" + "'", str35, "14");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = dateTime3.minusYears(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(53);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(47);
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        int int5 = property3.get();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.LocalDateTime localDateTime8 = property3.withMinimumValue();
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period23 = period18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration27 = period22.toDurationTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.parse("100", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYear((int) (short) -1);
        int int20 = localDateTime17.getCenturyOfEra();
        int int21 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withDayOfYear(5);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.minusMillis(38);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus(1L);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period41 = period36.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Duration duration45 = period40.toDurationTo((org.joda.time.ReadableInstant) instant44);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration45, 39);
        int int48 = duration27.compareTo((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration27, 52);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime17.withMillisOfDay(642);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) localDateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        boolean boolean9 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8);
        org.joda.time.DurationField[] durationFieldArray10 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray11 = strSet3.toArray(durationFieldArray10);
        int int12 = strSet3.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationFieldArray10);
        org.junit.Assert.assertNotNull(durationFieldArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.year();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears(1);
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        java.util.Locale locale12 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology10, locale12, (java.lang.Integer) 39221019);
        java.lang.String str15 = locale12.getDisplayScript();
        java.lang.String str16 = locale12.getCountry();
        java.lang.String str17 = locale12.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localDate3.toString("PT34.901S", locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GB" + "'", str16, "GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        int int8 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration10);
        long long12 = duration10.getStandardHours();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        mutablePeriod17.addYears(59);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        java.util.Locale locale27 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology25, locale27, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 53, chronology25);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        java.lang.String str40 = period37.toString();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.PeriodType periodType42 = period37.getPeriodType();
        org.joda.time.Period period43 = period33.normalizedStandard(periodType42);
        boolean boolean44 = localDate30.equals((java.lang.Object) period33);
        org.joda.time.Interval interval45 = localDate30.toInterval();
        mutablePeriod17.add((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str49 = duration48.toString();
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration48);
        int int51 = duration10.compareTo((org.joda.time.ReadableDuration) duration48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.099S" + "'", str40, "PT0.099S");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT86400S" + "'", str49, "PT86400S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(17, 34);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withWeeksRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths(55);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(6, 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.Period period26 = period24.multipliedBy((int) (short) 100);
        org.joda.time.Period period28 = period26.plusMonths(893);
        org.joda.time.Period period30 = period28.minusSeconds(52);
        org.joda.time.LocalTime localTime31 = localTime11.plus((org.joda.time.ReadablePeriod) period28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = localDate6.isEqual((org.joda.time.ReadablePartial) localTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        int int13 = dateTimeField8.getLeapAmount((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) int13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 100);
        int int2 = dateTime1.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = dateTime1.withDayOfYear(53639537);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53639537 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate.Property property7 = localDate0.dayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate0.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property8.setCopy(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addMillis(9722);
        mutableDateTime1.setSecondOfMinute((int) '#');
        int int24 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime1.minusWeeks((int) (byte) 0);
        int int15 = dateTime14.getDayOfYear();
        int int16 = dateTime14.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime14.withSecondOfMinute(751);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 751 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str13 = dateTimeFieldType12.getName();
        int int14 = localDateTime6.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str20 = dateTimeFieldType19.getName();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.property(dateTimeFieldType19);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime5.get(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "clockhourOfDay" + "'", str13, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfMonth" + "'", str20, "dayOfMonth");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21, 39);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime8.setZone(dateTimeZone25);
        int int27 = mutableDateTime8.getYearOfEra();
        int int28 = mutableDateTime8.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime8.year();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        mutableDateTime8.setChronology(chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 1L, periodType43);
        org.joda.time.Period period45 = period40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Duration duration49 = period44.toDurationTo((org.joda.time.ReadableInstant) instant48);
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration49, 39);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime36.yearOfEra();
        mutableDateTime36.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime36.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        long long59 = dateTimeZone56.convertLocalToUTC((long) (byte) 100, false);
        mutableDateTime36.setZone(dateTimeZone56);
        mutableDateTime8.setZoneRetainFields(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(53600069, (int) (byte) 100, 70, 32, 2, 11, (-292275054), dateTimeZone56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology11, locale13, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        int int21 = property19.get();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        long long24 = chronology11.set((org.joda.time.ReadablePartial) localDateTime22, (long) 2022);
        org.joda.time.DateTimeField dateTimeField25 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology11.minuteOfHour();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.negated();
        int[] intArray36 = chronology11.get((org.joda.time.ReadablePeriod) period34, (long) 1969);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = property44.getAsShortText(locale45);
        java.util.Locale.setDefault(category39, locale45);
        int int48 = property38.getMaximumTextLength(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 9, chronology11, locale45, (java.lang.Integer) 15, 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withLocale(locale45);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = dateTimeFormatter52.parseMillis("1970");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455600000L + "'", long24 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "14" + "'", str46, "14");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) ' ');
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 59, 12);
        long long13 = chronology5.add((long) '#', (long) 1970, 6);
        org.joda.time.DateTimeField dateTimeField14 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology5.minutes();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale16.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 41, chronology5, locale16);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology5.getDateTimeMillis(44, 100, 206, 39282046);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11855L + "'", long13 == 11855L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English" + "'", str17, "English");
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime1.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        mutableDateTime4.add((long) 40);
        boolean boolean7 = mutableDateTime4.isAfterNow();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setLanguage("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Property[hourOfDay] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 100, false);
        mutableDateTime1.setZone(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration26 = new org.joda.time.Duration((java.lang.Object) mutableDateTime1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        java.util.Locale locale37 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology35, locale37, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology41, locale43);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        org.joda.time.Chronology chronology47 = chronology35.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime30.withChronology(chronology47);
        boolean boolean51 = dateTime49.isBefore((long) 49);
        org.joda.time.DateTime.Property property52 = dateTime49.dayOfWeek();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime1.toString(dateTimeFormatter22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek((-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-02-01T23:59:56.244Z" + "'", str23, "1969-02-01T23:59:56.244Z");
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology2 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(56);
        org.joda.time.Period period7 = org.joda.time.Period.millis(100);
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant9, readableInstant10, periodType11);
        mutablePeriod12.setYears((int) '#');
        org.joda.time.Chronology chronology16 = null;
        mutablePeriod12.add((long) 1, chronology16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        mutablePeriod12.setPeriod(readableInterval18);
        mutablePeriod12.setMillis((int) '4');
        org.joda.time.Period period22 = period8.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Period period23 = mutablePeriod12.toPeriod();
        org.joda.time.LocalDate localDate25 = localDate5.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 1970);
        org.joda.time.DateMidnight dateMidnight26 = localDate25.toDateMidnight();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.Period period6 = period4.withDays((int) (byte) 1);
        org.joda.time.Period period8 = period6.minusWeeks(100);
        org.joda.time.Period period10 = period8.withDays(1);
        org.joda.time.LocalDate localDate12 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, 642);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        mutablePeriod17.addYears(59);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        java.util.Locale locale27 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology25, locale27, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 53, chronology25);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        java.lang.String str40 = period37.toString();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.PeriodType periodType42 = period37.getPeriodType();
        org.joda.time.Period period43 = period33.normalizedStandard(periodType42);
        boolean boolean44 = localDate30.equals((java.lang.Object) period33);
        org.joda.time.Interval interval45 = localDate30.toInterval();
        mutablePeriod17.add((org.joda.time.ReadableInterval) interval45);
        org.joda.time.LocalDate localDate47 = localDate0.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra(893);
        org.joda.time.DateTime dateTime50 = localDate49.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localDate49.get(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.099S" + "'", str40, "PT0.099S");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(1969, 53684566, (-1), 39267259);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology24.getDateTimeMillis((-35380799346L), 35, (int) (short) 0, 36, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = locale20.stripExtensions();
        int int22 = property18.getMaximumTextLength(locale21);
        java.lang.String str23 = locale21.getDisplayLanguage();
        java.lang.String str24 = locale21.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((java.lang.Object) locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "German" + "'", str23, "German");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "de" + "'", str24, "de");
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime1.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, (int) (short) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime5, periodType12);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMillisOfSecond(39250977);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39250977 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean24 = mutableDateTime7.isSupported(dateTimeFieldType23);
        int int25 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.eras();
        java.util.Locale locale32 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology30, locale32, (java.lang.Integer) 39221019);
        mutableDateTime7.setChronology(chronology30);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period46 = period41.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Duration duration50 = period45.toDurationTo((org.joda.time.ReadableInstant) instant49);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration50, 39);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime37.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime37.setZone(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, dateTimeZone54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(12022, 39251693, 2023, 53684566, (int) (byte) 1, 39239, dateTimeZone54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53684566 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField6 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField8 = chronology3.hours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        boolean boolean14 = dateTime12.isEqualNow();
        int int15 = dateTime12.getDayOfYear();
        org.joda.time.Chronology chronology16 = dateTime12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology16);
        org.joda.time.DurationField durationField18 = chronology16.hours();
        int int19 = durationField8.compareTo(durationField18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period33 = period28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Duration duration37 = period32.toDurationTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime24.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusYears(6);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant41, readableInstant42, periodType43);
        mutablePeriod44.setYears((int) '#');
        org.joda.time.Chronology chronology48 = null;
        mutablePeriod44.add((long) 1, chronology48);
        mutablePeriod44.addDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime38.minus((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int53 = mutablePeriod44.getDays();
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        mutablePeriod44.setPeriod(0L, (long) 39221019, chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) durationField8, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setExtension('4', "Canada");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        java.lang.String str34 = property33.getAsString();
        org.joda.time.LocalTime localTime35 = property33.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime37 = localTime35.plusSeconds(1969);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = localTime35.toString("UTC", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: U");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "11" + "'", str34, "11");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMonths(86396191);
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) 23, 21);
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        boolean boolean16 = dateTime14.isEqualNow();
        int int17 = dateTime14.getDayOfYear();
        org.joda.time.Chronology chronology18 = dateTime14.getChronology();
        long long19 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime20 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear(9);
        org.joda.time.DateTime dateTime27 = dateTime9.withFields((org.joda.time.ReadablePartial) localDateTime24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime9.withMinuteOfHour(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:55:09.309Z" + "'", str4, "2022-02-21T14:55:09.309Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology11, locale13, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        int int21 = property19.get();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        long long24 = chronology11.set((org.joda.time.ReadablePartial) localDateTime22, (long) 2022);
        org.joda.time.DateTimeField dateTimeField25 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology11.minuteOfHour();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.negated();
        int[] intArray36 = chronology11.get((org.joda.time.ReadablePeriod) period34, (long) 1969);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = property44.getAsShortText(locale45);
        java.util.Locale.setDefault(category39, locale45);
        int int48 = property38.getMaximumTextLength(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 9, chronology11, locale45, (java.lang.Integer) 15, 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withLocale(locale45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTimeFormatter2.parseDateTime("1969-12-31T23:59:56.191Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455600000L + "'", long24 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "14" + "'", str46, "14");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        boolean boolean4 = dateTime2.isEqualNow();
        int int5 = dateTime2.getDayOfYear();
        org.joda.time.Chronology chronology6 = dateTime2.getChronology();
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology6, locale7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        long long12 = dateTimeField9.add((-768609154310390278L), (int) (byte) -1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-768609154915190278L) + "'", long12 == (-768609154915190278L));
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean5 = property3.isLeap();
        boolean boolean6 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property3.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = property3.setCopy("minuteOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minuteOfDay\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        boolean boolean8 = property6.isLeap();
        org.joda.time.LocalDate localDate9 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property6.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = localDate10.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(751, 14, 44, (int) '4', 39267259);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(46);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = instant16.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant16.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        boolean boolean25 = dateTime20.isEqual((long) 53);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration27, (-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTime.Property property32 = dateTime20.property(dateTimeFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localTime3.get(dateTimeFieldType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, chronology3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant5, periodType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = instant5.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withField(dateTimeFieldType8, 39);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusHours(47);
        int int17 = localDateTime13.getEra();
        int int18 = localDateTime13.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withEra(39305775);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39305775 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 895 + "'", int9 == 895);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        int int37 = dateTimeField34.getMaximumValue((long) (-292275054));
        mutableDateTime1.setRounding(dateTimeField34);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = dateTimeField34.set((long) 81, "Koordinierte Universalzeit");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Koordinierte Universalzeit\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(15, 40, 53730692, 97, 69, (int) (short) 100, 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology11, locale13, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        int int21 = property19.get();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        long long24 = chronology11.set((org.joda.time.ReadablePartial) localDateTime22, (long) 2022);
        org.joda.time.DateTimeField dateTimeField25 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology11.minuteOfHour();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.negated();
        int[] intArray36 = chronology11.get((org.joda.time.ReadablePeriod) period34, (long) 1969);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = property44.getAsShortText(locale45);
        java.util.Locale.setDefault(category39, locale45);
        int int48 = property38.getMaximumTextLength(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 9, chronology11, locale45, (java.lang.Integer) 15, 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withLocale(locale45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = dateTimeFormatter2.print((long) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455600000L + "'", long24 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "14" + "'", str46, "14");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 1, chronology20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) instant22, periodType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int26 = instant22.get(dateTimeFieldType25);
        java.lang.String str27 = dateTimeFieldType25.getName();
        java.lang.String str28 = dateTimeFieldType25.toString();
        int int29 = localDateTime4.get(dateTimeFieldType25);
        int int30 = localDateTime4.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 895 + "'", int26 == 895);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfDay" + "'", str27, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 655 + "'", int29 == 655);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(12);
        int int5 = localDate4.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = localDate4.getField(367);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 367");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((-60494601599990L));
        org.joda.time.MutablePeriod mutablePeriod2 = mutablePeriod1.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod1.add(durationFieldType3, 1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) mutablePeriod1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.property(dateTimeFieldType13);
        int int16 = localDateTime12.getMinuteOfHour();
        org.joda.time.DateTime dateTime17 = localDateTime12.toDateTime();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localDateTime22.getFields();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period31 = period29.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.plus((org.joda.time.ReadablePeriod) period31);
        int int33 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        int int34 = localDateTime22.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone37.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone37);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = locale45.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology44, locale45, (java.lang.Integer) 45, (int) '4');
        java.lang.String str50 = dateTimeZone37.getName(31536000000L, locale45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = localDateTime22.toString("Deutsch", locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 39311119 + "'", int34 == 39311119);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = dateTimeFormatter2.print(35L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate0.withEra(8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.weekOfWeekyear();
        int int5 = localDate0.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDate0.get(dateTimeFieldType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T14:54:05.731Z");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        int int8 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) ' ');
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate19 = localDate13.withFieldAdded(durationFieldType17, (int) (byte) 100);
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths(55);
        boolean boolean22 = dateTime6.equals((java.lang.Object) localDate19);
        org.joda.time.DateTime dateTime23 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = locale27.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 45, (int) '4');
        java.util.Set<java.lang.Character> charSet32 = locale27.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTime6.toString("millis", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(charSet32);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusDays(1439);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.plus(1L);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period24 = period19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration28 = period23.toDurationTo((org.joda.time.ReadableInstant) instant27);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration28, 39);
        int int31 = duration10.compareTo((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Instant instant33 = instant7.withDurationAdded((org.joda.time.ReadableDuration) duration28, 0);
        org.joda.time.Instant instant34 = instant7.toInstant();
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfCentury(47);
        org.joda.time.DateTime dateTime38 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds(40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localTime3.toString(dateTimeFormatter8);
        org.joda.time.LocalTime.Property property10 = localTime3.millisOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) ' ');
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 59, 12);
        long long25 = chronology17.add((long) '#', (long) 1970, 6);
        org.joda.time.DateTimeField dateTimeField26 = chronology17.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology17.minutes();
        org.joda.time.DurationField durationField28 = chronology17.millis();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(597770290756L, chronology17, locale29, (java.lang.Integer) 29, 16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime34 = property10.setCopy("2022-02-21T14:54:18.123Z", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:54:18.123Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10:55:11.597" + "'", str9, "10:55:11.597");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 11855L + "'", long25 == 11855L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.DateTime dateTime10 = dateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.TimeOfDay timeOfDay11 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.minusDays(47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT10H100M97.021S" + "'", str9, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean8 = property5.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        int int12 = dateTime10.getYearOfEra();
        int int13 = property5.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime10);
        mutablePeriod14.setPeriod((long) 39221019, (long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int19 = mutablePeriod14.getValue((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter2.print((long) 24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusWeeks(40);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration13, (int) (short) 100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.Interval interval19 = duration13.toIntervalTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = duration9.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 1, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        int int29 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType31 = periodType30.withDaysRemoved();
        org.joda.time.Period period32 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime27, periodType30);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTime.Property property34 = dateTime3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        long long37 = dateTimeField35.roundCeiling(0L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 345600000L + "'", long37 == 345600000L);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        boolean boolean11 = dateTime9.isBefore((long) (short) 100);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period22 = period17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period24 = period22.withMillis(39251693);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period33 = period31.minusSeconds((-1));
        java.lang.String str34 = period31.toString();
        org.joda.time.Period period35 = period31.toPeriod();
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.Period period37 = period27.normalizedStandard(periodType36);
        java.lang.String str38 = periodType36.getName();
        org.joda.time.PeriodType periodType39 = periodType36.withMinutesRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withMonthsRemoved();
        org.joda.time.Period period41 = period24.normalizedStandard(periodType39);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13, periodType39);
        org.joda.time.LocalDate localDate43 = localDate7.plus((org.joda.time.ReadablePeriod) period42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight44 = localDate7.toDateMidnight();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.099S" + "'", str34, "PT0.099S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Standard" + "'", str38, "Standard");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(2L);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.Period period16 = org.joda.time.Period.millis(100);
        int int17 = period16.getSeconds();
        int[] intArray20 = chronology14.get((org.joda.time.ReadablePeriod) period16, (long) (-292275054), (long) 52);
        // The following exception was thrown during execution in test generation
        try {
            chronology3.validate((org.joda.time.ReadablePartial) localDateTime12, intArray20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 3, 9, 11, 15, 106]");
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration9 = duration1.plus((org.joda.time.ReadableDuration) duration7);
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        boolean boolean18 = property15.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getSecondOfMinute();
        int int22 = dateTime20.getYearOfEra();
        int int23 = property15.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period25 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime26 = dateTime11.toDateTime();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration5.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(10L);
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        long long21 = duration19.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = property1.setCopy(39246272);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39246272 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone1.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        int int8 = localTime5.getMinuteOfHour();
        int int9 = localTime5.size();
        org.joda.time.Chronology chronology10 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale3, (java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        dateTimeParserBucket6.saveField(dateTimeFieldType7, 46);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        java.util.Locale locale16 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology14, locale16, (java.lang.Integer) 39221019);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField20 = dateTimeField19.getLeapDurationField();
        dateTimeParserBucket6.saveField(dateTimeField19, 457070);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = dateTimeParserBucket6.computeMillis();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457070 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property32 = localTime5.property(dateTimeFieldType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"English (Canada)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 1);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Days days3 = duration1.toStandardDays();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, (int) (short) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getYearOfCentury();
        org.joda.time.Interval interval13 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20);
        long long22 = duration19.getStandardDays();
        org.joda.time.Duration duration23 = duration19.toDuration();
        org.joda.time.Duration duration24 = duration7.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration25 = duration1.minus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) ' ');
        org.joda.time.Chronology chronology30 = localDate27.getChronology();
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 59, 12);
        long long38 = chronology30.add((long) '#', (long) 1970, 6);
        org.joda.time.DateTimeField dateTimeField39 = chronology30.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) duration25, chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3600L + "'", long2 == 3600L);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 11855L + "'", long38 == 11855L);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours((-1));
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime7 = property6.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = property6.setCopy("39272321");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39272321 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(47, (int) (byte) 0, 39297002, 59, 40, 893, 33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        org.joda.time.Period period1 = org.joda.time.Period.months(39292614);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = instant3.get(dateTimeFieldType6);
        java.lang.String str8 = dateTimeFieldType6.getName();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology14);
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType6.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        int int34 = property32.get();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfFloorCopy();
        long long37 = chronology24.set((org.joda.time.ReadablePartial) localDateTime35, (long) 2022);
        org.joda.time.DateTimeField dateTimeField38 = chronology24.weekOfWeekyear();
        int int39 = dateTimeField38.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField47 = localDateTime45.getField((int) (byte) 0);
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = dateTimeField47.getAsShortText((long) (byte) 1, locale49);
        java.lang.String str51 = dateTimeField38.getAsText((int) (byte) -1, locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = localDateTime18.toString("FRA", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 895 + "'", int7 == 895);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "minuteOfDay" + "'", str8, "minuteOfDay");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645455600000L + "'", long37 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53 + "'", int39 == 53);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970" + "'", str50, "1970");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1" + "'", str51, "-1");
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(655);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 655 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        java.lang.String str5 = localDate0.toString();
        org.joda.time.LocalDate localDate7 = localDate0.withYearOfEra(54);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21" + "'", str5, "2022-02-21");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        int int5 = dateTimeZone2.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj0, dateTimeZone2);
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        int int8 = timeZone7.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("53671521", (double) 81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=81.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        int int37 = dateTimeField34.getMaximumValue((long) (-292275054));
        mutableDateTime1.setRounding(dateTimeField34);
        int int39 = mutableDateTime1.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone40);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        boolean boolean6 = dateTime4.isEqualNow();
        int int7 = dateTime4.getDayOfYear();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology8.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) 24, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1969-02-02T10:59:56.191Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1969-02-02t10:59:56.191z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str6 = timeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(dateTimeZone7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime11 = localTime8.withFieldAdded(durationFieldType9, 819);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 100, false);
        mutableDateTime1.setZone(dateTimeZone21);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) ' ');
        org.joda.time.Chronology chronology29 = localDate26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology29.days();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1, chronology29);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime32.setDateTime(53671205, 12022, 31, 15, 70, 43, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.LocalTime localTime5 = dateTime1.toLocalTime();
        org.joda.time.DateTime dateTime7 = dateTime1.withMillisOfSecond((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime7.withDate(0, 55, 53674052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 14 + "'", int2 == 14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        int int21 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) property22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getName((long) 52);
        int int23 = dateTimeZone18.getOffset((long) 1969);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean3 = timeZone0.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) (short) 100);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((-1L));
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.Period period14 = period9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period14.withMillis(39251693);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration17, readableInstant18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Period period29 = period19.normalizedStandard(periodType28);
        java.lang.String str30 = periodType28.getName();
        org.joda.time.PeriodType periodType31 = periodType28.withMinutesRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withMonthsRemoved();
        org.joda.time.Period period33 = period16.normalizedStandard(periodType31);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration5, periodType31);
        org.joda.time.Hours hours35 = period34.toStandardHours();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.099S" + "'", str26, "PT0.099S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Standard" + "'", str30, "Standard");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(hours35);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.io.IOException iOException2 = new java.io.IOException();
        iOException1.addSuppressed((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException();
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.lang.String str7 = iOException4.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.io.IOException" + "'", str7, "java.io.IOException");
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        java.lang.String str20 = dateTimeZone18.toString();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField28 = localDateTime26.getField((int) (byte) 0);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = dateTimeField28.getAsShortText((long) (byte) 1, locale30);
        java.lang.String str32 = locale30.getVariant();
        java.lang.String str33 = locale30.toLanguageTag();
        java.lang.String str34 = dateTimeZone18.getShortName((long) 47, locale30);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology36, locale38);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.util.Locale locale42 = dateTimeParserBucket40.getLocale();
        java.util.Locale locale43 = dateTimeParserBucket40.getLocale();
        java.lang.String str44 = locale30.getDisplayVariant(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = locale30.getUnicodeLocaleType("deu");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: deu");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en-CA" + "'", str33, "en-CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) 51, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(4, 39, (int) 'x', 51, 30, chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        java.util.Set<java.lang.Character> charSet7 = locale2.getExtensionKeys();
        java.util.Locale locale8 = locale2.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale10.getCountry();
        java.lang.String str13 = locale2.getDisplayLanguage(locale10);
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CA" + "'", str12, "CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "German" + "'", str13, "German");
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        int int5 = property3.get();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.LocalDateTime localDateTime8 = property3.withMinimumValue();
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period23 = period18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration27 = period22.toDurationTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = localDateTime30.toString("2022-02-21T10:53:40.615");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(4);
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable10, (long) 55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable8, (long) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekOfWeekyear();
        long long20 = dateTimeField18.roundFloor((long) 2023);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-259200000L) + "'", long20 == (-259200000L));
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(30, 53730692, 0, 46, 457070, (int) (short) 100, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        boolean boolean12 = localDateTime0.equals((java.lang.Object) 2);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        java.util.Locale locale7 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology5, locale7, (java.lang.Integer) 39221019);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 53, chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology5.getDateTimeMillis(292278993, 39297002, 1439, 10, 58, 0, 58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39297002 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        mutableDateTime1.setMillis(259200003L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        mutablePeriod3.setSeconds((int) 'a');
        java.lang.Object obj8 = mutablePeriod3.clone();
        int int9 = mutablePeriod3.getDays();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "P35YT97S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "P35YT97S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "P35YT97S");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("913", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 100);
        int int2 = dateTime1.getHourOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withWeekyear(54);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        timeZone5.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str11 = timeZone5.getID();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        boolean boolean13 = dateTimeZone12.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) 54, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField19 = chronology4.era();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField19.add((long) 39236, (long) 25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology4.minuteOfHour();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.negated();
        int[] intArray29 = chronology4.get((org.joda.time.ReadablePeriod) period27, (long) 1969);
        org.joda.time.DateTimeField dateTimeField30 = chronology4.halfdayOfDay();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = dateTimeField30.getAsShortText(365, locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 365");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.099S" + "'", str26, "PT0.099S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        int int21 = period19.get(durationFieldType20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period19, 54);
        int int24 = period19.getMillis();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        boolean boolean7 = localTime3.isSupported(durationFieldType6);
        org.joda.time.LocalTime localTime9 = localTime3.withMillisOfDay(4);
        java.lang.String str10 = localTime3.toString();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField19.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField19.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property22 = localTime3.property(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10:55:17.224" + "'", str10, "10:55:17.224");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.joda.time.Period period0 = new org.joda.time.Period();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType2 = period0.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.DateTime dateTime10 = dateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration25, 39);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime12.setZone(dateTimeZone29);
        int int31 = mutableDateTime12.getYearOfEra();
        int int32 = mutableDateTime12.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime12.year();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) ' ');
        org.joda.time.Chronology chronology37 = localDate34.getChronology();
        mutableDateTime12.setChronology(chronology37);
        boolean boolean39 = dateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        int int40 = dateTime1.getWeekyear();
        org.joda.time.Chronology chronology41 = dateTime1.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weeks();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 17 + "'", int2 == 17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT10H100M97.021S" + "'", str9, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1969 + "'", int31 == 1969);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 1, chronology34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) instant36, periodType37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int40 = instant36.get(dateTimeFieldType39);
        java.lang.String str41 = dateTimeFieldType39.getName();
        java.lang.String str42 = dateTimeFieldType39.toString();
        org.joda.time.LocalTime.Property property43 = localTime32.property(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime45 = property43.addNoWrapToCopy(9722);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 895 + "'", int40 == 895);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "minuteOfDay" + "'", str41, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "minuteOfDay" + "'", str42, "minuteOfDay");
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getCountry();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long5 = dateTimeZone2.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(39);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.weekOfWeekyear();
        boolean boolean11 = locale0.equals((java.lang.Object) localDateTime6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.plus((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant11.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.LocalTime localTime19 = dateTime15.toLocalTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter22.getParser();
        java.lang.Integer int24 = dateTimeFormatter22.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter22.getPrinter();
        boolean boolean26 = dateTimeFormatter22.isPrinter();
        java.util.Locale locale27 = dateTimeFormatter22.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = dateTime15.toString(dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(dateTimeParser23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(dateTimePrinter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(locale27);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        int int9 = period3.getHours();
        org.joda.time.Period period10 = period3.toPeriod();
        org.joda.time.Period period12 = period3.minusMonths((-1));
        org.joda.time.Period period14 = period12.plusYears(39243612);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.centuries();
        int int26 = period24.get(durationFieldType25);
        boolean boolean27 = period19.isSupported(durationFieldType25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.withFieldAdded(durationFieldType25, 52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period31 = period12.withFieldAdded(durationFieldType25, 895);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'centuries'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean6 = property3.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getSecondOfMinute();
        int int10 = dateTime8.getYearOfEra();
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalDateTime localDateTime12 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) 11);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 17 + "'", int9 == 17);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(315532800097L, chronology7, locale8);
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period15 = period14.normalizedStandard();
        int[] intArray17 = chronology7.get((org.joda.time.ReadablePeriod) period15, (long) (short) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.halfdayOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter22.getParser();
        java.lang.Integer int24 = dateTimeFormatter22.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter22.getPrinter();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        java.util.Locale locale33 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology31, locale33, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        int int41 = property39.get();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        long long44 = chronology31.set((org.joda.time.ReadablePartial) localDateTime42, (long) 2022);
        org.joda.time.DateTimeField dateTimeField45 = chronology31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology31.minuteOfHour();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, 1L, periodType49);
        org.joda.time.Period period52 = period50.minusSeconds((-1));
        java.lang.String str53 = period50.toString();
        org.joda.time.Period period54 = period50.negated();
        int[] intArray56 = chronology31.get((org.joda.time.ReadablePeriod) period54, (long) 1969);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.monthOfYear();
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.getDefault(category59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        java.util.Locale locale65 = java.util.Locale.US;
        java.lang.String str66 = property64.getAsShortText(locale65);
        java.util.Locale.setDefault(category59, locale65);
        int int68 = property58.getMaximumTextLength(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 9, chronology31, locale65, (java.lang.Integer) 15, 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter22.withLocale(locale65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = dateTimeField18.getAsText(39239, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39239");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 17 + "'", int4 == 17);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(dateTimeParser23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(dateTimePrinter25);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645455600000L + "'", long44 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.099S" + "'", str53, "PT0.099S");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category59.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "14" + "'", str66, "14");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 17 + "'", int4 == 17);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) '4');
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.weekyear();
        boolean boolean17 = property16.isLeap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 86396191);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMillisOfSecond((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter2.print((long) 55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        int int23 = localDateTime15.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str29 = dateTimeFieldType28.getName();
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.property(dateTimeFieldType28);
        int int31 = localDateTime27.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withMillisOfDay(1);
        int int34 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, readableInstant43);
        org.joda.time.Duration duration45 = duration42.toDuration();
        int int46 = duration36.compareTo((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime4.plus((org.joda.time.ReadableDuration) duration36);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = localDateTime4.getValue(39297002);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 39297002");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "clockhourOfDay" + "'", str22, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfMonth" + "'", str29, "dayOfMonth");
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 54 + "'", int31 == 54);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        timeZone7.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str13 = timeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone14);
        java.lang.StringBuffer stringBuffer17 = null;
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMillis((int) (byte) 0);
        int int29 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime22.minusMonths(44);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(stringBuffer17, (org.joda.time.ReadablePartial) localDateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        java.util.Locale locale0 = java.util.Locale.UK;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Etc/UTC");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        int int5 = property3.get();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.LocalDateTime localDateTime8 = property3.withMinimumValue();
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period23 = period18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration27 = period22.toDurationTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime28);
        int int31 = localDateTime8.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 18 + "'", int9 == 18);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3318481 + "'", int31 == 3318481);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer8, (long) 47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        int int7 = localDate6.getDayOfMonth();
        org.joda.time.LocalDate localDate9 = localDate6.plusYears(1);
        org.joda.time.LocalDate localDate11 = localDate9.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate9);
        int int13 = property2.getDifference((org.joda.time.ReadableInstant) dateTime4);
        int int14 = dateTime4.getSecondOfDay();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 18 + "'", int5 == 18);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-625) + "'", int13 == (-625));
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53718 + "'", int14 == 53718);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Days days3 = period2.toStandardDays();
        int[] intArray4 = period2.getValues();
        org.joda.time.Period period6 = period2.minusWeeks(23);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period19 = period14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Duration duration23 = period18.toDurationTo((org.joda.time.ReadableInstant) instant22);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration23, 39);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime10.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 1, chronology30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) instant32, periodType33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) ' ');
        org.joda.time.Chronology chronology38 = localDate35.getChronology();
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 1, periodType33, chronology38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) ' ');
        org.joda.time.Chronology chronology43 = localDate40.getChronology();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate46 = localDate40.withFieldAdded(durationFieldType44, (int) (byte) 100);
        boolean boolean47 = periodType33.isSupported(durationFieldType44);
        org.joda.time.PeriodType periodType48 = periodType33.withDaysRemoved();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.dayOfMonth();
        org.joda.time.Chronology chronology51 = localDate49.getChronology();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 43, periodType33, chronology51);
        mutableDateTime10.setChronology(chronology51);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 819, (long) 57, chronology51);
        org.joda.time.Period period55 = period2.plus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Period period57 = period2.minusHours(894);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 24, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property6.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = localDate9.getField(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str23 = dateTimeZone21.getNameKey((long) (byte) 0);
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        mutableDateTime20.addMonths(2);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDayOfMonth((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.setWeekyear(0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.era();
        java.util.Date date22 = mutableDateTime1.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromDateFields(date22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -809 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Jan 07 23:59:56 UTC 1");
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period22 = period17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Duration duration26 = period21.toDurationTo((org.joda.time.ReadableInstant) instant25);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration26, 39);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.secondOfMinute();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime13.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.addWrapField(6);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str35 = dateTimeZone33.getNameKey((long) (byte) 0);
        mutableDateTime32.setZoneRetainFields(dateTimeZone33);
        java.lang.String str38 = dateTimeZone33.getNameKey((long) 3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) chronology7, dateTimeZone33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMillis((int) (byte) 0);
        int int20 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withMillisOfSecond(12);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer8, (org.joda.time.ReadablePartial) localDateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        int int37 = dateTimeField34.getMaximumValue((long) (-292275054));
        mutableDateTime1.setRounding(dateTimeField34);
        int int39 = mutableDateTime1.getDayOfWeek();
        mutableDateTime1.addWeekyears(21);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 116 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        mutableDateTime7.setDayOfYear((int) ' ');
        mutableDateTime7.addHours(11);
        java.lang.String str28 = mutableDateTime7.toString();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period30 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime7, periodType29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        mutablePeriod34.setYears((int) '#');
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod34.add((long) 1, chronology38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        mutablePeriod34.setPeriod(readableInterval40);
        int int42 = mutablePeriod34.getWeeks();
        int int43 = mutablePeriod34.size();
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod34);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod34.addWeeks(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-02-02T10:59:56.191Z" + "'", str28, "1969-02-02T10:59:56.191Z");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("GB");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"GB\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        boolean boolean19 = mutableDateTime1.isBeforeNow();
        int int20 = mutableDateTime1.getSecondOfDay();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        mutableDateTime1.setRounding(dateTimeField25);
        mutableDateTime1.addHours(276);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 86396 + "'", int20 == 86396);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period32 = period27.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Duration duration36 = period31.toDurationTo((org.joda.time.ReadableInstant) instant35);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration36, 39);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime23.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime23.setZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(55123200000L, dateTimeZone40);
        mutableDateTime20.setZone(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration44 = new org.joda.time.Duration((java.lang.Object) dateTimeZone40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setLanguageTag("2022-02-21T14:53:55.782Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.joda.time.Period period1 = org.joda.time.Period.hours(44);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(2022, (int) ' ', 6, (int) (short) 100);
        org.joda.time.Period period7 = period1.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Period period9 = period7.withMillis(654);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = period7.getValue(894);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 894");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime dateTime22 = dateTime1.plusDays(22);
        int int23 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime25 = dateTime1.plusYears(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime1.withDate((int) (short) 10, 12022, 39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        int int21 = localDateTime13.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusSeconds(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 1, chronology25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) instant27, periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime0, (org.joda.time.ReadablePartial) localDateTime23, periodType28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        java.lang.String str40 = period37.toString();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.PeriodType periodType42 = period37.getPeriodType();
        org.joda.time.Period period43 = period33.normalizedStandard(periodType42);
        org.joda.time.Period period45 = period43.withSeconds(10);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.millis();
        boolean boolean47 = period43.isSupported(durationFieldType46);
        java.lang.String str48 = durationFieldType46.toString();
        java.lang.String str49 = durationFieldType46.toString();
        int int50 = period30.get(durationFieldType46);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfDay" + "'", str20, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.099S" + "'", str40, "PT0.099S");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "millis" + "'", str48, "millis");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "millis" + "'", str49, "millis");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(46);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis((int) 'x');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) instant7, periodType8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) ' ');
        org.joda.time.Chronology chronology13 = localDate10.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 1, periodType8, chronology13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) ' ');
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 39251167, (long) 21, periodType8, chronology18);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(periodType8);
        org.joda.time.Period period21 = new org.joda.time.Period(315532800097L, periodType8);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths(43);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean9 = localDate7.isSupported(durationFieldType8);
        org.joda.time.LocalDate localDate11 = localDate7.plusMonths(52);
        org.joda.time.LocalDate.Property property12 = localDate11.year();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        long long15 = dateTimeZone13.nextTransition(10L);
        org.joda.time.Interval interval16 = localDate11.toInterval(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(23, 120, 41, (int) 'a', 609, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration12 = period7.toDurationTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period21 = period16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration25 = period20.toDurationTo((org.joda.time.ReadableInstant) instant24);
        boolean boolean26 = instant11.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35);
        org.joda.time.Duration duration37 = duration34.toDuration();
        int int38 = duration28.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant39 = instant11.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period50 = period45.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Duration duration54 = period49.toDurationTo((org.joda.time.ReadableInstant) instant53);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration54, 39);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime41.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime41.setZone(dateTimeZone58);
        int int60 = mutableDateTime41.getYearOfEra();
        int int61 = mutableDateTime41.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime41.year();
        mutableDateTime41.setSecondOfDay(50);
        org.joda.time.Chronology chronology65 = mutableDateTime41.getChronology();
        mutableDateTime41.addHours((-625));
        org.joda.time.Interval interval68 = duration28.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DurationFieldType durationFieldType69 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime41.add(durationFieldType69, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1969 + "'", int60 == 1969);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        int int8 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime.Property property9 = dateTime3.hourOfDay();
        org.joda.time.DateTime.Property property10 = dateTime3.centuryOfEra();
        org.joda.time.DateTime.Property property11 = dateTime3.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) dateTime3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        java.lang.String str11 = property10.getName();
        org.joda.time.LocalTime localTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(42, 30, (int) (short) -1, 53650665, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone1.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration21 = period16.toDurationTo((org.joda.time.ReadableInstant) instant20);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21, 39);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.secondOfMinute();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime8.minuteOfHour();
        java.lang.String str26 = property25.getAsShortText();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = locale27.stripExtensions();
        int int29 = property25.getMaximumTextLength(locale28);
        java.lang.String str30 = dateTimeZone1.getShortName((long) (short) 1, locale28);
        java.lang.String str33 = nameProvider0.getShortName(locale28, "PT86400S", "P90YT0.198S");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "59" + "'", str26, "59");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PT10H51M97.021S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt10h51m97.021s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        mutablePeriod3.setSeconds((int) 'a');
        java.lang.Object obj8 = mutablePeriod3.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = mutablePeriod3.getValue(53652105);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53652105");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "P35YT97S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "P35YT97S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "P35YT97S");
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(53639537, 39250977);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53639537 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.joda.time.Period period1 = org.joda.time.Period.months(42);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(18, 39297267, 22, 0, 958);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 958 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9, (int) (short) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.Interval interval15 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) ' ');
        int int20 = localDate17.size();
        org.joda.time.LocalDate.Property property21 = localDate17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, dateTimeZone23);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = localDate17.toDateTimeAtStartOfDay(dateTimeZone23);
        java.lang.String str31 = dateTimeZone23.getShortName((long) 50);
        long long33 = dateTimeZone23.convertUTCToLocal((long) 39251167);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(3600L, dateTimeZone23);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone23);
        java.lang.String str37 = dateTimeZone23.getName((long) '4');
        org.joda.time.DateTime dateTime38 = dateTime13.withZone(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(797, 13, 39272321, (int) (short) 0, 52, 52, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3L + "'", long27 == 3L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 39251167L + "'", long33 == 39251167L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 5, (long) (byte) 100, chronology7);
        org.joda.time.DurationField durationField9 = chronology7.hours();
        long long11 = durationField9.getMillis(37);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 133200000L + "'", long11 == 133200000L);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.DateTime dateTime2 = mutableDateTime0.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime2.withDate(44, (-100), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime dateTime22 = dateTime1.plusDays(22);
        org.joda.time.DateTime dateTime24 = dateTime1.plusSeconds(14);
        int int25 = dateTime1.getMillisOfDay();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53722178 + "'", int25 == 53722178);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.lang.StringBuffer stringBuffer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer6, (long) 2025);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(39243612, 11, 39, 930, 32, 39316455, 39307184);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 930 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        long long6 = dateTimeField3.add((long) 31, 39272321);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 39272352L + "'", long6 == 39272352L);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("YearMonthDayNoDays");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=yearmonthdaynodays");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusDays(1956);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) ' ');
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate13 = localDate7.withFieldAdded(durationFieldType11, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDate13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) durationField8, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.UnsupportedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTimeISO();
        mutableDateTime23.addHours(21);
        boolean boolean27 = mutableDateTime23.isAfter((long) 86396191);
        int int28 = mutableDateTime23.getSecondOfDay();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) ' ');
        org.joda.time.Chronology chronology34 = localDate31.getChronology();
        org.joda.time.Period period35 = duration30.toPeriod(chronology34);
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period35, 23);
        org.joda.time.Minutes minutes38 = period35.toStandardMinutes();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 75596 + "'", int28 == 75596);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(minutes38);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DurationField durationField9 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfMonth();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYear((int) (short) -1);
        int int26 = localDateTime23.getCenturyOfEra();
        int int27 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withDayOfYear(5);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.minusMillis(38);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = duration33.plus(1L);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period47 = period42.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Duration duration51 = period46.toDurationTo((org.joda.time.ReadableInstant) instant50);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration51, 39);
        int int54 = duration33.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration33, 52);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime23.withMillisOfDay(642);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        int int61 = localDate60.getDayOfMonth();
        org.joda.time.LocalDate localDate63 = localDate60.plusYears(1);
        org.joda.time.Interval interval64 = localDate60.toInterval();
        int[] intArray65 = localDate60.getValues();
        java.util.Locale locale67 = java.util.Locale.ITALY;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = dateTimeField10.set((org.joda.time.ReadablePartial) localDateTime58, 46, intArray65, "en_us", locale67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"en_us\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 21 + "'", int61 == 21);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[2022, 2, 21]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 1, chronology20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) instant22, periodType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int26 = instant22.get(dateTimeFieldType25);
        java.lang.String str27 = dateTimeFieldType25.getName();
        java.lang.String str28 = dateTimeFieldType25.toString();
        int int29 = localDateTime4.get(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime4.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 895 + "'", int26 == 895);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfDay" + "'", str27, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 655 + "'", int29 == 655);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime9 = property1.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((-1511999969L));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-60494601599990L));
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod14.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod14.add(durationFieldType16, 1970);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType16.getField(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) localDateTime9, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = dateTimeField4.getType();
        int int7 = dateTimeField4.getMaximumValue((long) (-292275054));
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths(43);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(12);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration16, readableInstant17);
        org.joda.time.Period period20 = period18.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate15.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((-292275054));
        org.joda.time.LocalDate localDate25 = localDate21.minusYears(21);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType27 = periodType26.withMonthsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate25, periodType26);
        int int29 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        int int30 = localDate12.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) 'a');
        int int38 = localDateTime37.getYear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.hourOfDay();
        int int40 = property39.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property39.getFieldType();
        java.lang.String str42 = dateTimeFieldType41.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property43 = localDate12.property(dateTimeFieldType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1439 + "'", int7 == 1439);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9722 + "'", int38 == 9722);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hourOfDay" + "'", str42, "hourOfDay");
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology11, locale13, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        int int21 = property19.get();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        long long24 = chronology11.set((org.joda.time.ReadablePartial) localDateTime22, (long) 2022);
        org.joda.time.DateTimeField dateTimeField25 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology11.minuteOfHour();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.negated();
        int[] intArray36 = chronology11.get((org.joda.time.ReadablePeriod) period34, (long) 1969);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = property44.getAsShortText(locale45);
        java.util.Locale.setDefault(category39, locale45);
        int int48 = property38.getMaximumTextLength(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 9, chronology11, locale45, (java.lang.Integer) 15, 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withLocale(locale45);
        java.io.Writer writer53 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) 100, 1L, periodType58);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) 100, 1L, periodType62);
        org.joda.time.Period period64 = period59.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Duration duration68 = period63.toDurationTo((org.joda.time.ReadableInstant) instant67);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration68, 39);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period73 = duration72.toPeriod();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.centuries();
        int int75 = period73.get(durationFieldType74);
        mutableDateTime55.add((org.joda.time.ReadablePeriod) period73, 54);
        mutableDateTime55.setMillisOfDay(0);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime55.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer53, (org.joda.time.ReadableInstant) mutableDateTime55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455600000L + "'", long24 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "14" + "'", str46, "14");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) -1);
        int int15 = localDateTime12.getCenturyOfEra();
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDayOfYear(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusMillis(38);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = duration22.plus(1L);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period36 = period31.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Duration duration40 = period35.toDurationTo((org.joda.time.ReadableInstant) instant39);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration40, 39);
        int int43 = duration22.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration22, 52);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime12.withMillisOfDay(642);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date48 = localDateTime47.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -357 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(289);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        int int37 = dateTimeField34.getMaximumValue((long) (-292275054));
        mutableDateTime1.setRounding(dateTimeField34);
        int int39 = mutableDateTime1.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period50 = period45.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Duration duration54 = period49.toDurationTo((org.joda.time.ReadableInstant) instant53);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration54, 39);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime41.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime41.setZone(dateTimeZone58);
        int int60 = mutableDateTime41.getYearOfEra();
        int int61 = mutableDateTime41.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime41.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        int int64 = mutableDateTime1.get(dateTimeFieldType63);
        mutableDateTime1.addDays(52);
        int int67 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1969 + "'", int60 == 1969);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1969 + "'", int64 == 1969);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 1, chronology21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) instant23, periodType24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) ' ');
        org.joda.time.Chronology chronology29 = localDate26.getChronology();
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 1, periodType24, chronology29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) ' ');
        org.joda.time.Chronology chronology34 = localDate31.getChronology();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate37 = localDate31.withFieldAdded(durationFieldType35, (int) (byte) 100);
        boolean boolean38 = periodType24.isSupported(durationFieldType35);
        org.joda.time.PeriodType periodType39 = periodType24.withDaysRemoved();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.Chronology chronology42 = localDate40.getChronology();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 43, periodType24, chronology42);
        mutableDateTime1.setChronology(chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 1, chronology46);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) instant48, periodType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int52 = instant48.get(dateTimeFieldType51);
        boolean boolean53 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) instant48);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) ' ');
        int int58 = localDate55.size();
        org.joda.time.LocalDate.Property property59 = localDate55.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(0L, dateTimeZone61);
        long long65 = dateTimeZone61.convertLocalToUTC((long) 3, true);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = localDate55.toDateTimeAtStartOfDay(dateTimeZone61);
        java.lang.String str69 = dateTimeZone61.getShortName((long) 50);
        long long71 = dateTimeZone61.convertUTCToLocal((long) 39251167);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(3600L, dateTimeZone61);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((java.lang.Object) boolean53, dateTimeZone61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 895 + "'", int52 == 895);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 39251167L + "'", long71 == 39251167L);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T14:55:01.476Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:55:01.476z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        java.io.Writer writer5 = null;
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology11, locale13, (java.lang.Integer) 39221019);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology17, locale19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = chronology11.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(0L, chronology23);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(writer5, (org.joda.time.ReadablePartial) localDate25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(315532800097L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfSecond(2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Period period6 = period4.minusWeeks(100);
        org.joda.time.Period period8 = period6.withMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Period period23 = period11.plusSeconds(45);
        org.joda.time.Period period24 = period8.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period35 = period30.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Duration duration39 = period34.toDurationTo((org.joda.time.ReadableInstant) instant38);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration39, 39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        int int46 = period44.get(durationFieldType45);
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period44, 54);
        org.joda.time.Period period49 = period24.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period51 = period44.plusMinutes(42);
        int int52 = period51.getHours();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 24 + "'", int52 == 24);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        org.joda.time.DurationField durationField13 = chronology7.eras();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime.Property property13 = dateTime1.weekOfWeekyear();
        int int14 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property15 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime17 = dateTime1.withMillisOfDay(46);
        org.joda.time.DateTime.Property property18 = dateTime1.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = property18.addToCopy(34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds(40);
        int int8 = localTime3.getMillisOfSecond();
        org.joda.time.LocalTime localTime10 = localTime3.minusSeconds(86396191);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime12.toString(dateTimeFormatter14);
        org.joda.time.DateTime dateTime17 = dateTime12.plusMonths(86396191);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        boolean boolean23 = dateTime21.isEqualNow();
        int int24 = dateTime21.getDayOfYear();
        org.joda.time.Chronology chronology25 = dateTime21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology25);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        boolean boolean29 = localTime3.equals((java.lang.Object) chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField31 = localTime3.getField(34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 817 + "'", int8 == 817);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T14:55:24.817Z" + "'", str15, "2022-02-21T14:55:24.817Z");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        mutablePeriod5.add(0L);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.addYears(86396191);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant3, periodType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int7 = instant3.get(dateTimeFieldType6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) 10, (long) 3);
        org.joda.time.Instant instant12 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration10, 0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        java.util.Locale locale22 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology20, locale22, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        int int30 = property28.get();
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfFloorCopy();
        long long33 = chronology20.set((org.joda.time.ReadablePartial) localDateTime31, (long) 2022);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DurationField durationField36 = chronology20.eras();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology20);
        mutablePeriod14.setPeriod((long) (short) -1, chronology20);
        org.joda.time.DateTimeField dateTimeField39 = chronology20.weekyear();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 895 + "'", int7 == 895);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 14 + "'", int30 == 14);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645455600000L + "'", long33 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        boolean boolean6 = property3.equals((java.lang.Object) '#');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getSecondOfMinute();
        int int10 = dateTime8.getYearOfEra();
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalDateTime localDateTime12 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        long long8 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = dateTime3.minusYears(0);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfMonth((int) (byte) 10);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.negated();
        org.joda.time.DateTime dateTime22 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period20, (int) (byte) 100);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded((long) 33, 39251167);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime25.withMonthOfYear(75596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75596 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) ' ');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable8, (long) 1439);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours((-1));
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime8 = property6.addCopy((long) 893);
        int int9 = localTime8.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localTime8.getValue(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 13");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        mutableDateTime1.setYear(10);
        mutableDateTime1.addSeconds((int) (short) 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.minuteOfDay();
        mutableDateTime1.addHours((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int18 = mutablePeriod17.getWeeks();
        mutablePeriod17.setMinutes(51);
        mutablePeriod17.add(45747072000022L);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        mutableDateTime1.addSeconds(39305775);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        mutableDateTime1.addWeeks((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, (int) (short) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime5, periodType12);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(53670306, 894, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 894 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate0.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.minuteOfHour();
        int int23 = mutableDateTime21.getMinuteOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1439 + "'", int23 == 1439);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        boolean boolean6 = property4.isLeap();
        org.joda.time.LocalDate localDate7 = property4.withMaximumValue();
        java.util.Locale locale11 = new java.util.Locale("clockhourOfDay", "java.io.IOException", "");
        int int12 = property4.getMaximumShortTextLength(locale11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property4.setCopy("PeriodType[YearMonthDayNoMonths]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PeriodType[YearMonthDayNoMonths]\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals(locale11.toString(), "clockhourofday_JAVA.IO.IOEXCEPTION");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("English");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"English\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds(40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localTime3.toString(dateTimeFormatter8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16);
        mutablePeriod17.setYears(10);
        mutablePeriod17.setPeriod((int) (short) 1, 14, (int) (byte) 0, 1, (int) (short) 1, 53, 1969, 86396191);
        org.joda.time.LocalTime localTime29 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime31 = localTime29.withHourOfDay(39324);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39324 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10:55:26.198" + "'", str9, "10:55:26.198");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period2.plusSeconds(45);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration15, readableInstant16);
        org.joda.time.Period period19 = period17.withDays((int) (byte) 1);
        org.joda.time.Period period21 = period19.minusWeeks(100);
        org.joda.time.Period period23 = period21.withMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.Period period38 = period26.plusSeconds(45);
        org.joda.time.Period period39 = period23.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period50 = period45.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Duration duration54 = period49.toDurationTo((org.joda.time.ReadableInstant) instant53);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration54, 39);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.centuries();
        int int61 = period59.get(durationFieldType60);
        mutableDateTime41.add((org.joda.time.ReadablePeriod) period59, 54);
        org.joda.time.Period period64 = period39.withFields((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = period39.getFieldTypes();
        org.joda.time.Period period66 = period2.plus((org.joda.time.ReadablePeriod) period39);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = localTime1.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = localDate5.plusMonths(44);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        boolean boolean14 = dateTime12.isEqualNow();
        int int15 = dateTime12.getDayOfYear();
        org.joda.time.Chronology chronology16 = dateTime12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period26 = period21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.minusSeconds(21);
        mutablePeriod17.add((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate30 = localDate5.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.LocalDate localDate32 = localDate5.withYearOfEra(53600069);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = localDate5.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        java.util.Locale.Category category0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale1 = java.util.Locale.getDefault(category0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 1L, periodType3);
        org.joda.time.Period period6 = period4.minusSeconds((-1));
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        int int11 = period9.get(durationFieldType10);
        boolean boolean12 = period4.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.withFieldAdded(durationFieldType10, 52);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.minusDays(55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfMonth(39251693);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39251693 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, (int) (byte) 100);
        org.joda.time.LocalDate.Property property7 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(3);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.joda.time.LocalDate localDate12 = property7.withMaximumValue();
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate12.withMonthOfYear(39243612);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39243612 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant7 = org.joda.time.Instant.parse("English (United States)", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(dateTimePrinter6);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(39272321, 19, 34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39272321 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        int int21 = localDateTime13.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.property(dateTimeFieldType26);
        int int29 = localDateTime25.getMinuteOfHour();
        boolean boolean30 = localDateTime11.equals((java.lang.Object) int29);
        int int31 = localDateTime11.getCenturyOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27 + "'", int4 == 27);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfDay" + "'", str20, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "dayOfMonth" + "'", str27, "dayOfMonth");
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54 + "'", int29 == 54);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        int int23 = localDateTime15.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str29 = dateTimeFieldType28.getName();
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.property(dateTimeFieldType28);
        int int31 = localDateTime27.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withMillisOfDay(1);
        int int34 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) (short) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, readableInstant43);
        org.joda.time.Duration duration45 = duration42.toDuration();
        int int46 = duration36.compareTo((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime4.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        java.lang.String str55 = chronology51.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((java.lang.Object) duration36, chronology51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "clockhourOfDay" + "'", str22, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfMonth" + "'", str29, "dayOfMonth");
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 54 + "'", int31 == 54);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("+22:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+22:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.parse("centuries", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int5 = mutablePeriod4.getWeeks();
        mutablePeriod4.setMinutes(51);
        mutablePeriod4.setMinutes(52);
        int int10 = mutablePeriod4.getSeconds();
        int int11 = mutablePeriod4.getDays();
        mutablePeriod4.addDays(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.millisOfSecond();
        mutableDateTime1.add((long) 39239);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(21, 39251167, 53639537);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39251167 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean18 = mutableDateTime1.isSupported(dateTimeFieldType17);
        int int19 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology24, locale26, (java.lang.Integer) 39221019);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) ' ');
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        int int37 = dateTimeField34.getMaximumValue((long) (-292275054));
        mutableDateTime1.setRounding(dateTimeField34);
        int int39 = mutableDateTime1.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period50 = period45.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Duration duration54 = period49.toDurationTo((org.joda.time.ReadableInstant) instant53);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration54, 39);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime41.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime41.setZone(dateTimeZone58);
        int int60 = mutableDateTime41.getYearOfEra();
        int int61 = mutableDateTime41.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime41.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        int int64 = mutableDateTime1.get(dateTimeFieldType63);
        mutableDateTime1.addDays(52);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 654 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1969 + "'", int60 == 1969);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1969 + "'", int64 == 1969);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        java.lang.String[] strArray38 = new java.lang.String[] { "PT10H100M97.021S", "java.io.IOException", "English (United Kingdom)", "dayOfMonth", "de", "2022-02-21T14:53:38.450Z", "", "2022-02-21T10:53:40.615", "hi!", "DateTimeField[year]", "en_US", "PT86400S", "2022-02-21T10:53:40.615", "", "dayOfMonth", "minuteOfDay", "1970", "UTC", "2022-02-21T15:00:00.000", "2022-02-21T10:53:40.615", "DateTimeField[year]", "February", "en-US", "14", "2022-02-21T15:00:00.000", "PT86400S", "German", "2022-02-21T14:53:55.782Z", "PT86400S", "PT10H100M97.021S", "clockhourOfDay", "59", "59", "1970", "Property[hourOfDay]", "2022-02-21T15:00:00.000", "59", "PT0.099S" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        boolean boolean42 = strSet39.add("DateTimeField[year]");
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet39.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, strMap50);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale55);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale61.getISO3Language();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale69.getDisplayName();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology73, locale75, (java.lang.Integer) 10);
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.lang.String str80 = locale79.getDisplayName();
        java.util.Locale locale81 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale82 = java.util.Locale.UK;
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale55, locale59, locale61, locale65, locale68, locale69, locale71, locale75, locale79, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList84, filteringMode86);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList87);
        boolean boolean89 = strSet39.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45);
        boolean boolean90 = strSet39.isEmpty();
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "deu" + "'", str64, "deu");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "German" + "'", str70, "German");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "German" + "'", str80, "German");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode86.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(6, 0);
        org.joda.time.LocalTime localTime4 = localTime2.plusMinutes(3);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds(86396);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 46, periodType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 0L, periodType10, chronology12);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.LocalTime localTime16 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, 0);
        org.joda.time.LocalTime localTime18 = localTime16.minusMinutes(39282046);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = localTime16.withHourOfDay(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        boolean boolean7 = localTime3.isSupported(durationFieldType6);
        org.joda.time.LocalTime localTime9 = localTime3.withMillisOfDay(4);
        java.lang.String str10 = localTime3.toString();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration14, (int) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getYearOfCentury();
        org.joda.time.Interval interval20 = duration14.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.LocalTime localTime24 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str33 = dateTimeFieldType32.getName();
        int int34 = localDateTime26.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime26.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.property(dateTimeFieldType39);
        int int42 = localDateTime38.getMinuteOfHour();
        org.joda.time.DateTime dateTime43 = localDateTime38.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) 100, 1L, periodType52);
        org.joda.time.Period period54 = period49.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Duration duration58 = period53.toDurationTo((org.joda.time.ReadableInstant) instant57);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration58, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean62 = mutableDateTime45.isSupported(dateTimeFieldType61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) 1, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime67.toDateTime();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 1, chronology70);
        org.joda.time.DateTime dateTime72 = dateTime71.toDateTime();
        int int73 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration78 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration75, 10);
        org.joda.time.Duration duration79 = duration78.toDuration();
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateTime dateTime81 = dateTime43.plus((org.joda.time.ReadableDuration) duration78);
        int int82 = dateTime81.getCenturyOfEra();
        org.joda.time.DateTime.Property property83 = dateTime81.millisOfSecond();
        org.joda.time.Chronology chronology85 = null;
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.lang.String str88 = locale86.getDisplayVariant(locale87);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology85, locale87, (java.lang.Integer) 10);
        java.util.Set<java.lang.String> strSet91 = locale87.getUnicodeLocaleAttributes();
        java.lang.String str92 = property83.getAsText(locale87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = localTime24.toString("2022-02-21T14:54:55.983Z", locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10:55:28.007" + "'", str10, "10:55:28.007");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "clockhourOfDay" + "'", str33, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "dayOfMonth" + "'", str40, "dayOfMonth");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 54 + "'", int42 == 54);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 20 + "'", int82 == 20);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(strSet91);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "8" + "'", str92, "8");
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.joda.time.Period period1 = org.joda.time.Period.years(86396);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusMillis(2022);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime.Property property10 = localTime8.millisOfDay();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property10.setCopy("Jan", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39328220 + "'", int6 == 39328220);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English" + "'", str13, "English");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime1.minusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plus(34999200005L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getSecondOfMinute();
        boolean boolean7 = dateTime5.isEqualNow();
        int int8 = dateTime5.getDayOfYear();
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology9);
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfWeek();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 39246272, (long) 5, chronology9);
        org.joda.time.DurationField durationField14 = chronology9.millis();
        long long16 = durationField14.getMillis(4017);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 28 + "'", int6 == 28);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4017L + "'", long16 == 4017L);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        java.lang.String str7 = localDateTime4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withDayOfWeek(2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T10:55:28.441" + "'", str7, "2022-02-21T10:55:28.441");
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundHalfFloor();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTimeISO();
        mutableDateTime1.addHours(4);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period36 = period31.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Duration duration40 = period35.toDurationTo((org.joda.time.ReadableInstant) instant39);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration40, 39);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime27.secondOfMinute();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.addWrapField(6);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime1.dayOfMonth();
        org.joda.time.Instant instant49 = mutableDateTime1.toInstant();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(instant49);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str6 = timeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths(43);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(12);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) ' ');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration16, readableInstant17);
        org.joda.time.Period period20 = period18.withDays((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate15.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((-292275054));
        org.joda.time.LocalDate localDate25 = localDate21.minusYears(21);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType27 = periodType26.withMonthsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate25, periodType26);
        java.util.Date date29 = localDate25.toDate();
        boolean boolean30 = timeZone0.inDaylightTime(date29);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Jun 22 00:00:00 UTC 1998");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Period period6 = period2.minusHours(39251167);
        org.joda.time.Period period8 = period2.withMinutes(45);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 1, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 1, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        int int41 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration43, 10);
        long long47 = duration46.getMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) 38, (int) 'a');
        int int54 = duration46.compareTo((org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableDuration) duration46, periodType56);
        int int58 = mutableDateTime29.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime29.setSecondOfMinute(53689989);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53689989 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86500000L + "'", long47 == 86500000L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 18);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str12 = dateTimeFieldType11.getName();
        int int13 = localDateTime5.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime5.minusSeconds((int) '#');
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusDays(0);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 46, periodType22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod23, 39221019);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "clockhourOfDay" + "'", str12, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period10 = period7.plusDays(53600069);
        org.joda.time.Period period12 = period10.plusMonths(39239);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int16 = period14.getValue((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setRawOffset(19);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        timeZone0.setID("English (United Kingdom)");
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(39267259, 53684566, 27, 53722178, 254, 39277299, 86396191);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53722178 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        int int7 = localDateTime6.getYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        int int9 = property8.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        boolean boolean12 = dateTimeField10.isLeap((long) 100);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9722 + "'", int7 == 9722);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setWeekOfWeekyear(14);
        int int20 = mutableDateTime1.getRoundingMode();
        java.util.GregorianCalendar gregorianCalendar21 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(dateTimeZone23);
        org.joda.time.LocalTime localTime26 = localTime24.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime28 = localTime26.minusHours((-1));
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.plusSeconds(893);
        boolean boolean32 = localTime22.isEqual((org.joda.time.ReadablePartial) localTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) boolean32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645455600000L);
        org.joda.time.Minutes minutes2 = duration1.toStandardMinutes();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) 38, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration12, (int) (short) 100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.Interval interval18 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration19 = duration8.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration21, 54);
        org.joda.time.Duration duration25 = duration1.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration1.plus((long) 14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) duration1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        int int5 = mutablePeriod4.getWeeks();
        mutablePeriod4.setMinutes(51);
        java.lang.Object obj8 = mutablePeriod4.clone();
        int int9 = mutablePeriod4.getMinutes();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT10H51M97.021S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT10H51M97.021S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT10H51M97.021S");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("1969-02-02T10:59:56.191Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-02-02T10:59:56.191Z\" is malformed at \"69-02-02T10:59:56.191Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) ' ');
        int int16 = localDate13.size();
        org.joda.time.DateMidnight dateMidnight17 = localDate13.toDateMidnight();
        org.joda.time.LocalDate localDate19 = localDate13.withYearOfCentury(0);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period29 = period24.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = period28.plusDays(53600069);
        org.joda.time.Period period33 = period31.plusMonths(39239);
        org.joda.time.Period period35 = period33.minusSeconds((-1));
        org.joda.time.Period period36 = period35.toPeriod();
        int[] intArray37 = period36.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology7.validate((org.joda.time.ReadablePartial) localDate19, intArray37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39239 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 29 + "'", int4 == 29);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2000-02-21" + "'", str20, "2000-02-21");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 39239, 0, 53600069, 0, 0, 1, -99]");
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours((-1));
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusSeconds(893);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Period period23 = period21.withSeconds(10);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.millis();
        boolean boolean25 = period21.isSupported(durationFieldType24);
        org.joda.time.LocalTime localTime27 = localTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period21, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localTime5.getValue(367);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 367");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period16 = period11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration20 = period15.toDurationTo((org.joda.time.ReadableInstant) instant19);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration20, 39);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime7.setZone(dateTimeZone24);
        int int26 = mutableDateTime7.getYearOfEra();
        int int27 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalTime localTime32 = localTime5.plusSeconds(958);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        java.lang.String str34 = property33.getAsString();
        org.joda.time.LocalTime localTime35 = property33.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime37 = localTime35.plusSeconds(1969);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) ' ');
        org.joda.time.Chronology chronology41 = localDate38.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate localDate44 = localDate38.withField(dateTimeFieldType42, 6);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localTime37.get(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "11" + "'", str34, "11");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        int int3 = localDate0.size();
        org.joda.time.LocalDate.Property property4 = localDate0.era();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = localDate5.plusMonths(44);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        boolean boolean14 = dateTime12.isEqualNow();
        int int15 = dateTime12.getDayOfYear();
        org.joda.time.Chronology chronology16 = dateTime12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period26 = period21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.minusSeconds(21);
        mutablePeriod17.add((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate30 = localDate5.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.LocalDate.Property property31 = localDate30.era();
        org.joda.time.Period period40 = new org.joda.time.Period(30, 40, 1439, 6, (int) (short) 10, 39243612, 4, 6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = localDate30.plus((org.joda.time.ReadablePeriod) period40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292279024 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 30 + "'", int13 == 30);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfHour();
        java.lang.String str19 = property18.getAsShortText();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = locale20.stripExtensions();
        int int22 = property18.getMaximumTextLength(locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.plus(1L);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.Period period43 = period38.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration47 = period42.toDurationTo((org.joda.time.ReadableInstant) instant46);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration47, 39);
        int int50 = duration29.compareTo((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Instant instant52 = instant26.withDurationAdded((org.joda.time.ReadableDuration) duration47, 0);
        org.joda.time.Instant instant53 = instant26.toInstant();
        boolean boolean54 = locale21.equals((java.lang.Object) instant26);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration17 = period12.toDurationTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(6);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        mutablePeriod24.setYears((int) '#');
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod24.add((long) 1, chronology28);
        mutablePeriod24.addDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod24.copy();
        mutablePeriod33.setDays(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str10 = dateTimeFieldType9.getName();
        org.joda.time.LocalDateTime.Property property11 = localDateTime0.property(dateTimeFieldType9);
        int int12 = localDateTime0.getDayOfWeek();
        int int13 = localDateTime0.getWeekyear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 100);
        int int16 = dateTime15.getCenturyOfEra();
        org.joda.time.DateTime dateTime18 = dateTime15.minusMonths(5);
        org.joda.time.DateTime dateTime19 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property20 = dateTime15.year();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime21.withDate(4, 39282046, 2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39282046 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "clockhourOfDay" + "'", str10, "clockhourOfDay");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime1.setZone(dateTimeZone18);
        int int20 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(41);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period33 = period28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Duration duration37 = period32.toDurationTo((org.joda.time.ReadableInstant) instant36);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration37, 39);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime24.yearOfEra();
        mutableDateTime24.setWeekOfWeekyear(14);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime24.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone44.convertLocalToUTC((long) (byte) 100, false);
        mutableDateTime24.setZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime1.toMutableDateTime(dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setDayOfYear(53677371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53677371 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology6, locale8, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.get();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        long long19 = chronology6.set((org.joda.time.ReadablePartial) localDateTime17, (long) 2022);
        org.joda.time.DateTime dateTime20 = dateTime1.toDateTime(chronology6);
        org.joda.time.DateTime dateTime22 = dateTime1.plusDays(22);
        org.joda.time.DateTime dateTime24 = dateTime1.plusSeconds(14);
        org.joda.time.DateTime dateTime26 = dateTime1.minusYears(859);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455600000L + "'", long19 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(43);
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.util.Locale locale8 = java.util.Locale.US;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localDate0.toString("UTC", locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: U");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English (Canada)" + "'", str9, "English (Canada)");
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean7 = property5.isLeap();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale9.getCountry();
        java.lang.String str12 = property5.getAsShortText(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder14 = builder1.setLocale(locale9);
        java.util.Locale.Builder builder15 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder1.setRegion("PT0S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: PT0S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CA" + "'", str11, "CA");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "14" + "'", str12, "14");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) 'a', 56, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds(39);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths((int) (byte) -1);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withSecondOfMinute(59);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfWeek();
        org.joda.time.LocalTime localTime11 = localTime8.withFields((org.joda.time.ReadablePartial) localDate9);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2000-02-21", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isParser();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable8, (long) 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("10:54:46.143");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"10:54:46.143\" is malformed at \":54:46.143\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period8 = period3.plus((org.joda.time.ReadablePeriod) period7);
        int int9 = period3.getHours();
        org.joda.time.Period period10 = period3.toPeriod();
        org.joda.time.Period period12 = period10.plusYears(45);
        org.joda.time.Period period14 = period12.multipliedBy(2);
        org.joda.time.Period period16 = period14.plusWeeks(39251693);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = period16.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(39298055, 1970, 1956, (-100), 0, 53671205, 20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(10, 1956, 39243612, 86396191, 53730692, 39267259, 5, 206, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 5, dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        mutablePeriod7.setYears((int) '#');
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        java.util.Locale locale17 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology15, locale17, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        int int25 = property23.get();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        long long28 = chronology15.set((org.joda.time.ReadablePartial) localDateTime26, (long) 2022);
        mutablePeriod7.setPeriod((long) ' ', chronology15);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(53722178, 39251693, 53730692, 39251167, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53722178 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645455600000L + "'", long28 == 1645455600000L);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str10 = dateTimeFieldType9.getName();
        org.joda.time.LocalDateTime.Property property11 = localDateTime0.property(dateTimeFieldType9);
        int int12 = localDateTime0.getDayOfWeek();
        int int13 = localDateTime0.getWeekyear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 100);
        int int16 = dateTime15.getCenturyOfEra();
        org.joda.time.DateTime dateTime18 = dateTime15.minusMonths(5);
        org.joda.time.DateTime dateTime19 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean20 = dateTime15.isEqualNow();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "clockhourOfDay" + "'", str10, "clockhourOfDay");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) ' ');
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField11 = chronology7.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = new org.joda.time.Period((java.lang.Object) localDate3, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology4, locale6, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) 2022);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField20 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField21 = chronology4.weekyearOfCentury();
        int int23 = dateTimeField21.getMaximumValue((long) 1439);
        java.lang.String str25 = dateTimeField21.getAsText(45747072000022L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 99 + "'", int23 == 99);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period10 = period5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration14 = period9.toDurationTo((org.joda.time.ReadableInstant) instant13);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration14, 39);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setDayOfYear((int) ' ');
        mutableDateTime1.add((long) 53);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        org.joda.time.Instant instant25 = mutableDateTime24.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setMinuteOfHour(39266896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39266896 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(10L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, (int) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.Interval interval9 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime7);
        int int10 = dateTime7.getDayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        int int16 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str25 = dateTimeFieldType24.getName();
        int int26 = localDateTime18.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str32 = dateTimeFieldType31.getName();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.property(dateTimeFieldType31);
        int int34 = localDateTime30.getMinuteOfHour();
        org.joda.time.DateTime dateTime35 = localDateTime30.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period46 = period41.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Duration duration50 = period45.toDurationTo((org.joda.time.ReadableInstant) instant49);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration50, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean54 = mutableDateTime37.isSupported(dateTimeFieldType53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 1, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime59.toDateTime();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 1, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime63.toDateTime();
        int int65 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration67, 10);
        org.joda.time.Duration duration71 = duration70.toDuration();
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime73 = dateTime35.plus((org.joda.time.ReadableDuration) duration70);
        int int74 = dateTime73.getCenturyOfEra();
        org.joda.time.DateTime.Property property75 = dateTime73.millisOfSecond();
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.lang.String str80 = locale78.getDisplayVariant(locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology77, locale79, (java.lang.Integer) 10);
        java.util.Set<java.lang.String> strSet83 = locale79.getUnicodeLocaleAttributes();
        java.lang.String str84 = property75.getAsText(locale79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = dateTime7.toString("2022-02-21T14:54:08.597Z", locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "clockhourOfDay" + "'", str25, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "dayOfMonth" + "'", str32, "dayOfMonth");
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 54 + "'", int34 == 54);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20 + "'", int74 == 20);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(strSet83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "549" + "'", str84, "549");
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.yearOfEra();
        org.joda.time.Period period7 = new org.joda.time.Period((long) ' ', chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        long long13 = chronology4.getDateTimeMillis(39239, (int) (byte) 1, 19, 751);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology4);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology4.getDateTimeMillis(1176097622400751L, 53650665, 44, 39236, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53650665 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1176097622400751L + "'", long13 == 1176097622400751L);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 1L, periodType9);
        org.joda.time.Period period11 = period6.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration15 = period10.toDurationTo((org.joda.time.ReadableInstant) instant14);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration15, 39);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime2.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = locale23.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        long long30 = dateTimeZone19.getMillisKeepLocal(dateTimeZone28, 315532800097L);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 31, dateTimeZone19);
        java.util.TimeZone timeZone32 = dateTimeZone19.toTimeZone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.Period period42 = period37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Duration duration46 = period41.toDurationTo((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Instant instant48 = instant45.plus((long) (byte) -1);
        org.joda.time.Instant instant51 = instant48.withDurationAdded(1L, (int) (short) -1);
        org.joda.time.Chronology chronology52 = instant48.getChronology();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = locale55.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 45, (int) '4');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale55, (java.lang.Integer) 1970);
        java.lang.String str62 = timeZone32.getDisplayName(locale55);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 315532800097L + "'", long30 == 315532800097L);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Koordinierte Universalzeit" + "'", str62, "Koordinierte Universalzeit");
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 45, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime.Property property10 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime14 = localTime12.plusSeconds(958);
        int int15 = localTime12.getMillisOfSecond();
        org.joda.time.LocalTime localTime17 = localTime12.minusSeconds(51);
        org.joda.time.LocalTime localTime19 = localTime12.plusSeconds(53697431);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 906 + "'", int15 == 906);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(46);
        java.lang.String str6 = property3.getAsString();
        int int7 = property3.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property3.withMaximumValue();
        java.lang.String str9 = property3.getName();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "14" + "'", str6, "14");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hourOfDay" + "'", str9, "hourOfDay");
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((int) 'u', 819, 168, 53652105, 120, 20, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53652105 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getSecondOfMinute();
        boolean boolean5 = dateTime3.isEqualNow();
        int int6 = dateTime3.getDayOfYear();
        org.joda.time.Chronology chronology7 = dateTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) '#', chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology7.halfdays();
        long long14 = durationField11.getMillis(0L, (long) 6);
        long long16 = durationField11.getMillis(6);
        long long19 = durationField11.getMillis(31556952000L, (long) 39282046);
        long long20 = durationField11.getUnitMillis();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 33 + "'", int4 == 33);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 259200000L + "'", long16 == 259200000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1363260326400000000L + "'", long19 == 1363260326400000000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 43200000L + "'", long20 == 43200000L);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        int int12 = dateTime10.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (short) 10, 100, (int) 'a', 21);
        java.lang.String str18 = mutablePeriod17.toString();
        org.joda.time.DateTime dateTime19 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) '4');
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period30 = period25.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Duration duration34 = period29.toDurationTo((org.joda.time.ReadableInstant) instant33);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration34, 39);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime21.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime21.setZone(dateTimeZone38);
        int int40 = mutableDateTime21.getYearOfEra();
        int int41 = mutableDateTime21.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime21.year();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) ' ');
        org.joda.time.Chronology chronology46 = localDate43.getChronology();
        mutableDateTime21.setChronology(chronology46);
        boolean boolean48 = dateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 1, chronology50);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) instant52, periodType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int56 = instant52.get(dateTimeFieldType55);
        java.lang.String str57 = dateTimeFieldType55.getName();
        java.lang.String str58 = dateTimeFieldType55.toString();
        boolean boolean59 = dateTime10.isSupported(dateTimeFieldType55);
        org.joda.time.DateTime dateTime60 = dateTime10.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeFormatter8.print((org.joda.time.ReadableInstant) dateTime60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT10H100M97.021S" + "'", str18, "PT10H100M97.021S");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 895 + "'", int56 == 895);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "minuteOfDay" + "'", str57, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "minuteOfDay" + "'", str58, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) ' ');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField5 = chronology3.days();
        int int8 = durationField5.getValue((long) 35, (long) 12);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        java.util.Locale locale14 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology12, locale14, (java.lang.Integer) 39221019);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        int int22 = property20.get();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfFloorCopy();
        long long25 = chronology12.set((org.joda.time.ReadablePartial) localDateTime23, (long) 2022);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology12.minuteOfHour();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period33 = period31.minusSeconds((-1));
        java.lang.String str34 = period31.toString();
        org.joda.time.Period period35 = period31.negated();
        int[] intArray37 = chronology12.get((org.joda.time.ReadablePeriod) period35, (long) 1969);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.monthOfYear();
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        java.util.Locale locale46 = java.util.Locale.US;
        java.lang.String str47 = property45.getAsShortText(locale46);
        java.util.Locale.setDefault(category40, locale46);
        int int49 = property39.getMaximumTextLength(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 9, chronology12, locale46, (java.lang.Integer) 15, 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter3.withLocale(locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.parse("42", dateTimeFormatter53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645455600000L + "'", long25 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.099S" + "'", str34, "PT0.099S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 1, 969]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "14" + "'", str47, "14");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 10, (long) '#', chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) -1);
        int int15 = localDateTime12.getCenturyOfEra();
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDayOfYear(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withDate(0, 39282046, 55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39282046 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(localDateTime18);
    }
}
